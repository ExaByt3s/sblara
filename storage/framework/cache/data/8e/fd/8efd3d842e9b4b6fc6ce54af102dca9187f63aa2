1526787365s:1294484:"<table id="myTable" class="table table-striped table-bordered table-advance table-hover dt-responsive">
        <thead>
            <tr>
                <th><i class="fa fa-briefcase"></i> Company </th>
                <th> Action </th>
                <th> Ltp </th>
                <th> Hi </th>
                <th> Lo </th>
                <th> CP </th>
                <th> YCP </th>
                <th> Chg </th>
                <th> Chg % </th>
                <th> Trd </th>
                <th> Value </th>
                <th> Vol </th>
                <th> Upd </th>

            </tr>
        </thead>
        <tbody>
                    <tr>
                                        <td class="highlight"><div class="danger"></div> <a href="javascript:;"><a target="_blank" href="https://dev.stockbangladesh.com/company-details/1">1JANATAMF</a></a></td>
                                        <td> <div class="btn-group">
                     <button class="btn green btn-sm dropdown-toggle" type="button" data-toggle="dropdown" aria-expanded="false"> Go To
                         <i class="fa fa-angle-down"></i>
                     </button>
                     <ul class="dropdown-menu" role="menu">
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/ta-chart?instrumentCode=1JANATAMF"> TA Chart </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/advance-ta-chart?instrumentCode=1JANATAMF"> Advance TA Chart </a>
                         </li>
                                                  <li>
                                                      <a target="_blank" href="https://dev.stockbangladesh.com/minute-chart/1"> Minute Chart </a>
                                                  </li>

                                                  <li>
                                                      <a target="_blank" href="https://dev.stockbangladesh.com/news-chart/1"> News Chart </a>
                                                  </li>



                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/company-details/1"> Company Details </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/fundamental-details/1"> Fundamental Details </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/news/search?keyword=&amp;instrument_id=1&amp;from_date=&amp;to_date="> News</a>
                         </li>
                         <li class="divider"> </li>
                         <li>
                             <a href="javascript:;"> Separated link </a>
                         </li>
                     </ul>
                 </div>
                 </td>
                <td> 6.2 </td>
                <td> 6.3 </td>
                <td> 6.2 </td>
                <td> 6.2 </td>
                <td> 6.3 </td>
                <td class="font-red-haze"> -0.1 </td>
                <td class="font-red-haze"> -1.59% </td>
                <td> 20 </td>
                <td> 0.185 </td>
                <td> 29813 </td>
                <td> 17-May, 14:30 </td>
            </tr>
                    <tr>
                                                    <td class="highlight"><div class="info"></div> <a href="javascript:;"><a target="_blank" href="https://dev.stockbangladesh.com/company-details/4">1STPRIMFMF</a></a></td>
                            <td> <div class="btn-group">
                     <button class="btn green btn-sm dropdown-toggle" type="button" data-toggle="dropdown" aria-expanded="false"> Go To
                         <i class="fa fa-angle-down"></i>
                     </button>
                     <ul class="dropdown-menu" role="menu">
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/ta-chart?instrumentCode=1STPRIMFMF"> TA Chart </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/advance-ta-chart?instrumentCode=1STPRIMFMF"> Advance TA Chart </a>
                         </li>
                                                  <li>
                                                      <a target="_blank" href="https://dev.stockbangladesh.com/minute-chart/4"> Minute Chart </a>
                                                  </li>

                                                  <li>
                                                      <a target="_blank" href="https://dev.stockbangladesh.com/news-chart/4"> News Chart </a>
                                                  </li>



                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/company-details/4"> Company Details </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/fundamental-details/4"> Fundamental Details </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/news/search?keyword=&amp;instrument_id=4&amp;from_date=&amp;to_date="> News</a>
                         </li>
                         <li class="divider"> </li>
                         <li>
                             <a href="javascript:;"> Separated link </a>
                         </li>
                     </ul>
                 </div>
                 </td>
                <td> 12.7 </td>
                <td> 12.8 </td>
                <td> 12.4 </td>
                <td> 12.5 </td>
                <td> 12.7 </td>
                <td class="font-red-haze"> -0.2 </td>
                <td class="font-red-haze"> -1.57% </td>
                <td> 105 </td>
                <td> 1.911 </td>
                <td> 151974 </td>
                <td> 17-May, 14:30 </td>
            </tr>
                    <tr>
            
                <td class="highlight"><div class="success"></div> <a href="javascript:;"><a target="_blank" href="https://dev.stockbangladesh.com/company-details/30035">AAMRANET</a></a></td>
                                                    <td> <div class="btn-group">
                     <button class="btn green btn-sm dropdown-toggle" type="button" data-toggle="dropdown" aria-expanded="false"> Go To
                         <i class="fa fa-angle-down"></i>
                     </button>
                     <ul class="dropdown-menu" role="menu">
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/ta-chart?instrumentCode=AAMRANET"> TA Chart </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/advance-ta-chart?instrumentCode=AAMRANET"> Advance TA Chart </a>
                         </li>
                                                  <li>
                                                      <a target="_blank" href="https://dev.stockbangladesh.com/minute-chart/30035"> Minute Chart </a>
                                                  </li>

                                                  <li>
                                                      <a target="_blank" href="https://dev.stockbangladesh.com/news-chart/30035"> News Chart </a>
                                                  </li>



                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/company-details/30035"> Company Details </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/fundamental-details/30035"> Fundamental Details </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/news/search?keyword=&amp;instrument_id=30035&amp;from_date=&amp;to_date="> News</a>
                         </li>
                         <li class="divider"> </li>
                         <li>
                             <a href="javascript:;"> Separated link </a>
                         </li>
                     </ul>
                 </div>
                 </td>
                <td> 92.7 </td>
                <td> 94.7 </td>
                <td> 92 </td>
                <td> 93 </td>
                <td> 91.8 </td>
                <td class="font-green-jungle"> 1.2 </td>
                <td class="font-green-jungle"> 1.31% </td>
                <td> 1213 </td>
                <td> 44.582 </td>
                <td> 475751 </td>
                <td> 17-May, 14:30 </td>
            </tr>
                    <tr>
                                        <td class="highlight"><div class="danger"></div> <a href="javascript:;"><a target="_blank" href="https://dev.stockbangladesh.com/company-details/513">AAMRATECH</a></a></td>
                                        <td> <div class="btn-group">
                     <button class="btn green btn-sm dropdown-toggle" type="button" data-toggle="dropdown" aria-expanded="false"> Go To
                         <i class="fa fa-angle-down"></i>
                     </button>
                     <ul class="dropdown-menu" role="menu">
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/ta-chart?instrumentCode=AAMRATECH"> TA Chart </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/advance-ta-chart?instrumentCode=AAMRATECH"> Advance TA Chart </a>
                         </li>
                                                  <li>
                                                      <a target="_blank" href="https://dev.stockbangladesh.com/minute-chart/513"> Minute Chart </a>
                                                  </li>

                                                  <li>
                                                      <a target="_blank" href="https://dev.stockbangladesh.com/news-chart/513"> News Chart </a>
                                                  </li>



                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/company-details/513"> Company Details </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/fundamental-details/513"> Fundamental Details </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/news/search?keyword=&amp;instrument_id=513&amp;from_date=&amp;to_date="> News</a>
                         </li>
                         <li class="divider"> </li>
                         <li>
                             <a href="javascript:;"> Separated link </a>
                         </li>
                     </ul>
                 </div>
                 </td>
                <td> 30.1 </td>
                <td> 31.2 </td>
                <td> 29.5 </td>
                <td> 29.6 </td>
                <td> 30.4 </td>
                <td class="font-red-haze"> -0.8 </td>
                <td class="font-red-haze"> -2.63% </td>
                <td> 211 </td>
                <td> 5.84 </td>
                <td> 195339 </td>
                <td> 17-May, 14:30 </td>
            </tr>
                    <tr>
                                        <td class="highlight"><div class="danger"></div> <a href="javascript:;"><a target="_blank" href="https://dev.stockbangladesh.com/company-details/502">ABB1STMF</a></a></td>
                                        <td> <div class="btn-group">
                     <button class="btn green btn-sm dropdown-toggle" type="button" data-toggle="dropdown" aria-expanded="false"> Go To
                         <i class="fa fa-angle-down"></i>
                     </button>
                     <ul class="dropdown-menu" role="menu">
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/ta-chart?instrumentCode=ABB1STMF"> TA Chart </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/advance-ta-chart?instrumentCode=ABB1STMF"> Advance TA Chart </a>
                         </li>
                                                  <li>
                                                      <a target="_blank" href="https://dev.stockbangladesh.com/minute-chart/502"> Minute Chart </a>
                                                  </li>

                                                  <li>
                                                      <a target="_blank" href="https://dev.stockbangladesh.com/news-chart/502"> News Chart </a>
                                                  </li>



                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/company-details/502"> Company Details </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/fundamental-details/502"> Fundamental Details </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/news/search?keyword=&amp;instrument_id=502&amp;from_date=&amp;to_date="> News</a>
                         </li>
                         <li class="divider"> </li>
                         <li>
                             <a href="javascript:;"> Separated link </a>
                         </li>
                     </ul>
                 </div>
                 </td>
                <td> 6.1 </td>
                <td> 6.1 </td>
                <td> 6.1 </td>
                <td> 6.1 </td>
                <td> 6.2 </td>
                <td class="font-red-haze"> -0.1 </td>
                <td class="font-red-haze"> -1.61% </td>
                <td> 74 </td>
                <td> 3.771 </td>
                <td> 618246 </td>
                <td> 17-May, 14:30 </td>
            </tr>
                    <tr>
                                        <td class="highlight"><div class="danger"></div> <a href="javascript:;"><a target="_blank" href="https://dev.stockbangladesh.com/company-details/12">ABBANK</a></a></td>
                                        <td> <div class="btn-group">
                     <button class="btn green btn-sm dropdown-toggle" type="button" data-toggle="dropdown" aria-expanded="false"> Go To
                         <i class="fa fa-angle-down"></i>
                     </button>
                     <ul class="dropdown-menu" role="menu">
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/ta-chart?instrumentCode=ABBANK"> TA Chart </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/advance-ta-chart?instrumentCode=ABBANK"> Advance TA Chart </a>
                         </li>
                                                  <li>
                                                      <a target="_blank" href="https://dev.stockbangladesh.com/minute-chart/12"> Minute Chart </a>
                                                  </li>

                                                  <li>
                                                      <a target="_blank" href="https://dev.stockbangladesh.com/news-chart/12"> News Chart </a>
                                                  </li>



                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/company-details/12"> Company Details </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/fundamental-details/12"> Fundamental Details </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/news/search?keyword=&amp;instrument_id=12&amp;from_date=&amp;to_date="> News</a>
                         </li>
                         <li class="divider"> </li>
                         <li>
                             <a href="javascript:;"> Separated link </a>
                         </li>
                     </ul>
                 </div>
                 </td>
                <td> 12.7 </td>
                <td> 12.9 </td>
                <td> 12.6 </td>
                <td> 12.8 </td>
                <td> 13 </td>
                <td class="font-red-haze"> -0.2 </td>
                <td class="font-red-haze"> -1.54% </td>
                <td> 192 </td>
                <td> 3.896 </td>
                <td> 305660 </td>
                <td> 17-May, 14:30 </td>
            </tr>
                    <tr>
            
                <td class="highlight"><div class="success"></div> <a href="javascript:;"><a target="_blank" href="https://dev.stockbangladesh.com/company-details/13">ACI</a></a></td>
                                                    <td> <div class="btn-group">
                     <button class="btn green btn-sm dropdown-toggle" type="button" data-toggle="dropdown" aria-expanded="false"> Go To
                         <i class="fa fa-angle-down"></i>
                     </button>
                     <ul class="dropdown-menu" role="menu">
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/ta-chart?instrumentCode=ACI"> TA Chart </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/advance-ta-chart?instrumentCode=ACI"> Advance TA Chart </a>
                         </li>
                                                  <li>
                                                      <a target="_blank" href="https://dev.stockbangladesh.com/minute-chart/13"> Minute Chart </a>
                                                  </li>

                                                  <li>
                                                      <a target="_blank" href="https://dev.stockbangladesh.com/news-chart/13"> News Chart </a>
                                                  </li>



                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/company-details/13"> Company Details </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/fundamental-details/13"> Fundamental Details </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/news/search?keyword=&amp;instrument_id=13&amp;from_date=&amp;to_date="> News</a>
                         </li>
                         <li class="divider"> </li>
                         <li>
                             <a href="javascript:;"> Separated link </a>
                         </li>
                     </ul>
                 </div>
                 </td>
                <td> 369.9 </td>
                <td> 371 </td>
                <td> 365 </td>
                <td> 367.5 </td>
                <td> 364.7 </td>
                <td class="font-green-jungle"> 2.8 </td>
                <td class="font-green-jungle"> 0.77% </td>
                <td> 1170 </td>
                <td> 49.437 </td>
                <td> 134071 </td>
                <td> 17-May, 14:30 </td>
            </tr>
                    <tr>
            
                <td class="highlight"><div class="success"></div> <a href="javascript:;"><a target="_blank" href="https://dev.stockbangladesh.com/company-details/14">ACIFORMULA</a></a></td>
                                                    <td> <div class="btn-group">
                     <button class="btn green btn-sm dropdown-toggle" type="button" data-toggle="dropdown" aria-expanded="false"> Go To
                         <i class="fa fa-angle-down"></i>
                     </button>
                     <ul class="dropdown-menu" role="menu">
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/ta-chart?instrumentCode=ACIFORMULA"> TA Chart </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/advance-ta-chart?instrumentCode=ACIFORMULA"> Advance TA Chart </a>
                         </li>
                                                  <li>
                                                      <a target="_blank" href="https://dev.stockbangladesh.com/minute-chart/14"> Minute Chart </a>
                                                  </li>

                                                  <li>
                                                      <a target="_blank" href="https://dev.stockbangladesh.com/news-chart/14"> News Chart </a>
                                                  </li>



                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/company-details/14"> Company Details </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/fundamental-details/14"> Fundamental Details </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/news/search?keyword=&amp;instrument_id=14&amp;from_date=&amp;to_date="> News</a>
                         </li>
                         <li class="divider"> </li>
                         <li>
                             <a href="javascript:;"> Separated link </a>
                         </li>
                     </ul>
                 </div>
                 </td>
                <td> 178 </td>
                <td> 181 </td>
                <td> 175 </td>
                <td> 175.9 </td>
                <td> 177.3 </td>
                <td class="font-red-haze"> -1.4 </td>
                <td class="font-red-haze"> -0.79% </td>
                <td> 244 </td>
                <td> 12.006 </td>
                <td> 66837 </td>
                <td> 17-May, 14:30 </td>
            </tr>
                    <tr>
                                        <td class="highlight"><div class="danger"></div> <a href="javascript:;"><a target="_blank" href="https://dev.stockbangladesh.com/company-details/30024">ACMELAB</a></a></td>
                                        <td> <div class="btn-group">
                     <button class="btn green btn-sm dropdown-toggle" type="button" data-toggle="dropdown" aria-expanded="false"> Go To
                         <i class="fa fa-angle-down"></i>
                     </button>
                     <ul class="dropdown-menu" role="menu">
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/ta-chart?instrumentCode=ACMELAB"> TA Chart </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/advance-ta-chart?instrumentCode=ACMELAB"> Advance TA Chart </a>
                         </li>
                                                  <li>
                                                      <a target="_blank" href="https://dev.stockbangladesh.com/minute-chart/30024"> Minute Chart </a>
                                                  </li>

                                                  <li>
                                                      <a target="_blank" href="https://dev.stockbangladesh.com/news-chart/30024"> News Chart </a>
                                                  </li>



                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/company-details/30024"> Company Details </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/fundamental-details/30024"> Fundamental Details </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/news/search?keyword=&amp;instrument_id=30024&amp;from_date=&amp;to_date="> News</a>
                         </li>
                         <li class="divider"> </li>
                         <li>
                             <a href="javascript:;"> Separated link </a>
                         </li>
                     </ul>
                 </div>
                 </td>
                <td> 98 </td>
                <td> 100 </td>
                <td> 95 </td>
                <td> 97.2 </td>
                <td> 99.7 </td>
                <td class="font-red-haze"> -2.5 </td>
                <td class="font-red-haze"> -2.51% </td>
                <td> 418 </td>
                <td> 11.029 </td>
                <td> 112431 </td>
                <td> 17-May, 14:30 </td>
            </tr>
                    <tr>
                                        <td class="highlight"><div class="danger"></div> <a href="javascript:;"><a target="_blank" href="https://dev.stockbangladesh.com/company-details/16">ACTIVEFINE</a></a></td>
                                        <td> <div class="btn-group">
                     <button class="btn green btn-sm dropdown-toggle" type="button" data-toggle="dropdown" aria-expanded="false"> Go To
                         <i class="fa fa-angle-down"></i>
                     </button>
                     <ul class="dropdown-menu" role="menu">
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/ta-chart?instrumentCode=ACTIVEFINE"> TA Chart </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/advance-ta-chart?instrumentCode=ACTIVEFINE"> Advance TA Chart </a>
                         </li>
                                                  <li>
                                                      <a target="_blank" href="https://dev.stockbangladesh.com/minute-chart/16"> Minute Chart </a>
                                                  </li>

                                                  <li>
                                                      <a target="_blank" href="https://dev.stockbangladesh.com/news-chart/16"> News Chart </a>
                                                  </li>



                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/company-details/16"> Company Details </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/fundamental-details/16"> Fundamental Details </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/news/search?keyword=&amp;instrument_id=16&amp;from_date=&amp;to_date="> News</a>
                         </li>
                         <li class="divider"> </li>
                         <li>
                             <a href="javascript:;"> Separated link </a>
                         </li>
                     </ul>
                 </div>
                 </td>
                <td> 30 </td>
                <td> 30.4 </td>
                <td> 29.6 </td>
                <td> 29.8 </td>
                <td> 30.4 </td>
                <td class="font-red-haze"> -0.6 </td>
                <td class="font-red-haze"> -1.97% </td>
                <td> 256 </td>
                <td> 5.08 </td>
                <td> 169187 </td>
                <td> 17-May, 14:30 </td>
            </tr>
                    <tr>
                                        <td class="highlight"><div class="danger"></div> <a href="javascript:;"><a target="_blank" href="https://dev.stockbangladesh.com/company-details/30193">ADVENT</a></a></td>
                                        <td> <div class="btn-group">
                     <button class="btn green btn-sm dropdown-toggle" type="button" data-toggle="dropdown" aria-expanded="false"> Go To
                         <i class="fa fa-angle-down"></i>
                     </button>
                     <ul class="dropdown-menu" role="menu">
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/ta-chart?instrumentCode=ADVENT"> TA Chart </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/advance-ta-chart?instrumentCode=ADVENT"> Advance TA Chart </a>
                         </li>
                                                  <li>
                                                      <a target="_blank" href="https://dev.stockbangladesh.com/minute-chart/30193"> Minute Chart </a>
                                                  </li>

                                                  <li>
                                                      <a target="_blank" href="https://dev.stockbangladesh.com/news-chart/30193"> News Chart </a>
                                                  </li>



                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/company-details/30193"> Company Details </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/fundamental-details/30193"> Fundamental Details </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/news/search?keyword=&amp;instrument_id=30193&amp;from_date=&amp;to_date="> News</a>
                         </li>
                         <li class="divider"> </li>
                         <li>
                             <a href="javascript:;"> Separated link </a>
                         </li>
                     </ul>
                 </div>
                 </td>
                <td> 37.8 </td>
                <td> 38.9 </td>
                <td> 37.6 </td>
                <td> 38.1 </td>
                <td> 38.1 </td>
                <td class="font-green-jungle"> 0 </td>
                <td class="font-green-jungle"> 0% </td>
                <td> 1977 </td>
                <td> 46.065 </td>
                <td> 1202429 </td>
                <td> 17-May, 14:30 </td>
            </tr>
                    <tr>
                                        <td class="highlight"><div class="danger"></div> <a href="javascript:;"><a target="_blank" href="https://dev.stockbangladesh.com/company-details/531">AFCAGRO</a></a></td>
                                        <td> <div class="btn-group">
                     <button class="btn green btn-sm dropdown-toggle" type="button" data-toggle="dropdown" aria-expanded="false"> Go To
                         <i class="fa fa-angle-down"></i>
                     </button>
                     <ul class="dropdown-menu" role="menu">
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/ta-chart?instrumentCode=AFCAGRO"> TA Chart </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/advance-ta-chart?instrumentCode=AFCAGRO"> Advance TA Chart </a>
                         </li>
                                                  <li>
                                                      <a target="_blank" href="https://dev.stockbangladesh.com/minute-chart/531"> Minute Chart </a>
                                                  </li>

                                                  <li>
                                                      <a target="_blank" href="https://dev.stockbangladesh.com/news-chart/531"> News Chart </a>
                                                  </li>



                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/company-details/531"> Company Details </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/fundamental-details/531"> Fundamental Details </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/news/search?keyword=&amp;instrument_id=531&amp;from_date=&amp;to_date="> News</a>
                         </li>
                         <li class="divider"> </li>
                         <li>
                             <a href="javascript:;"> Separated link </a>
                         </li>
                     </ul>
                 </div>
                 </td>
                <td> 36.9 </td>
                <td> 38.1 </td>
                <td> 36.7 </td>
                <td> 36.9 </td>
                <td> 37.8 </td>
                <td class="font-red-haze"> -0.9 </td>
                <td class="font-red-haze"> -2.38% </td>
                <td> 100 </td>
                <td> 2.228 </td>
                <td> 59857 </td>
                <td> 17-May, 14:30 </td>
            </tr>
                    <tr>
                                        <td class="highlight"><div class="danger"></div> <a href="javascript:;"><a target="_blank" href="https://dev.stockbangladesh.com/company-details/17">AFTABAUTO</a></a></td>
                                        <td> <div class="btn-group">
                     <button class="btn green btn-sm dropdown-toggle" type="button" data-toggle="dropdown" aria-expanded="false"> Go To
                         <i class="fa fa-angle-down"></i>
                     </button>
                     <ul class="dropdown-menu" role="menu">
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/ta-chart?instrumentCode=AFTABAUTO"> TA Chart </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/advance-ta-chart?instrumentCode=AFTABAUTO"> Advance TA Chart </a>
                         </li>
                                                  <li>
                                                      <a target="_blank" href="https://dev.stockbangladesh.com/minute-chart/17"> Minute Chart </a>
                                                  </li>

                                                  <li>
                                                      <a target="_blank" href="https://dev.stockbangladesh.com/news-chart/17"> News Chart </a>
                                                  </li>



                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/company-details/17"> Company Details </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/fundamental-details/17"> Fundamental Details </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/news/search?keyword=&amp;instrument_id=17&amp;from_date=&amp;to_date="> News</a>
                         </li>
                         <li class="divider"> </li>
                         <li>
                             <a href="javascript:;"> Separated link </a>
                         </li>
                     </ul>
                 </div>
                 </td>
                <td> 53.5 </td>
                <td> 54.3 </td>
                <td> 53.5 </td>
                <td> 53.7 </td>
                <td> 54 </td>
                <td class="font-red-haze"> -0.3 </td>
                <td class="font-red-haze"> -0.56% </td>
                <td> 163 </td>
                <td> 3.755 </td>
                <td> 69927 </td>
                <td> 17-May, 14:30 </td>
            </tr>
                    <tr>
                                        <td class="highlight"><div class="danger"></div> <a href="javascript:;"><a target="_blank" href="https://dev.stockbangladesh.com/company-details/18">AGNISYSL</a></a></td>
                                        <td> <div class="btn-group">
                     <button class="btn green btn-sm dropdown-toggle" type="button" data-toggle="dropdown" aria-expanded="false"> Go To
                         <i class="fa fa-angle-down"></i>
                     </button>
                     <ul class="dropdown-menu" role="menu">
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/ta-chart?instrumentCode=AGNISYSL"> TA Chart </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/advance-ta-chart?instrumentCode=AGNISYSL"> Advance TA Chart </a>
                         </li>
                                                  <li>
                                                      <a target="_blank" href="https://dev.stockbangladesh.com/minute-chart/18"> Minute Chart </a>
                                                  </li>

                                                  <li>
                                                      <a target="_blank" href="https://dev.stockbangladesh.com/news-chart/18"> News Chart </a>
                                                  </li>



                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/company-details/18"> Company Details </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/fundamental-details/18"> Fundamental Details </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/news/search?keyword=&amp;instrument_id=18&amp;from_date=&amp;to_date="> News</a>
                         </li>
                         <li class="divider"> </li>
                         <li>
                             <a href="javascript:;"> Separated link </a>
                         </li>
                     </ul>
                 </div>
                 </td>
                <td> 20.2 </td>
                <td> 20.9 </td>
                <td> 20.2 </td>
                <td> 20.4 </td>
                <td> 20.7 </td>
                <td class="font-red-haze"> -0.3 </td>
                <td class="font-red-haze"> -1.45% </td>
                <td> 220 </td>
                <td> 7.132 </td>
                <td> 349098 </td>
                <td> 17-May, 14:30 </td>
            </tr>
                    <tr>
                                        <td class="highlight"><div class="danger"></div> <a href="javascript:;"><a target="_blank" href="https://dev.stockbangladesh.com/company-details/19">AGRANINS</a></a></td>
                                        <td> <div class="btn-group">
                     <button class="btn green btn-sm dropdown-toggle" type="button" data-toggle="dropdown" aria-expanded="false"> Go To
                         <i class="fa fa-angle-down"></i>
                     </button>
                     <ul class="dropdown-menu" role="menu">
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/ta-chart?instrumentCode=AGRANINS"> TA Chart </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/advance-ta-chart?instrumentCode=AGRANINS"> Advance TA Chart </a>
                         </li>
                                                  <li>
                                                      <a target="_blank" href="https://dev.stockbangladesh.com/minute-chart/19"> Minute Chart </a>
                                                  </li>

                                                  <li>
                                                      <a target="_blank" href="https://dev.stockbangladesh.com/news-chart/19"> News Chart </a>
                                                  </li>



                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/company-details/19"> Company Details </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/fundamental-details/19"> Fundamental Details </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/news/search?keyword=&amp;instrument_id=19&amp;from_date=&amp;to_date="> News</a>
                         </li>
                         <li class="divider"> </li>
                         <li>
                             <a href="javascript:;"> Separated link </a>
                         </li>
                     </ul>
                 </div>
                 </td>
                <td> 17.1 </td>
                <td> 17.5 </td>
                <td> 17.1 </td>
                <td> 17.2 </td>
                <td> 17.5 </td>
                <td class="font-red-haze"> -0.3 </td>
                <td class="font-red-haze"> -1.71% </td>
                <td> 30 </td>
                <td> 0.456 </td>
                <td> 26440 </td>
                <td> 17-May, 14:30 </td>
            </tr>
                    <tr>
                                                    <td class="highlight"><div class="info"></div> <a href="javascript:;"><a target="_blank" href="https://dev.stockbangladesh.com/company-details/20">AIBL1STIMF</a></a></td>
                            <td> <div class="btn-group">
                     <button class="btn green btn-sm dropdown-toggle" type="button" data-toggle="dropdown" aria-expanded="false"> Go To
                         <i class="fa fa-angle-down"></i>
                     </button>
                     <ul class="dropdown-menu" role="menu">
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/ta-chart?instrumentCode=AIBL1STIMF"> TA Chart </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/advance-ta-chart?instrumentCode=AIBL1STIMF"> Advance TA Chart </a>
                         </li>
                                                  <li>
                                                      <a target="_blank" href="https://dev.stockbangladesh.com/minute-chart/20"> Minute Chart </a>
                                                  </li>

                                                  <li>
                                                      <a target="_blank" href="https://dev.stockbangladesh.com/news-chart/20"> News Chart </a>
                                                  </li>



                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/company-details/20"> Company Details </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/fundamental-details/20"> Fundamental Details </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/news/search?keyword=&amp;instrument_id=20&amp;from_date=&amp;to_date="> News</a>
                         </li>
                         <li class="divider"> </li>
                         <li>
                             <a href="javascript:;"> Separated link </a>
                         </li>
                     </ul>
                 </div>
                 </td>
                <td> 8.5 </td>
                <td> 8.7 </td>
                <td> 8.5 </td>
                <td> 8.5 </td>
                <td> 8.5 </td>
                <td class="font-green-jungle"> 0 </td>
                <td class="font-green-jungle"> 0% </td>
                <td> 5 </td>
                <td> 0.047 </td>
                <td> 5513 </td>
                <td> 17-May, 14:30 </td>
            </tr>
                    <tr>
                                        <td class="highlight"><div class="danger"></div> <a href="javascript:;"><a target="_blank" href="https://dev.stockbangladesh.com/company-details/30156">AIL</a></a></td>
                                        <td> <div class="btn-group">
                     <button class="btn green btn-sm dropdown-toggle" type="button" data-toggle="dropdown" aria-expanded="false"> Go To
                         <i class="fa fa-angle-down"></i>
                     </button>
                     <ul class="dropdown-menu" role="menu">
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/ta-chart?instrumentCode=AIL"> TA Chart </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/advance-ta-chart?instrumentCode=AIL"> Advance TA Chart </a>
                         </li>
                                                  <li>
                                                      <a target="_blank" href="https://dev.stockbangladesh.com/minute-chart/30156"> Minute Chart </a>
                                                  </li>

                                                  <li>
                                                      <a target="_blank" href="https://dev.stockbangladesh.com/news-chart/30156"> News Chart </a>
                                                  </li>



                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/company-details/30156"> Company Details </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/fundamental-details/30156"> Fundamental Details </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/news/search?keyword=&amp;instrument_id=30156&amp;from_date=&amp;to_date="> News</a>
                         </li>
                         <li class="divider"> </li>
                         <li>
                             <a href="javascript:;"> Separated link </a>
                         </li>
                     </ul>
                 </div>
                 </td>
                <td> 94.8 </td>
                <td> 99.1 </td>
                <td> 92.1 </td>
                <td> 93.4 </td>
                <td> 96.4 </td>
                <td class="font-red-haze"> -3 </td>
                <td class="font-red-haze"> -3.11% </td>
                <td> 562 </td>
                <td> 12.754 </td>
                <td> 134635 </td>
                <td> 17-May, 14:30 </td>
            </tr>
                    <tr>
                                        <td class="highlight"><div class="danger"></div> <a href="javascript:;"><a target="_blank" href="https://dev.stockbangladesh.com/company-details/23">AL-HAJTEX</a></a></td>
                                        <td> <div class="btn-group">
                     <button class="btn green btn-sm dropdown-toggle" type="button" data-toggle="dropdown" aria-expanded="false"> Go To
                         <i class="fa fa-angle-down"></i>
                     </button>
                     <ul class="dropdown-menu" role="menu">
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/ta-chart?instrumentCode=AL-HAJTEX"> TA Chart </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/advance-ta-chart?instrumentCode=AL-HAJTEX"> Advance TA Chart </a>
                         </li>
                                                  <li>
                                                      <a target="_blank" href="https://dev.stockbangladesh.com/minute-chart/23"> Minute Chart </a>
                                                  </li>

                                                  <li>
                                                      <a target="_blank" href="https://dev.stockbangladesh.com/news-chart/23"> News Chart </a>
                                                  </li>



                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/company-details/23"> Company Details </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/fundamental-details/23"> Fundamental Details </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/news/search?keyword=&amp;instrument_id=23&amp;from_date=&amp;to_date="> News</a>
                         </li>
                         <li class="divider"> </li>
                         <li>
                             <a href="javascript:;"> Separated link </a>
                         </li>
                     </ul>
                 </div>
                 </td>
                <td> 74.2 </td>
                <td> 77 </td>
                <td> 74 </td>
                <td> 74.3 </td>
                <td> 76.2 </td>
                <td class="font-red-haze"> -1.9 </td>
                <td class="font-red-haze"> -2.49% </td>
                <td> 233 </td>
                <td> 3.306 </td>
                <td> 44060 </td>
                <td> 17-May, 14:30 </td>
            </tr>
                    <tr>
            
                <td class="highlight"><div class="success"></div> <a href="javascript:;"><a target="_blank" href="https://dev.stockbangladesh.com/company-details/22">ALARABANK</a></a></td>
                                                    <td> <div class="btn-group">
                     <button class="btn green btn-sm dropdown-toggle" type="button" data-toggle="dropdown" aria-expanded="false"> Go To
                         <i class="fa fa-angle-down"></i>
                     </button>
                     <ul class="dropdown-menu" role="menu">
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/ta-chart?instrumentCode=ALARABANK"> TA Chart </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/advance-ta-chart?instrumentCode=ALARABANK"> Advance TA Chart </a>
                         </li>
                                                  <li>
                                                      <a target="_blank" href="https://dev.stockbangladesh.com/minute-chart/22"> Minute Chart </a>
                                                  </li>

                                                  <li>
                                                      <a target="_blank" href="https://dev.stockbangladesh.com/news-chart/22"> News Chart </a>
                                                  </li>



                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/company-details/22"> Company Details </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/fundamental-details/22"> Fundamental Details </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/news/search?keyword=&amp;instrument_id=22&amp;from_date=&amp;to_date="> News</a>
                         </li>
                         <li class="divider"> </li>
                         <li>
                             <a href="javascript:;"> Separated link </a>
                         </li>
                     </ul>
                 </div>
                 </td>
                <td> 21.7 </td>
                <td> 21.7 </td>
                <td> 21.1 </td>
                <td> 21.5 </td>
                <td> 21.4 </td>
                <td class="font-green-jungle"> 0.1 </td>
                <td class="font-green-jungle"> 0.47% </td>
                <td> 176 </td>
                <td> 9.303 </td>
                <td> 434821 </td>
                <td> 17-May, 14:30 </td>
            </tr>
                    <tr>
                                        <td class="highlight"><div class="danger"></div> <a href="javascript:;"><a target="_blank" href="https://dev.stockbangladesh.com/company-details/59">ALIF</a></a></td>
                                        <td> <div class="btn-group">
                     <button class="btn green btn-sm dropdown-toggle" type="button" data-toggle="dropdown" aria-expanded="false"> Go To
                         <i class="fa fa-angle-down"></i>
                     </button>
                     <ul class="dropdown-menu" role="menu">
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/ta-chart?instrumentCode=ALIF"> TA Chart </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/advance-ta-chart?instrumentCode=ALIF"> Advance TA Chart </a>
                         </li>
                                                  <li>
                                                      <a target="_blank" href="https://dev.stockbangladesh.com/minute-chart/59"> Minute Chart </a>
                                                  </li>

                                                  <li>
                                                      <a target="_blank" href="https://dev.stockbangladesh.com/news-chart/59"> News Chart </a>
                                                  </li>



                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/company-details/59"> Company Details </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/fundamental-details/59"> Fundamental Details </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/news/search?keyword=&amp;instrument_id=59&amp;from_date=&amp;to_date="> News</a>
                         </li>
                         <li class="divider"> </li>
                         <li>
                             <a href="javascript:;"> Separated link </a>
                         </li>
                     </ul>
                 </div>
                 </td>
                <td> 11.9 </td>
                <td> 12.2 </td>
                <td> 11.8 </td>
                <td> 11.9 </td>
                <td> 12.1 </td>
                <td class="font-red-haze"> -0.2 </td>
                <td class="font-red-haze"> -1.65% </td>
                <td> 561 </td>
                <td> 22.392 </td>
                <td> 1875114 </td>
                <td> 17-May, 14:30 </td>
            </tr>
                    <tr>
            
                <td class="highlight"><div class="success"></div> <a href="javascript:;"><a target="_blank" href="https://dev.stockbangladesh.com/company-details/24">ALLTEX</a></a></td>
                                                    <td> <div class="btn-group">
                     <button class="btn green btn-sm dropdown-toggle" type="button" data-toggle="dropdown" aria-expanded="false"> Go To
                         <i class="fa fa-angle-down"></i>
                     </button>
                     <ul class="dropdown-menu" role="menu">
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/ta-chart?instrumentCode=ALLTEX"> TA Chart </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/advance-ta-chart?instrumentCode=ALLTEX"> Advance TA Chart </a>
                         </li>
                                                  <li>
                                                      <a target="_blank" href="https://dev.stockbangladesh.com/minute-chart/24"> Minute Chart </a>
                                                  </li>

                                                  <li>
                                                      <a target="_blank" href="https://dev.stockbangladesh.com/news-chart/24"> News Chart </a>
                                                  </li>



                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/company-details/24"> Company Details </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/fundamental-details/24"> Fundamental Details </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/news/search?keyword=&amp;instrument_id=24&amp;from_date=&amp;to_date="> News</a>
                         </li>
                         <li class="divider"> </li>
                         <li>
                             <a href="javascript:;"> Separated link </a>
                         </li>
                     </ul>
                 </div>
                 </td>
                <td> 10.2 </td>
                <td> 10.3 </td>
                <td> 10 </td>
                <td> 10.1 </td>
                <td> 10.1 </td>
                <td class="font-green-jungle"> 0 </td>
                <td class="font-green-jungle"> 0% </td>
                <td> 25 </td>
                <td> 0.227 </td>
                <td> 22508 </td>
                <td> 17-May, 14:30 </td>
            </tr>
                    <tr>
                                        <td class="highlight"><div class="danger"></div> <a href="javascript:;"><a target="_blank" href="https://dev.stockbangladesh.com/company-details/30014">AMANFEED</a></a></td>
                                        <td> <div class="btn-group">
                     <button class="btn green btn-sm dropdown-toggle" type="button" data-toggle="dropdown" aria-expanded="false"> Go To
                         <i class="fa fa-angle-down"></i>
                     </button>
                     <ul class="dropdown-menu" role="menu">
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/ta-chart?instrumentCode=AMANFEED"> TA Chart </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/advance-ta-chart?instrumentCode=AMANFEED"> Advance TA Chart </a>
                         </li>
                                                  <li>
                                                      <a target="_blank" href="https://dev.stockbangladesh.com/minute-chart/30014"> Minute Chart </a>
                                                  </li>

                                                  <li>
                                                      <a target="_blank" href="https://dev.stockbangladesh.com/news-chart/30014"> News Chart </a>
                                                  </li>



                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/company-details/30014"> Company Details </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/fundamental-details/30014"> Fundamental Details </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/news/search?keyword=&amp;instrument_id=30014&amp;from_date=&amp;to_date="> News</a>
                         </li>
                         <li class="divider"> </li>
                         <li>
                             <a href="javascript:;"> Separated link </a>
                         </li>
                     </ul>
                 </div>
                 </td>
                <td> 54.8 </td>
                <td> 55.8 </td>
                <td> 54.4 </td>
                <td> 54.5 </td>
                <td> 55.3 </td>
                <td class="font-red-haze"> -0.8 </td>
                <td class="font-red-haze"> -1.45% </td>
                <td> 196 </td>
                <td> 5.744 </td>
                <td> 105142 </td>
                <td> 17-May, 14:30 </td>
            </tr>
                    <tr>
                                        <td class="highlight"><div class="danger"></div> <a href="javascript:;"><a target="_blank" href="https://dev.stockbangladesh.com/company-details/25">AMBEEPHA</a></a></td>
                                        <td> <div class="btn-group">
                     <button class="btn green btn-sm dropdown-toggle" type="button" data-toggle="dropdown" aria-expanded="false"> Go To
                         <i class="fa fa-angle-down"></i>
                     </button>
                     <ul class="dropdown-menu" role="menu">
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/ta-chart?instrumentCode=AMBEEPHA"> TA Chart </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/advance-ta-chart?instrumentCode=AMBEEPHA"> Advance TA Chart </a>
                         </li>
                                                  <li>
                                                      <a target="_blank" href="https://dev.stockbangladesh.com/minute-chart/25"> Minute Chart </a>
                                                  </li>

                                                  <li>
                                                      <a target="_blank" href="https://dev.stockbangladesh.com/news-chart/25"> News Chart </a>
                                                  </li>



                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/company-details/25"> Company Details </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/fundamental-details/25"> Fundamental Details </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/news/search?keyword=&amp;instrument_id=25&amp;from_date=&amp;to_date="> News</a>
                         </li>
                         <li class="divider"> </li>
                         <li>
                             <a href="javascript:;"> Separated link </a>
                         </li>
                     </ul>
                 </div>
                 </td>
                <td> 441.5 </td>
                <td> 456 </td>
                <td> 441 </td>
                <td> 444.8 </td>
                <td> 453.1 </td>
                <td class="font-red-haze"> -8.3 </td>
                <td class="font-red-haze"> -1.83% </td>
                <td> 284 </td>
                <td> 6.776 </td>
                <td> 15143 </td>
                <td> 17-May, 14:30 </td>
            </tr>
                    <tr>
            
                <td class="highlight"><div class="success"></div> <a href="javascript:;"><a target="_blank" href="https://dev.stockbangladesh.com/company-details/26">AMCL(PRAN)</a></a></td>
                                                    <td> <div class="btn-group">
                     <button class="btn green btn-sm dropdown-toggle" type="button" data-toggle="dropdown" aria-expanded="false"> Go To
                         <i class="fa fa-angle-down"></i>
                     </button>
                     <ul class="dropdown-menu" role="menu">
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/ta-chart?instrumentCode=AMCL(PRAN)"> TA Chart </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/advance-ta-chart?instrumentCode=AMCL(PRAN)"> Advance TA Chart </a>
                         </li>
                                                  <li>
                                                      <a target="_blank" href="https://dev.stockbangladesh.com/minute-chart/26"> Minute Chart </a>
                                                  </li>

                                                  <li>
                                                      <a target="_blank" href="https://dev.stockbangladesh.com/news-chart/26"> News Chart </a>
                                                  </li>



                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/company-details/26"> Company Details </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/fundamental-details/26"> Fundamental Details </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/news/search?keyword=&amp;instrument_id=26&amp;from_date=&amp;to_date="> News</a>
                         </li>
                         <li class="divider"> </li>
                         <li>
                             <a href="javascript:;"> Separated link </a>
                         </li>
                     </ul>
                 </div>
                 </td>
                <td> 216.9 </td>
                <td> 217.6 </td>
                <td> 215.1 </td>
                <td> 215.5 </td>
                <td> 215.8 </td>
                <td class="font-red-haze"> -0.3 </td>
                <td class="font-red-haze"> -0.14% </td>
                <td> 65 </td>
                <td> 1.278 </td>
                <td> 5925 </td>
                <td> 17-May, 14:30 </td>
            </tr>
                    <tr>
                                        <td class="highlight"><div class="danger"></div> <a href="javascript:;"><a target="_blank" href="https://dev.stockbangladesh.com/company-details/27">ANLIMAYARN</a></a></td>
                                        <td> <div class="btn-group">
                     <button class="btn green btn-sm dropdown-toggle" type="button" data-toggle="dropdown" aria-expanded="false"> Go To
                         <i class="fa fa-angle-down"></i>
                     </button>
                     <ul class="dropdown-menu" role="menu">
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/ta-chart?instrumentCode=ANLIMAYARN"> TA Chart </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/advance-ta-chart?instrumentCode=ANLIMAYARN"> Advance TA Chart </a>
                         </li>
                                                  <li>
                                                      <a target="_blank" href="https://dev.stockbangladesh.com/minute-chart/27"> Minute Chart </a>
                                                  </li>

                                                  <li>
                                                      <a target="_blank" href="https://dev.stockbangladesh.com/news-chart/27"> News Chart </a>
                                                  </li>



                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/company-details/27"> Company Details </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/fundamental-details/27"> Fundamental Details </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/news/search?keyword=&amp;instrument_id=27&amp;from_date=&amp;to_date="> News</a>
                         </li>
                         <li class="divider"> </li>
                         <li>
                             <a href="javascript:;"> Separated link </a>
                         </li>
                     </ul>
                 </div>
                 </td>
                <td> 29.3 </td>
                <td> 30.1 </td>
                <td> 29.3 </td>
                <td> 29.5 </td>
                <td> 29.9 </td>
                <td class="font-red-haze"> -0.4 </td>
                <td class="font-red-haze"> -1.34% </td>
                <td> 191 </td>
                <td> 3.118 </td>
                <td> 105050 </td>
                <td> 17-May, 14:30 </td>
            </tr>
                    <tr>
            
                <td class="highlight"><div class="success"></div> <a href="javascript:;"><a target="_blank" href="https://dev.stockbangladesh.com/company-details/28">ANWARGALV</a></a></td>
                                                    <td> <div class="btn-group">
                     <button class="btn green btn-sm dropdown-toggle" type="button" data-toggle="dropdown" aria-expanded="false"> Go To
                         <i class="fa fa-angle-down"></i>
                     </button>
                     <ul class="dropdown-menu" role="menu">
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/ta-chart?instrumentCode=ANWARGALV"> TA Chart </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/advance-ta-chart?instrumentCode=ANWARGALV"> Advance TA Chart </a>
                         </li>
                                                  <li>
                                                      <a target="_blank" href="https://dev.stockbangladesh.com/minute-chart/28"> Minute Chart </a>
                                                  </li>

                                                  <li>
                                                      <a target="_blank" href="https://dev.stockbangladesh.com/news-chart/28"> News Chart </a>
                                                  </li>



                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/company-details/28"> Company Details </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/fundamental-details/28"> Fundamental Details </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/news/search?keyword=&amp;instrument_id=28&amp;from_date=&amp;to_date="> News</a>
                         </li>
                         <li class="divider"> </li>
                         <li>
                             <a href="javascript:;"> Separated link </a>
                         </li>
                     </ul>
                 </div>
                 </td>
                <td> 71.9 </td>
                <td> 71.9 </td>
                <td> 70.4 </td>
                <td> 71 </td>
                <td> 71.5 </td>
                <td class="font-red-haze"> -0.5 </td>
                <td class="font-red-haze"> -0.7% </td>
                <td> 222 </td>
                <td> 5.066 </td>
                <td> 71455 </td>
                <td> 17-May, 14:30 </td>
            </tr>
                    <tr>
                                        <td class="highlight"><div class="danger"></div> <a href="javascript:;"><a target="_blank" href="https://dev.stockbangladesh.com/company-details/30">APEXFOODS</a></a></td>
                                        <td> <div class="btn-group">
                     <button class="btn green btn-sm dropdown-toggle" type="button" data-toggle="dropdown" aria-expanded="false"> Go To
                         <i class="fa fa-angle-down"></i>
                     </button>
                     <ul class="dropdown-menu" role="menu">
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/ta-chart?instrumentCode=APEXFOODS"> TA Chart </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/advance-ta-chart?instrumentCode=APEXFOODS"> Advance TA Chart </a>
                         </li>
                                                  <li>
                                                      <a target="_blank" href="https://dev.stockbangladesh.com/minute-chart/30"> Minute Chart </a>
                                                  </li>

                                                  <li>
                                                      <a target="_blank" href="https://dev.stockbangladesh.com/news-chart/30"> News Chart </a>
                                                  </li>



                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/company-details/30"> Company Details </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/fundamental-details/30"> Fundamental Details </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/news/search?keyword=&amp;instrument_id=30&amp;from_date=&amp;to_date="> News</a>
                         </li>
                         <li class="divider"> </li>
                         <li>
                             <a href="javascript:;"> Separated link </a>
                         </li>
                     </ul>
                 </div>
                 </td>
                <td> 246.7 </td>
                <td> 253.5 </td>
                <td> 246.6 </td>
                <td> 249.4 </td>
                <td> 249.1 </td>
                <td class="font-green-jungle"> 0.3 </td>
                <td class="font-green-jungle"> 0.12% </td>
                <td> 324 </td>
                <td> 10.872 </td>
                <td> 43637 </td>
                <td> 17-May, 14:30 </td>
            </tr>
                    <tr>
                                        <td class="highlight"><div class="danger"></div> <a href="javascript:;"><a target="_blank" href="https://dev.stockbangladesh.com/company-details/29">APEXFOOT</a></a></td>
                                        <td> <div class="btn-group">
                     <button class="btn green btn-sm dropdown-toggle" type="button" data-toggle="dropdown" aria-expanded="false"> Go To
                         <i class="fa fa-angle-down"></i>
                     </button>
                     <ul class="dropdown-menu" role="menu">
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/ta-chart?instrumentCode=APEXFOOT"> TA Chart </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/advance-ta-chart?instrumentCode=APEXFOOT"> Advance TA Chart </a>
                         </li>
                                                  <li>
                                                      <a target="_blank" href="https://dev.stockbangladesh.com/minute-chart/29"> Minute Chart </a>
                                                  </li>

                                                  <li>
                                                      <a target="_blank" href="https://dev.stockbangladesh.com/news-chart/29"> News Chart </a>
                                                  </li>



                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/company-details/29"> Company Details </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/fundamental-details/29"> Fundamental Details </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/news/search?keyword=&amp;instrument_id=29&amp;from_date=&amp;to_date="> News</a>
                         </li>
                         <li class="divider"> </li>
                         <li>
                             <a href="javascript:;"> Separated link </a>
                         </li>
                     </ul>
                 </div>
                 </td>
                <td> 305.5 </td>
                <td> 308 </td>
                <td> 305 </td>
                <td> 305.6 </td>
                <td> 308.2 </td>
                <td class="font-red-haze"> -2.6 </td>
                <td class="font-red-haze"> -0.84% </td>
                <td> 114 </td>
                <td> 4.723 </td>
                <td> 15400 </td>
                <td> 17-May, 14:30 </td>
            </tr>
                    <tr>
            
                <td class="highlight"><div class="success"></div> <a href="javascript:;"><a target="_blank" href="https://dev.stockbangladesh.com/company-details/31">APEXSPINN</a></a></td>
                                                    <td> <div class="btn-group">
                     <button class="btn green btn-sm dropdown-toggle" type="button" data-toggle="dropdown" aria-expanded="false"> Go To
                         <i class="fa fa-angle-down"></i>
                     </button>
                     <ul class="dropdown-menu" role="menu">
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/ta-chart?instrumentCode=APEXSPINN"> TA Chart </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/advance-ta-chart?instrumentCode=APEXSPINN"> Advance TA Chart </a>
                         </li>
                                                  <li>
                                                      <a target="_blank" href="https://dev.stockbangladesh.com/minute-chart/31"> Minute Chart </a>
                                                  </li>

                                                  <li>
                                                      <a target="_blank" href="https://dev.stockbangladesh.com/news-chart/31"> News Chart </a>
                                                  </li>



                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/company-details/31"> Company Details </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/fundamental-details/31"> Fundamental Details </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/news/search?keyword=&amp;instrument_id=31&amp;from_date=&amp;to_date="> News</a>
                         </li>
                         <li class="divider"> </li>
                         <li>
                             <a href="javascript:;"> Separated link </a>
                         </li>
                     </ul>
                 </div>
                 </td>
                <td> 120.9 </td>
                <td> 120.9 </td>
                <td> 118.1 </td>
                <td> 118.5 </td>
                <td> 120.5 </td>
                <td class="font-red-haze"> -2 </td>
                <td class="font-red-haze"> -1.66% </td>
                <td> 174 </td>
                <td> 5.315 </td>
                <td> 44597 </td>
                <td> 17-May, 14:30 </td>
            </tr>
                    <tr>
                                        <td class="highlight"><div class="danger"></div> <a href="javascript:;"><a target="_blank" href="https://dev.stockbangladesh.com/company-details/40">APEXTANRY</a></a></td>
                                        <td> <div class="btn-group">
                     <button class="btn green btn-sm dropdown-toggle" type="button" data-toggle="dropdown" aria-expanded="false"> Go To
                         <i class="fa fa-angle-down"></i>
                     </button>
                     <ul class="dropdown-menu" role="menu">
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/ta-chart?instrumentCode=APEXTANRY"> TA Chart </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/advance-ta-chart?instrumentCode=APEXTANRY"> Advance TA Chart </a>
                         </li>
                                                  <li>
                                                      <a target="_blank" href="https://dev.stockbangladesh.com/minute-chart/40"> Minute Chart </a>
                                                  </li>

                                                  <li>
                                                      <a target="_blank" href="https://dev.stockbangladesh.com/news-chart/40"> News Chart </a>
                                                  </li>



                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/company-details/40"> Company Details </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/fundamental-details/40"> Fundamental Details </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/news/search?keyword=&amp;instrument_id=40&amp;from_date=&amp;to_date="> News</a>
                         </li>
                         <li class="divider"> </li>
                         <li>
                             <a href="javascript:;"> Separated link </a>
                         </li>
                     </ul>
                 </div>
                 </td>
                <td> 138.1 </td>
                <td> 140 </td>
                <td> 138.1 </td>
                <td> 138.6 </td>
                <td> 138.5 </td>
                <td class="font-green-jungle"> 0.1 </td>
                <td class="font-green-jungle"> 0.07% </td>
                <td> 97 </td>
                <td> 3.24 </td>
                <td> 23267 </td>
                <td> 17-May, 14:30 </td>
            </tr>
                    <tr>
                                        <td class="highlight"><div class="danger"></div> <a href="javascript:;"><a target="_blank" href="https://dev.stockbangladesh.com/company-details/529">APOLOISPAT</a></a></td>
                                        <td> <div class="btn-group">
                     <button class="btn green btn-sm dropdown-toggle" type="button" data-toggle="dropdown" aria-expanded="false"> Go To
                         <i class="fa fa-angle-down"></i>
                     </button>
                     <ul class="dropdown-menu" role="menu">
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/ta-chart?instrumentCode=APOLOISPAT"> TA Chart </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/advance-ta-chart?instrumentCode=APOLOISPAT"> Advance TA Chart </a>
                         </li>
                                                  <li>
                                                      <a target="_blank" href="https://dev.stockbangladesh.com/minute-chart/529"> Minute Chart </a>
                                                  </li>

                                                  <li>
                                                      <a target="_blank" href="https://dev.stockbangladesh.com/news-chart/529"> News Chart </a>
                                                  </li>



                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/company-details/529"> Company Details </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/fundamental-details/529"> Fundamental Details </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/news/search?keyword=&amp;instrument_id=529&amp;from_date=&amp;to_date="> News</a>
                         </li>
                         <li class="divider"> </li>
                         <li>
                             <a href="javascript:;"> Separated link </a>
                         </li>
                     </ul>
                 </div>
                 </td>
                <td> 13.5 </td>
                <td> 13.7 </td>
                <td> 13.4 </td>
                <td> 13.5 </td>
                <td> 13.6 </td>
                <td class="font-red-haze"> -0.1 </td>
                <td class="font-red-haze"> -0.74% </td>
                <td> 399 </td>
                <td> 11.847 </td>
                <td> 878201 </td>
                <td> 17-May, 14:30 </td>
            </tr>
                    <tr>
                                        <td class="highlight"><div class="danger"></div> <a href="javascript:;"><a target="_blank" href="https://dev.stockbangladesh.com/company-details/41">ARAMIT</a></a></td>
                                        <td> <div class="btn-group">
                     <button class="btn green btn-sm dropdown-toggle" type="button" data-toggle="dropdown" aria-expanded="false"> Go To
                         <i class="fa fa-angle-down"></i>
                     </button>
                     <ul class="dropdown-menu" role="menu">
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/ta-chart?instrumentCode=ARAMIT"> TA Chart </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/advance-ta-chart?instrumentCode=ARAMIT"> Advance TA Chart </a>
                         </li>
                                                  <li>
                                                      <a target="_blank" href="https://dev.stockbangladesh.com/minute-chart/41"> Minute Chart </a>
                                                  </li>

                                                  <li>
                                                      <a target="_blank" href="https://dev.stockbangladesh.com/news-chart/41"> News Chart </a>
                                                  </li>



                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/company-details/41"> Company Details </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/fundamental-details/41"> Fundamental Details </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/news/search?keyword=&amp;instrument_id=41&amp;from_date=&amp;to_date="> News</a>
                         </li>
                         <li class="divider"> </li>
                         <li>
                             <a href="javascript:;"> Separated link </a>
                         </li>
                     </ul>
                 </div>
                 </td>
                <td> 336.5 </td>
                <td> 339.1 </td>
                <td> 336.5 </td>
                <td> 336.5 </td>
                <td> 340.9 </td>
                <td class="font-red-haze"> -4.4 </td>
                <td class="font-red-haze"> -1.29% </td>
                <td> 71 </td>
                <td> 1.13 </td>
                <td> 3345 </td>
                <td> 17-May, 14:30 </td>
            </tr>
                    <tr>
            
                <td class="highlight"><div class="success"></div> <a href="javascript:;"><a target="_blank" href="https://dev.stockbangladesh.com/company-details/42">ARAMITCEM</a></a></td>
                                                    <td> <div class="btn-group">
                     <button class="btn green btn-sm dropdown-toggle" type="button" data-toggle="dropdown" aria-expanded="false"> Go To
                         <i class="fa fa-angle-down"></i>
                     </button>
                     <ul class="dropdown-menu" role="menu">
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/ta-chart?instrumentCode=ARAMITCEM"> TA Chart </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/advance-ta-chart?instrumentCode=ARAMITCEM"> Advance TA Chart </a>
                         </li>
                                                  <li>
                                                      <a target="_blank" href="https://dev.stockbangladesh.com/minute-chart/42"> Minute Chart </a>
                                                  </li>

                                                  <li>
                                                      <a target="_blank" href="https://dev.stockbangladesh.com/news-chart/42"> News Chart </a>
                                                  </li>



                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/company-details/42"> Company Details </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/fundamental-details/42"> Fundamental Details </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/news/search?keyword=&amp;instrument_id=42&amp;from_date=&amp;to_date="> News</a>
                         </li>
                         <li class="divider"> </li>
                         <li>
                             <a href="javascript:;"> Separated link </a>
                         </li>
                     </ul>
                 </div>
                 </td>
                <td> 24.4 </td>
                <td> 24.8 </td>
                <td> 24 </td>
                <td> 24.3 </td>
                <td> 24 </td>
                <td class="font-green-jungle"> 0.3 </td>
                <td class="font-green-jungle"> 1.25% </td>
                <td> 84 </td>
                <td> 0.799 </td>
                <td> 32800 </td>
                <td> 17-May, 14:30 </td>
            </tr>
                    <tr>
                                                    <td class="highlight"><div class="info"></div> <a href="javascript:;"><a target="_blank" href="https://dev.stockbangladesh.com/company-details/517">ARGONDENIM</a></a></td>
                            <td> <div class="btn-group">
                     <button class="btn green btn-sm dropdown-toggle" type="button" data-toggle="dropdown" aria-expanded="false"> Go To
                         <i class="fa fa-angle-down"></i>
                     </button>
                     <ul class="dropdown-menu" role="menu">
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/ta-chart?instrumentCode=ARGONDENIM"> TA Chart </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/advance-ta-chart?instrumentCode=ARGONDENIM"> Advance TA Chart </a>
                         </li>
                                                  <li>
                                                      <a target="_blank" href="https://dev.stockbangladesh.com/minute-chart/517"> Minute Chart </a>
                                                  </li>

                                                  <li>
                                                      <a target="_blank" href="https://dev.stockbangladesh.com/news-chart/517"> News Chart </a>
                                                  </li>



                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/company-details/517"> Company Details </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/fundamental-details/517"> Fundamental Details </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/news/search?keyword=&amp;instrument_id=517&amp;from_date=&amp;to_date="> News</a>
                         </li>
                         <li class="divider"> </li>
                         <li>
                             <a href="javascript:;"> Separated link </a>
                         </li>
                     </ul>
                 </div>
                 </td>
                <td> 26.4 </td>
                <td> 26.6 </td>
                <td> 26 </td>
                <td> 26.2 </td>
                <td> 26.4 </td>
                <td class="font-red-haze"> -0.2 </td>
                <td class="font-red-haze"> -0.76% </td>
                <td> 167 </td>
                <td> 4.013 </td>
                <td> 153384 </td>
                <td> 17-May, 14:30 </td>
            </tr>
                    <tr>
                                        <td class="highlight"><div class="danger"></div> <a href="javascript:;"><a target="_blank" href="https://dev.stockbangladesh.com/company-details/43">ASIAINS</a></a></td>
                                        <td> <div class="btn-group">
                     <button class="btn green btn-sm dropdown-toggle" type="button" data-toggle="dropdown" aria-expanded="false"> Go To
                         <i class="fa fa-angle-down"></i>
                     </button>
                     <ul class="dropdown-menu" role="menu">
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/ta-chart?instrumentCode=ASIAINS"> TA Chart </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/advance-ta-chart?instrumentCode=ASIAINS"> Advance TA Chart </a>
                         </li>
                                                  <li>
                                                      <a target="_blank" href="https://dev.stockbangladesh.com/minute-chart/43"> Minute Chart </a>
                                                  </li>

                                                  <li>
                                                      <a target="_blank" href="https://dev.stockbangladesh.com/news-chart/43"> News Chart </a>
                                                  </li>



                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/company-details/43"> Company Details </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/fundamental-details/43"> Fundamental Details </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/news/search?keyword=&amp;instrument_id=43&amp;from_date=&amp;to_date="> News</a>
                         </li>
                         <li class="divider"> </li>
                         <li>
                             <a href="javascript:;"> Separated link </a>
                         </li>
                     </ul>
                 </div>
                 </td>
                <td> 0 </td>
                <td> 19.2 </td>
                <td> 18.7 </td>
                <td> 19 </td>
                <td> 18.8 </td>
                <td class="font-green-jungle"> 0.2 </td>
                <td class="font-green-jungle"> 1.06% </td>
                <td> 20 </td>
                <td> 0.082 </td>
                <td> 4340 </td>
                <td> 16-May, 14:30 </td>
            </tr>
                    <tr>
            
                <td class="highlight"><div class="success"></div> <a href="javascript:;"><a target="_blank" href="https://dev.stockbangladesh.com/company-details/44">ASIAPACINS</a></a></td>
                                                    <td> <div class="btn-group">
                     <button class="btn green btn-sm dropdown-toggle" type="button" data-toggle="dropdown" aria-expanded="false"> Go To
                         <i class="fa fa-angle-down"></i>
                     </button>
                     <ul class="dropdown-menu" role="menu">
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/ta-chart?instrumentCode=ASIAPACINS"> TA Chart </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/advance-ta-chart?instrumentCode=ASIAPACINS"> Advance TA Chart </a>
                         </li>
                                                  <li>
                                                      <a target="_blank" href="https://dev.stockbangladesh.com/minute-chart/44"> Minute Chart </a>
                                                  </li>

                                                  <li>
                                                      <a target="_blank" href="https://dev.stockbangladesh.com/news-chart/44"> News Chart </a>
                                                  </li>



                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/company-details/44"> Company Details </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/fundamental-details/44"> Fundamental Details </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/news/search?keyword=&amp;instrument_id=44&amp;from_date=&amp;to_date="> News</a>
                         </li>
                         <li class="divider"> </li>
                         <li>
                             <a href="javascript:;"> Separated link </a>
                         </li>
                     </ul>
                 </div>
                 </td>
                <td> 24.8 </td>
                <td> 24.8 </td>
                <td> 24 </td>
                <td> 24.3 </td>
                <td> 24 </td>
                <td class="font-green-jungle"> 0.3 </td>
                <td class="font-green-jungle"> 1.25% </td>
                <td> 4 </td>
                <td> 0.017 </td>
                <td> 706 </td>
                <td> 17-May, 14:30 </td>
            </tr>
                    <tr>
                                        <td class="highlight"><div class="danger"></div> <a href="javascript:;"><a target="_blank" href="https://dev.stockbangladesh.com/company-details/30009">ATCSLGF</a></a></td>
                                        <td> <div class="btn-group">
                     <button class="btn green btn-sm dropdown-toggle" type="button" data-toggle="dropdown" aria-expanded="false"> Go To
                         <i class="fa fa-angle-down"></i>
                     </button>
                     <ul class="dropdown-menu" role="menu">
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/ta-chart?instrumentCode=ATCSLGF"> TA Chart </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/advance-ta-chart?instrumentCode=ATCSLGF"> Advance TA Chart </a>
                         </li>
                                                  <li>
                                                      <a target="_blank" href="https://dev.stockbangladesh.com/minute-chart/30009"> Minute Chart </a>
                                                  </li>

                                                  <li>
                                                      <a target="_blank" href="https://dev.stockbangladesh.com/news-chart/30009"> News Chart </a>
                                                  </li>



                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/company-details/30009"> Company Details </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/fundamental-details/30009"> Fundamental Details </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/news/search?keyword=&amp;instrument_id=30009&amp;from_date=&amp;to_date="> News</a>
                         </li>
                         <li class="divider"> </li>
                         <li>
                             <a href="javascript:;"> Separated link </a>
                         </li>
                     </ul>
                 </div>
                 </td>
                <td> 10.8 </td>
                <td> 10.9 </td>
                <td> 10.7 </td>
                <td> 10.8 </td>
                <td> 10.9 </td>
                <td class="font-red-haze"> -0.1 </td>
                <td class="font-red-haze"> -0.92% </td>
                <td> 39 </td>
                <td> 0.504 </td>
                <td> 46751 </td>
                <td> 17-May, 14:30 </td>
            </tr>
                    <tr>
                                        <td class="highlight"><div class="danger"></div> <a href="javascript:;"><a target="_blank" href="https://dev.stockbangladesh.com/company-details/45">ATLASBANG</a></a></td>
                                        <td> <div class="btn-group">
                     <button class="btn green btn-sm dropdown-toggle" type="button" data-toggle="dropdown" aria-expanded="false"> Go To
                         <i class="fa fa-angle-down"></i>
                     </button>
                     <ul class="dropdown-menu" role="menu">
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/ta-chart?instrumentCode=ATLASBANG"> TA Chart </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/advance-ta-chart?instrumentCode=ATLASBANG"> Advance TA Chart </a>
                         </li>
                                                  <li>
                                                      <a target="_blank" href="https://dev.stockbangladesh.com/minute-chart/45"> Minute Chart </a>
                                                  </li>

                                                  <li>
                                                      <a target="_blank" href="https://dev.stockbangladesh.com/news-chart/45"> News Chart </a>
                                                  </li>



                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/company-details/45"> Company Details </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/fundamental-details/45"> Fundamental Details </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/news/search?keyword=&amp;instrument_id=45&amp;from_date=&amp;to_date="> News</a>
                         </li>
                         <li class="divider"> </li>
                         <li>
                             <a href="javascript:;"> Separated link </a>
                         </li>
                     </ul>
                 </div>
                 </td>
                <td> 122 </td>
                <td> 124 </td>
                <td> 122 </td>
                <td> 122.2 </td>
                <td> 123.4 </td>
                <td class="font-red-haze"> -1.2 </td>
                <td class="font-red-haze"> -0.97% </td>
                <td> 57 </td>
                <td> 0.705 </td>
                <td> 5746 </td>
                <td> 17-May, 14:30 </td>
            </tr>
                    <tr>
                                        <td class="highlight"><div class="danger"></div> <a href="javascript:;"><a target="_blank" href="https://dev.stockbangladesh.com/company-details/46">AZIZPIPES</a></a></td>
                                        <td> <div class="btn-group">
                     <button class="btn green btn-sm dropdown-toggle" type="button" data-toggle="dropdown" aria-expanded="false"> Go To
                         <i class="fa fa-angle-down"></i>
                     </button>
                     <ul class="dropdown-menu" role="menu">
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/ta-chart?instrumentCode=AZIZPIPES"> TA Chart </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/advance-ta-chart?instrumentCode=AZIZPIPES"> Advance TA Chart </a>
                         </li>
                                                  <li>
                                                      <a target="_blank" href="https://dev.stockbangladesh.com/minute-chart/46"> Minute Chart </a>
                                                  </li>

                                                  <li>
                                                      <a target="_blank" href="https://dev.stockbangladesh.com/news-chart/46"> News Chart </a>
                                                  </li>



                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/company-details/46"> Company Details </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/fundamental-details/46"> Fundamental Details </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/news/search?keyword=&amp;instrument_id=46&amp;from_date=&amp;to_date="> News</a>
                         </li>
                         <li class="divider"> </li>
                         <li>
                             <a href="javascript:;"> Separated link </a>
                         </li>
                     </ul>
                 </div>
                 </td>
                <td> 133.4 </td>
                <td> 136 </td>
                <td> 133.2 </td>
                <td> 133.5 </td>
                <td> 136.6 </td>
                <td class="font-red-haze"> -3.1 </td>
                <td class="font-red-haze"> -2.27% </td>
                <td> 287 </td>
                <td> 4.551 </td>
                <td> 33927 </td>
                <td> 17-May, 14:30 </td>
            </tr>
                    <tr>
                                        <td class="highlight"><div class="danger"></div> <a href="javascript:;"><a target="_blank" href="https://dev.stockbangladesh.com/company-details/47">BANGAS</a></a></td>
                                        <td> <div class="btn-group">
                     <button class="btn green btn-sm dropdown-toggle" type="button" data-toggle="dropdown" aria-expanded="false"> Go To
                         <i class="fa fa-angle-down"></i>
                     </button>
                     <ul class="dropdown-menu" role="menu">
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/ta-chart?instrumentCode=BANGAS"> TA Chart </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/advance-ta-chart?instrumentCode=BANGAS"> Advance TA Chart </a>
                         </li>
                                                  <li>
                                                      <a target="_blank" href="https://dev.stockbangladesh.com/minute-chart/47"> Minute Chart </a>
                                                  </li>

                                                  <li>
                                                      <a target="_blank" href="https://dev.stockbangladesh.com/news-chart/47"> News Chart </a>
                                                  </li>



                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/company-details/47"> Company Details </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/fundamental-details/47"> Fundamental Details </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/news/search?keyword=&amp;instrument_id=47&amp;from_date=&amp;to_date="> News</a>
                         </li>
                         <li class="divider"> </li>
                         <li>
                             <a href="javascript:;"> Separated link </a>
                         </li>
                     </ul>
                 </div>
                 </td>
                <td> 242 </td>
                <td> 246.5 </td>
                <td> 242 </td>
                <td> 243.1 </td>
                <td> 249.2 </td>
                <td class="font-red-haze"> -6.1 </td>
                <td class="font-red-haze"> -2.45% </td>
                <td> 73 </td>
                <td> 1.058 </td>
                <td> 4334 </td>
                <td> 17-May, 14:30 </td>
            </tr>
                    <tr>
            
                <td class="highlight"><div class="success"></div> <a href="javascript:;"><a target="_blank" href="https://dev.stockbangladesh.com/company-details/48">BANKASIA</a></a></td>
                                                    <td> <div class="btn-group">
                     <button class="btn green btn-sm dropdown-toggle" type="button" data-toggle="dropdown" aria-expanded="false"> Go To
                         <i class="fa fa-angle-down"></i>
                     </button>
                     <ul class="dropdown-menu" role="menu">
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/ta-chart?instrumentCode=BANKASIA"> TA Chart </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/advance-ta-chart?instrumentCode=BANKASIA"> Advance TA Chart </a>
                         </li>
                                                  <li>
                                                      <a target="_blank" href="https://dev.stockbangladesh.com/minute-chart/48"> Minute Chart </a>
                                                  </li>

                                                  <li>
                                                      <a target="_blank" href="https://dev.stockbangladesh.com/news-chart/48"> News Chart </a>
                                                  </li>



                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/company-details/48"> Company Details </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/fundamental-details/48"> Fundamental Details </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/news/search?keyword=&amp;instrument_id=48&amp;from_date=&amp;to_date="> News</a>
                         </li>
                         <li class="divider"> </li>
                         <li>
                             <a href="javascript:;"> Separated link </a>
                         </li>
                     </ul>
                 </div>
                 </td>
                <td> 16.5 </td>
                <td> 16.6 </td>
                <td> 16 </td>
                <td> 16.1 </td>
                <td> 16.3 </td>
                <td class="font-red-haze"> -0.2 </td>
                <td class="font-red-haze"> -1.23% </td>
                <td> 91 </td>
                <td> 5.159 </td>
                <td> 319199 </td>
                <td> 17-May, 14:30 </td>
            </tr>
                    <tr>
                                        <td class="highlight"><div class="danger"></div> <a href="javascript:;"><a target="_blank" href="https://dev.stockbangladesh.com/company-details/34">BARKAPOWER</a></a></td>
                                        <td> <div class="btn-group">
                     <button class="btn green btn-sm dropdown-toggle" type="button" data-toggle="dropdown" aria-expanded="false"> Go To
                         <i class="fa fa-angle-down"></i>
                     </button>
                     <ul class="dropdown-menu" role="menu">
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/ta-chart?instrumentCode=BARKAPOWER"> TA Chart </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/advance-ta-chart?instrumentCode=BARKAPOWER"> Advance TA Chart </a>
                         </li>
                                                  <li>
                                                      <a target="_blank" href="https://dev.stockbangladesh.com/minute-chart/34"> Minute Chart </a>
                                                  </li>

                                                  <li>
                                                      <a target="_blank" href="https://dev.stockbangladesh.com/news-chart/34"> News Chart </a>
                                                  </li>



                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/company-details/34"> Company Details </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/fundamental-details/34"> Fundamental Details </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/news/search?keyword=&amp;instrument_id=34&amp;from_date=&amp;to_date="> News</a>
                         </li>
                         <li class="divider"> </li>
                         <li>
                             <a href="javascript:;"> Separated link </a>
                         </li>
                     </ul>
                 </div>
                 </td>
                <td> 29.4 </td>
                <td> 29.9 </td>
                <td> 29 </td>
                <td> 29.2 </td>
                <td> 29.8 </td>
                <td class="font-red-haze"> -0.6 </td>
                <td class="font-red-haze"> -2.01% </td>
                <td> 269 </td>
                <td> 7.584 </td>
                <td> 258222 </td>
                <td> 17-May, 14:30 </td>
            </tr>
                    <tr>
                                        <td class="highlight"><div class="danger"></div> <a href="javascript:;"><a target="_blank" href="https://dev.stockbangladesh.com/company-details/61">BATASHOE</a></a></td>
                                        <td> <div class="btn-group">
                     <button class="btn green btn-sm dropdown-toggle" type="button" data-toggle="dropdown" aria-expanded="false"> Go To
                         <i class="fa fa-angle-down"></i>
                     </button>
                     <ul class="dropdown-menu" role="menu">
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/ta-chart?instrumentCode=BATASHOE"> TA Chart </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/advance-ta-chart?instrumentCode=BATASHOE"> Advance TA Chart </a>
                         </li>
                                                  <li>
                                                      <a target="_blank" href="https://dev.stockbangladesh.com/minute-chart/61"> Minute Chart </a>
                                                  </li>

                                                  <li>
                                                      <a target="_blank" href="https://dev.stockbangladesh.com/news-chart/61"> News Chart </a>
                                                  </li>



                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/company-details/61"> Company Details </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/fundamental-details/61"> Fundamental Details </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/news/search?keyword=&amp;instrument_id=61&amp;from_date=&amp;to_date="> News</a>
                         </li>
                         <li class="divider"> </li>
                         <li>
                             <a href="javascript:;"> Separated link </a>
                         </li>
                     </ul>
                 </div>
                 </td>
                <td> 1136 </td>
                <td> 1140 </td>
                <td> 1135 </td>
                <td> 1136 </td>
                <td> 1136.8 </td>
                <td class="font-red-haze"> -0.8 </td>
                <td class="font-red-haze"> -0.07% </td>
                <td> 92 </td>
                <td> 2.423 </td>
                <td> 2133 </td>
                <td> 17-May, 14:30 </td>
            </tr>
                    <tr>
            
                <td class="highlight"><div class="success"></div> <a href="javascript:;"><a target="_blank" href="https://dev.stockbangladesh.com/company-details/62">BATBC</a></a></td>
                                                    <td> <div class="btn-group">
                     <button class="btn green btn-sm dropdown-toggle" type="button" data-toggle="dropdown" aria-expanded="false"> Go To
                         <i class="fa fa-angle-down"></i>
                     </button>
                     <ul class="dropdown-menu" role="menu">
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/ta-chart?instrumentCode=BATBC"> TA Chart </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/advance-ta-chart?instrumentCode=BATBC"> Advance TA Chart </a>
                         </li>
                                                  <li>
                                                      <a target="_blank" href="https://dev.stockbangladesh.com/minute-chart/62"> Minute Chart </a>
                                                  </li>

                                                  <li>
                                                      <a target="_blank" href="https://dev.stockbangladesh.com/news-chart/62"> News Chart </a>
                                                  </li>



                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/company-details/62"> Company Details </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/fundamental-details/62"> Fundamental Details </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/news/search?keyword=&amp;instrument_id=62&amp;from_date=&amp;to_date="> News</a>
                         </li>
                         <li class="divider"> </li>
                         <li>
                             <a href="javascript:;"> Separated link </a>
                         </li>
                     </ul>
                 </div>
                 </td>
                <td> 3493.9 </td>
                <td> 3493.9 </td>
                <td> 3401.1 </td>
                <td> 3463 </td>
                <td> 3468.3 </td>
                <td class="font-red-haze"> -5.3 </td>
                <td class="font-red-haze"> -0.15% </td>
                <td> 2 </td>
                <td> 0.01 </td>
                <td> 3 </td>
                <td> 17-May, 14:30 </td>
            </tr>
                    <tr>
                                        <td class="highlight"><div class="danger"></div> <a href="javascript:;"><a target="_blank" href="https://dev.stockbangladesh.com/company-details/63">BAYLEASING</a></a></td>
                                        <td> <div class="btn-group">
                     <button class="btn green btn-sm dropdown-toggle" type="button" data-toggle="dropdown" aria-expanded="false"> Go To
                         <i class="fa fa-angle-down"></i>
                     </button>
                     <ul class="dropdown-menu" role="menu">
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/ta-chart?instrumentCode=BAYLEASING"> TA Chart </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/advance-ta-chart?instrumentCode=BAYLEASING"> Advance TA Chart </a>
                         </li>
                                                  <li>
                                                      <a target="_blank" href="https://dev.stockbangladesh.com/minute-chart/63"> Minute Chart </a>
                                                  </li>

                                                  <li>
                                                      <a target="_blank" href="https://dev.stockbangladesh.com/news-chart/63"> News Chart </a>
                                                  </li>



                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/company-details/63"> Company Details </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/fundamental-details/63"> Fundamental Details </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/news/search?keyword=&amp;instrument_id=63&amp;from_date=&amp;to_date="> News</a>
                         </li>
                         <li class="divider"> </li>
                         <li>
                             <a href="javascript:;"> Separated link </a>
                         </li>
                     </ul>
                 </div>
                 </td>
                <td> 21.7 </td>
                <td> 22 </td>
                <td> 21.5 </td>
                <td> 21.6 </td>
                <td> 21.9 </td>
                <td class="font-red-haze"> -0.3 </td>
                <td class="font-red-haze"> -1.37% </td>
                <td> 23 </td>
                <td> 0.226 </td>
                <td> 10461 </td>
                <td> 17-May, 14:30 </td>
            </tr>
                    <tr>
                                        <td class="highlight"><div class="danger"></div> <a href="javascript:;"><a target="_blank" href="https://dev.stockbangladesh.com/company-details/121">BBS</a></a></td>
                                        <td> <div class="btn-group">
                     <button class="btn green btn-sm dropdown-toggle" type="button" data-toggle="dropdown" aria-expanded="false"> Go To
                         <i class="fa fa-angle-down"></i>
                     </button>
                     <ul class="dropdown-menu" role="menu">
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/ta-chart?instrumentCode=BBS"> TA Chart </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/advance-ta-chart?instrumentCode=BBS"> Advance TA Chart </a>
                         </li>
                                                  <li>
                                                      <a target="_blank" href="https://dev.stockbangladesh.com/minute-chart/121"> Minute Chart </a>
                                                  </li>

                                                  <li>
                                                      <a target="_blank" href="https://dev.stockbangladesh.com/news-chart/121"> News Chart </a>
                                                  </li>



                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/company-details/121"> Company Details </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/fundamental-details/121"> Fundamental Details </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/news/search?keyword=&amp;instrument_id=121&amp;from_date=&amp;to_date="> News</a>
                         </li>
                         <li class="divider"> </li>
                         <li>
                             <a href="javascript:;"> Separated link </a>
                         </li>
                     </ul>
                 </div>
                 </td>
                <td> 28.9 </td>
                <td> 30 </td>
                <td> 28.9 </td>
                <td> 29 </td>
                <td> 29.5 </td>
                <td class="font-red-haze"> -0.5 </td>
                <td class="font-red-haze"> -1.69% </td>
                <td> 423 </td>
                <td> 9.165 </td>
                <td> 312226 </td>
                <td> 17-May, 14:30 </td>
            </tr>
                    <tr>
            
                <td class="highlight"><div class="success"></div> <a href="javascript:;"><a target="_blank" href="https://dev.stockbangladesh.com/company-details/30034">BBSCABLES</a></a></td>
                                                    <td> <div class="btn-group">
                     <button class="btn green btn-sm dropdown-toggle" type="button" data-toggle="dropdown" aria-expanded="false"> Go To
                         <i class="fa fa-angle-down"></i>
                     </button>
                     <ul class="dropdown-menu" role="menu">
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/ta-chart?instrumentCode=BBSCABLES"> TA Chart </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/advance-ta-chart?instrumentCode=BBSCABLES"> Advance TA Chart </a>
                         </li>
                                                  <li>
                                                      <a target="_blank" href="https://dev.stockbangladesh.com/minute-chart/30034"> Minute Chart </a>
                                                  </li>

                                                  <li>
                                                      <a target="_blank" href="https://dev.stockbangladesh.com/news-chart/30034"> News Chart </a>
                                                  </li>



                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/company-details/30034"> Company Details </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/fundamental-details/30034"> Fundamental Details </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/news/search?keyword=&amp;instrument_id=30034&amp;from_date=&amp;to_date="> News</a>
                         </li>
                         <li class="divider"> </li>
                         <li>
                             <a href="javascript:;"> Separated link </a>
                         </li>
                     </ul>
                 </div>
                 </td>
                <td> 78.8 </td>
                <td> 80.9 </td>
                <td> 77.2 </td>
                <td> 78.8 </td>
                <td> 78 </td>
                <td class="font-green-jungle"> 0.8 </td>
                <td class="font-green-jungle"> 1.03% </td>
                <td> 2033 </td>
                <td> 72.487 </td>
                <td> 915999 </td>
                <td> 17-May, 14:30 </td>
            </tr>
                    <tr>
                                        <td class="highlight"><div class="danger"></div> <a href="javascript:;"><a target="_blank" href="https://dev.stockbangladesh.com/company-details/64">BDAUTOCA</a></a></td>
                                        <td> <div class="btn-group">
                     <button class="btn green btn-sm dropdown-toggle" type="button" data-toggle="dropdown" aria-expanded="false"> Go To
                         <i class="fa fa-angle-down"></i>
                     </button>
                     <ul class="dropdown-menu" role="menu">
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/ta-chart?instrumentCode=BDAUTOCA"> TA Chart </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/advance-ta-chart?instrumentCode=BDAUTOCA"> Advance TA Chart </a>
                         </li>
                                                  <li>
                                                      <a target="_blank" href="https://dev.stockbangladesh.com/minute-chart/64"> Minute Chart </a>
                                                  </li>

                                                  <li>
                                                      <a target="_blank" href="https://dev.stockbangladesh.com/news-chart/64"> News Chart </a>
                                                  </li>



                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/company-details/64"> Company Details </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/fundamental-details/64"> Fundamental Details </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/news/search?keyword=&amp;instrument_id=64&amp;from_date=&amp;to_date="> News</a>
                         </li>
                         <li class="divider"> </li>
                         <li>
                             <a href="javascript:;"> Separated link </a>
                         </li>
                     </ul>
                 </div>
                 </td>
                <td> 113.3 </td>
                <td> 116.3 </td>
                <td> 112.6 </td>
                <td> 114.4 </td>
                <td> 114.1 </td>
                <td class="font-green-jungle"> 0.3 </td>
                <td class="font-green-jungle"> 0.26% </td>
                <td> 333 </td>
                <td> 5.549 </td>
                <td> 48382 </td>
                <td> 17-May, 14:30 </td>
            </tr>
                    <tr>
                                        <td class="highlight"><div class="danger"></div> <a href="javascript:;"><a target="_blank" href="https://dev.stockbangladesh.com/company-details/65">BDCOM</a></a></td>
                                        <td> <div class="btn-group">
                     <button class="btn green btn-sm dropdown-toggle" type="button" data-toggle="dropdown" aria-expanded="false"> Go To
                         <i class="fa fa-angle-down"></i>
                     </button>
                     <ul class="dropdown-menu" role="menu">
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/ta-chart?instrumentCode=BDCOM"> TA Chart </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/advance-ta-chart?instrumentCode=BDCOM"> Advance TA Chart </a>
                         </li>
                                                  <li>
                                                      <a target="_blank" href="https://dev.stockbangladesh.com/minute-chart/65"> Minute Chart </a>
                                                  </li>

                                                  <li>
                                                      <a target="_blank" href="https://dev.stockbangladesh.com/news-chart/65"> News Chart </a>
                                                  </li>



                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/company-details/65"> Company Details </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/fundamental-details/65"> Fundamental Details </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/news/search?keyword=&amp;instrument_id=65&amp;from_date=&amp;to_date="> News</a>
                         </li>
                         <li class="divider"> </li>
                         <li>
                             <a href="javascript:;"> Separated link </a>
                         </li>
                     </ul>
                 </div>
                 </td>
                <td> 29.6 </td>
                <td> 30 </td>
                <td> 29.4 </td>
                <td> 29.5 </td>
                <td> 29.9 </td>
                <td class="font-red-haze"> -0.4 </td>
                <td class="font-red-haze"> -1.34% </td>
                <td> 226 </td>
                <td> 9.868 </td>
                <td> 333195 </td>
                <td> 17-May, 14:30 </td>
            </tr>
                    <tr>
                                        <td class="highlight"><div class="danger"></div> <a href="javascript:;"><a target="_blank" href="https://dev.stockbangladesh.com/company-details/66">BDFINANCE</a></a></td>
                                        <td> <div class="btn-group">
                     <button class="btn green btn-sm dropdown-toggle" type="button" data-toggle="dropdown" aria-expanded="false"> Go To
                         <i class="fa fa-angle-down"></i>
                     </button>
                     <ul class="dropdown-menu" role="menu">
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/ta-chart?instrumentCode=BDFINANCE"> TA Chart </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/advance-ta-chart?instrumentCode=BDFINANCE"> Advance TA Chart </a>
                         </li>
                                                  <li>
                                                      <a target="_blank" href="https://dev.stockbangladesh.com/minute-chart/66"> Minute Chart </a>
                                                  </li>

                                                  <li>
                                                      <a target="_blank" href="https://dev.stockbangladesh.com/news-chart/66"> News Chart </a>
                                                  </li>



                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/company-details/66"> Company Details </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/fundamental-details/66"> Fundamental Details </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/news/search?keyword=&amp;instrument_id=66&amp;from_date=&amp;to_date="> News</a>
                         </li>
                         <li class="divider"> </li>
                         <li>
                             <a href="javascript:;"> Separated link </a>
                         </li>
                     </ul>
                 </div>
                 </td>
                <td> 0 </td>
                <td> 17.4 </td>
                <td> 16.7 </td>
                <td> 17.2 </td>
                <td> 16.9 </td>
                <td class="font-green-jungle"> 0.3 </td>
                <td class="font-green-jungle"> 1.78% </td>
                <td> 393 </td>
                <td> 5.006 </td>
                <td> 294300 </td>
                <td> 16-May, 14:30 </td>
            </tr>
                    <tr>
                                        <td class="highlight"><div class="danger"></div> <a href="javascript:;"><a target="_blank" href="https://dev.stockbangladesh.com/company-details/67">BDLAMPS</a></a></td>
                                        <td> <div class="btn-group">
                     <button class="btn green btn-sm dropdown-toggle" type="button" data-toggle="dropdown" aria-expanded="false"> Go To
                         <i class="fa fa-angle-down"></i>
                     </button>
                     <ul class="dropdown-menu" role="menu">
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/ta-chart?instrumentCode=BDLAMPS"> TA Chart </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/advance-ta-chart?instrumentCode=BDLAMPS"> Advance TA Chart </a>
                         </li>
                                                  <li>
                                                      <a target="_blank" href="https://dev.stockbangladesh.com/minute-chart/67"> Minute Chart </a>
                                                  </li>

                                                  <li>
                                                      <a target="_blank" href="https://dev.stockbangladesh.com/news-chart/67"> News Chart </a>
                                                  </li>



                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/company-details/67"> Company Details </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/fundamental-details/67"> Fundamental Details </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/news/search?keyword=&amp;instrument_id=67&amp;from_date=&amp;to_date="> News</a>
                         </li>
                         <li class="divider"> </li>
                         <li>
                             <a href="javascript:;"> Separated link </a>
                         </li>
                     </ul>
                 </div>
                 </td>
                <td> 175 </td>
                <td> 176.5 </td>
                <td> 173 </td>
                <td> 173.8 </td>
                <td> 175.7 </td>
                <td class="font-red-haze"> -1.9 </td>
                <td class="font-red-haze"> -1.08% </td>
                <td> 141 </td>
                <td> 1.909 </td>
                <td> 10902 </td>
                <td> 17-May, 14:30 </td>
            </tr>
                    <tr>
                                                    <td class="highlight"><div class="info"></div> <a href="javascript:;"><a target="_blank" href="https://dev.stockbangladesh.com/company-details/69">BDTHAI</a></a></td>
                            <td> <div class="btn-group">
                     <button class="btn green btn-sm dropdown-toggle" type="button" data-toggle="dropdown" aria-expanded="false"> Go To
                         <i class="fa fa-angle-down"></i>
                     </button>
                     <ul class="dropdown-menu" role="menu">
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/ta-chart?instrumentCode=BDTHAI"> TA Chart </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/advance-ta-chart?instrumentCode=BDTHAI"> Advance TA Chart </a>
                         </li>
                                                  <li>
                                                      <a target="_blank" href="https://dev.stockbangladesh.com/minute-chart/69"> Minute Chart </a>
                                                  </li>

                                                  <li>
                                                      <a target="_blank" href="https://dev.stockbangladesh.com/news-chart/69"> News Chart </a>
                                                  </li>



                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/company-details/69"> Company Details </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/fundamental-details/69"> Fundamental Details </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/news/search?keyword=&amp;instrument_id=69&amp;from_date=&amp;to_date="> News</a>
                         </li>
                         <li class="divider"> </li>
                         <li>
                             <a href="javascript:;"> Separated link </a>
                         </li>
                     </ul>
                 </div>
                 </td>
                <td> 25.1 </td>
                <td> 25.3 </td>
                <td> 24.4 </td>
                <td> 24.8 </td>
                <td> 25.1 </td>
                <td class="font-red-haze"> -0.3 </td>
                <td class="font-red-haze"> -1.2% </td>
                <td> 981 </td>
                <td> 32.81 </td>
                <td> 1328753 </td>
                <td> 17-May, 14:30 </td>
            </tr>
                    <tr>
            
                <td class="highlight"><div class="success"></div> <a href="javascript:;"><a target="_blank" href="https://dev.stockbangladesh.com/company-details/70">BDWELDING</a></a></td>
                                                    <td> <div class="btn-group">
                     <button class="btn green btn-sm dropdown-toggle" type="button" data-toggle="dropdown" aria-expanded="false"> Go To
                         <i class="fa fa-angle-down"></i>
                     </button>
                     <ul class="dropdown-menu" role="menu">
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/ta-chart?instrumentCode=BDWELDING"> TA Chart </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/advance-ta-chart?instrumentCode=BDWELDING"> Advance TA Chart </a>
                         </li>
                                                  <li>
                                                      <a target="_blank" href="https://dev.stockbangladesh.com/minute-chart/70"> Minute Chart </a>
                                                  </li>

                                                  <li>
                                                      <a target="_blank" href="https://dev.stockbangladesh.com/news-chart/70"> News Chart </a>
                                                  </li>



                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/company-details/70"> Company Details </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/fundamental-details/70"> Fundamental Details </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/news/search?keyword=&amp;instrument_id=70&amp;from_date=&amp;to_date="> News</a>
                         </li>
                         <li class="divider"> </li>
                         <li>
                             <a href="javascript:;"> Separated link </a>
                         </li>
                     </ul>
                 </div>
                 </td>
                <td> 18.5 </td>
                <td> 18.6 </td>
                <td> 17.4 </td>
                <td> 17.9 </td>
                <td> 18.2 </td>
                <td class="font-red-haze"> -0.3 </td>
                <td class="font-red-haze"> -1.65% </td>
                <td> 108 </td>
                <td> 0.973 </td>
                <td> 54487 </td>
                <td> 17-May, 14:30 </td>
            </tr>
                    <tr>
                                        <td class="highlight"><div class="danger"></div> <a href="javascript:;"><a target="_blank" href="https://dev.stockbangladesh.com/company-details/32">BEACHHATCH</a></a></td>
                                        <td> <div class="btn-group">
                     <button class="btn green btn-sm dropdown-toggle" type="button" data-toggle="dropdown" aria-expanded="false"> Go To
                         <i class="fa fa-angle-down"></i>
                     </button>
                     <ul class="dropdown-menu" role="menu">
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/ta-chart?instrumentCode=BEACHHATCH"> TA Chart </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/advance-ta-chart?instrumentCode=BEACHHATCH"> Advance TA Chart </a>
                         </li>
                                                  <li>
                                                      <a target="_blank" href="https://dev.stockbangladesh.com/minute-chart/32"> Minute Chart </a>
                                                  </li>

                                                  <li>
                                                      <a target="_blank" href="https://dev.stockbangladesh.com/news-chart/32"> News Chart </a>
                                                  </li>



                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/company-details/32"> Company Details </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/fundamental-details/32"> Fundamental Details </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/news/search?keyword=&amp;instrument_id=32&amp;from_date=&amp;to_date="> News</a>
                         </li>
                         <li class="divider"> </li>
                         <li>
                             <a href="javascript:;"> Separated link </a>
                         </li>
                     </ul>
                 </div>
                 </td>
                <td> 13.5 </td>
                <td> 14 </td>
                <td> 13.5 </td>
                <td> 13.5 </td>
                <td> 14 </td>
                <td class="font-red-haze"> -0.5 </td>
                <td class="font-red-haze"> -3.57% </td>
                <td> 53 </td>
                <td> 0.52 </td>
                <td> 37769 </td>
                <td> 17-May, 14:30 </td>
            </tr>
                    <tr>
                                        <td class="highlight"><div class="danger"></div> <a href="javascript:;"><a target="_blank" href="https://dev.stockbangladesh.com/company-details/33">BEACONPHAR</a></a></td>
                                        <td> <div class="btn-group">
                     <button class="btn green btn-sm dropdown-toggle" type="button" data-toggle="dropdown" aria-expanded="false"> Go To
                         <i class="fa fa-angle-down"></i>
                     </button>
                     <ul class="dropdown-menu" role="menu">
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/ta-chart?instrumentCode=BEACONPHAR"> TA Chart </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/advance-ta-chart?instrumentCode=BEACONPHAR"> Advance TA Chart </a>
                         </li>
                                                  <li>
                                                      <a target="_blank" href="https://dev.stockbangladesh.com/minute-chart/33"> Minute Chart </a>
                                                  </li>

                                                  <li>
                                                      <a target="_blank" href="https://dev.stockbangladesh.com/news-chart/33"> News Chart </a>
                                                  </li>



                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/company-details/33"> Company Details </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/fundamental-details/33"> Fundamental Details </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/news/search?keyword=&amp;instrument_id=33&amp;from_date=&amp;to_date="> News</a>
                         </li>
                         <li class="divider"> </li>
                         <li>
                             <a href="javascript:;"> Separated link </a>
                         </li>
                     </ul>
                 </div>
                 </td>
                <td> 19.2 </td>
                <td> 19.6 </td>
                <td> 19.2 </td>
                <td> 19.3 </td>
                <td> 19.7 </td>
                <td class="font-red-haze"> -0.4 </td>
                <td class="font-red-haze"> -2.03% </td>
                <td> 113 </td>
                <td> 2.174 </td>
                <td> 112085 </td>
                <td> 17-May, 14:30 </td>
            </tr>
                    <tr>
                                        <td class="highlight"><div class="danger"></div> <a href="javascript:;"><a target="_blank" href="https://dev.stockbangladesh.com/company-details/522">BENGALWTL</a></a></td>
                                        <td> <div class="btn-group">
                     <button class="btn green btn-sm dropdown-toggle" type="button" data-toggle="dropdown" aria-expanded="false"> Go To
                         <i class="fa fa-angle-down"></i>
                     </button>
                     <ul class="dropdown-menu" role="menu">
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/ta-chart?instrumentCode=BENGALWTL"> TA Chart </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/advance-ta-chart?instrumentCode=BENGALWTL"> Advance TA Chart </a>
                         </li>
                                                  <li>
                                                      <a target="_blank" href="https://dev.stockbangladesh.com/minute-chart/522"> Minute Chart </a>
                                                  </li>

                                                  <li>
                                                      <a target="_blank" href="https://dev.stockbangladesh.com/news-chart/522"> News Chart </a>
                                                  </li>



                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/company-details/522"> Company Details </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/fundamental-details/522"> Fundamental Details </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/news/search?keyword=&amp;instrument_id=522&amp;from_date=&amp;to_date="> News</a>
                         </li>
                         <li class="divider"> </li>
                         <li>
                             <a href="javascript:;"> Separated link </a>
                         </li>
                     </ul>
                 </div>
                 </td>
                <td> 30.2 </td>
                <td> 30.9 </td>
                <td> 30 </td>
                <td> 30.1 </td>
                <td> 31 </td>
                <td class="font-red-haze"> -0.9 </td>
                <td class="font-red-haze"> -2.9% </td>
                <td> 75 </td>
                <td> 1.335 </td>
                <td> 44030 </td>
                <td> 17-May, 14:30 </td>
            </tr>
                    <tr>
                                        <td class="highlight"><div class="danger"></div> <a href="javascript:;"><a target="_blank" href="https://dev.stockbangladesh.com/company-details/35">BERGERPBL</a></a></td>
                                        <td> <div class="btn-group">
                     <button class="btn green btn-sm dropdown-toggle" type="button" data-toggle="dropdown" aria-expanded="false"> Go To
                         <i class="fa fa-angle-down"></i>
                     </button>
                     <ul class="dropdown-menu" role="menu">
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/ta-chart?instrumentCode=BERGERPBL"> TA Chart </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/advance-ta-chart?instrumentCode=BERGERPBL"> Advance TA Chart </a>
                         </li>
                                                  <li>
                                                      <a target="_blank" href="https://dev.stockbangladesh.com/minute-chart/35"> Minute Chart </a>
                                                  </li>

                                                  <li>
                                                      <a target="_blank" href="https://dev.stockbangladesh.com/news-chart/35"> News Chart </a>
                                                  </li>



                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/company-details/35"> Company Details </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/fundamental-details/35"> Fundamental Details </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/news/search?keyword=&amp;instrument_id=35&amp;from_date=&amp;to_date="> News</a>
                         </li>
                         <li class="divider"> </li>
                         <li>
                             <a href="javascript:;"> Separated link </a>
                         </li>
                     </ul>
                 </div>
                 </td>
                <td> 2045 </td>
                <td> 2051 </td>
                <td> 2045 </td>
                <td> 2049.5 </td>
                <td> 2050 </td>
                <td class="font-red-haze"> -0.5 </td>
                <td class="font-red-haze"> -0.02% </td>
                <td> 6 </td>
                <td> 0.012 </td>
                <td> 6 </td>
                <td> 17-May, 14:30 </td>
            </tr>
                    <tr>
                                        <td class="highlight"><div class="danger"></div> <a href="javascript:;"><a target="_blank" href="https://dev.stockbangladesh.com/company-details/36">BEXIMCO</a></a></td>
                                        <td> <div class="btn-group">
                     <button class="btn green btn-sm dropdown-toggle" type="button" data-toggle="dropdown" aria-expanded="false"> Go To
                         <i class="fa fa-angle-down"></i>
                     </button>
                     <ul class="dropdown-menu" role="menu">
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/ta-chart?instrumentCode=BEXIMCO"> TA Chart </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/advance-ta-chart?instrumentCode=BEXIMCO"> Advance TA Chart </a>
                         </li>
                                                  <li>
                                                      <a target="_blank" href="https://dev.stockbangladesh.com/minute-chart/36"> Minute Chart </a>
                                                  </li>

                                                  <li>
                                                      <a target="_blank" href="https://dev.stockbangladesh.com/news-chart/36"> News Chart </a>
                                                  </li>



                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/company-details/36"> Company Details </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/fundamental-details/36"> Fundamental Details </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/news/search?keyword=&amp;instrument_id=36&amp;from_date=&amp;to_date="> News</a>
                         </li>
                         <li class="divider"> </li>
                         <li>
                             <a href="javascript:;"> Separated link </a>
                         </li>
                     </ul>
                 </div>
                 </td>
                <td> 27 </td>
                <td> 28.1 </td>
                <td> 26.8 </td>
                <td> 26.9 </td>
                <td> 27.9 </td>
                <td class="font-red-haze"> -1 </td>
                <td class="font-red-haze"> -3.58% </td>
                <td> 2534 </td>
                <td> 136.444 </td>
                <td> 5007389 </td>
                <td> 17-May, 14:30 </td>
            </tr>
                    <tr>
                                        <td class="highlight"><div class="danger"></div> <a href="javascript:;"><a target="_blank" href="https://dev.stockbangladesh.com/company-details/38">BGIC</a></a></td>
                                        <td> <div class="btn-group">
                     <button class="btn green btn-sm dropdown-toggle" type="button" data-toggle="dropdown" aria-expanded="false"> Go To
                         <i class="fa fa-angle-down"></i>
                     </button>
                     <ul class="dropdown-menu" role="menu">
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/ta-chart?instrumentCode=BGIC"> TA Chart </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/advance-ta-chart?instrumentCode=BGIC"> Advance TA Chart </a>
                         </li>
                                                  <li>
                                                      <a target="_blank" href="https://dev.stockbangladesh.com/minute-chart/38"> Minute Chart </a>
                                                  </li>

                                                  <li>
                                                      <a target="_blank" href="https://dev.stockbangladesh.com/news-chart/38"> News Chart </a>
                                                  </li>



                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/company-details/38"> Company Details </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/fundamental-details/38"> Fundamental Details </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/news/search?keyword=&amp;instrument_id=38&amp;from_date=&amp;to_date="> News</a>
                         </li>
                         <li class="divider"> </li>
                         <li>
                             <a href="javascript:;"> Separated link </a>
                         </li>
                     </ul>
                 </div>
                 </td>
                <td> 0 </td>
                <td> 19.5 </td>
                <td> 18.8 </td>
                <td> 19 </td>
                <td> 19.2 </td>
                <td class="font-red-haze"> -0.2 </td>
                <td class="font-red-haze"> -1.04% </td>
                <td> 15 </td>
                <td> 0.061 </td>
                <td> 3190 </td>
                <td> 17-May, 14:30 </td>
            </tr>
                    <tr>
                                                    <td class="highlight"><div class="info"></div> <a href="javascript:;"><a target="_blank" href="https://dev.stockbangladesh.com/company-details/39">BIFC</a></a></td>
                            <td> <div class="btn-group">
                     <button class="btn green btn-sm dropdown-toggle" type="button" data-toggle="dropdown" aria-expanded="false"> Go To
                         <i class="fa fa-angle-down"></i>
                     </button>
                     <ul class="dropdown-menu" role="menu">
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/ta-chart?instrumentCode=BIFC"> TA Chart </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/advance-ta-chart?instrumentCode=BIFC"> Advance TA Chart </a>
                         </li>
                                                  <li>
                                                      <a target="_blank" href="https://dev.stockbangladesh.com/minute-chart/39"> Minute Chart </a>
                                                  </li>

                                                  <li>
                                                      <a target="_blank" href="https://dev.stockbangladesh.com/news-chart/39"> News Chart </a>
                                                  </li>



                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/company-details/39"> Company Details </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/fundamental-details/39"> Fundamental Details </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/news/search?keyword=&amp;instrument_id=39&amp;from_date=&amp;to_date="> News</a>
                         </li>
                         <li class="divider"> </li>
                         <li>
                             <a href="javascript:;"> Separated link </a>
                         </li>
                     </ul>
                 </div>
                 </td>
                <td> 7 </td>
                <td> 7.4 </td>
                <td> 7 </td>
                <td> 7 </td>
                <td> 7 </td>
                <td class="font-green-jungle"> 0 </td>
                <td class="font-green-jungle"> 0% </td>
                <td> 42 </td>
                <td> 0.234 </td>
                <td> 33100 </td>
                <td> 17-May, 14:30 </td>
            </tr>
                    <tr>
                                        <td class="highlight"><div class="danger"></div> <a href="javascript:;"><a target="_blank" href="https://dev.stockbangladesh.com/company-details/30023">BNICL</a></a></td>
                                        <td> <div class="btn-group">
                     <button class="btn green btn-sm dropdown-toggle" type="button" data-toggle="dropdown" aria-expanded="false"> Go To
                         <i class="fa fa-angle-down"></i>
                     </button>
                     <ul class="dropdown-menu" role="menu">
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/ta-chart?instrumentCode=BNICL"> TA Chart </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/advance-ta-chart?instrumentCode=BNICL"> Advance TA Chart </a>
                         </li>
                                                  <li>
                                                      <a target="_blank" href="https://dev.stockbangladesh.com/minute-chart/30023"> Minute Chart </a>
                                                  </li>

                                                  <li>
                                                      <a target="_blank" href="https://dev.stockbangladesh.com/news-chart/30023"> News Chart </a>
                                                  </li>



                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/company-details/30023"> Company Details </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/fundamental-details/30023"> Fundamental Details </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/news/search?keyword=&amp;instrument_id=30023&amp;from_date=&amp;to_date="> News</a>
                         </li>
                         <li class="divider"> </li>
                         <li>
                             <a href="javascript:;"> Separated link </a>
                         </li>
                     </ul>
                 </div>
                 </td>
                <td> 0 </td>
                <td> 16.2 </td>
                <td> 15.9 </td>
                <td> 16 </td>
                <td> 15.9 </td>
                <td class="font-green-jungle"> 0.1 </td>
                <td class="font-green-jungle"> 0.63% </td>
                <td> 113 </td>
                <td> 1.331 </td>
                <td> 83200 </td>
                <td> 16-May, 14:30 </td>
            </tr>
                    <tr>
                                        <td class="highlight"><div class="danger"></div> <a href="javascript:;"><a target="_blank" href="https://dev.stockbangladesh.com/company-details/50">BRACBANK</a></a></td>
                                        <td> <div class="btn-group">
                     <button class="btn green btn-sm dropdown-toggle" type="button" data-toggle="dropdown" aria-expanded="false"> Go To
                         <i class="fa fa-angle-down"></i>
                     </button>
                     <ul class="dropdown-menu" role="menu">
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/ta-chart?instrumentCode=BRACBANK"> TA Chart </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/advance-ta-chart?instrumentCode=BRACBANK"> Advance TA Chart </a>
                         </li>
                                                  <li>
                                                      <a target="_blank" href="https://dev.stockbangladesh.com/minute-chart/50"> Minute Chart </a>
                                                  </li>

                                                  <li>
                                                      <a target="_blank" href="https://dev.stockbangladesh.com/news-chart/50"> News Chart </a>
                                                  </li>



                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/company-details/50"> Company Details </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/fundamental-details/50"> Fundamental Details </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/news/search?keyword=&amp;instrument_id=50&amp;from_date=&amp;to_date="> News</a>
                         </li>
                         <li class="divider"> </li>
                         <li>
                             <a href="javascript:;"> Separated link </a>
                         </li>
                     </ul>
                 </div>
                 </td>
                <td> 74.5 </td>
                <td> 77.9 </td>
                <td> 73.3 </td>
                <td> 74 </td>
                <td> 76.9 </td>
                <td class="font-red-haze"> -2.9 </td>
                <td class="font-red-haze"> -3.77% </td>
                <td> 1748 </td>
                <td> 123.984 </td>
                <td> 1660066 </td>
                <td> 17-May, 14:30 </td>
            </tr>
                    <tr>
                                        <td class="highlight"><div class="danger"></div> <a href="javascript:;"><a target="_blank" href="https://dev.stockbangladesh.com/company-details/51">BRACSCBOND</a></a></td>
                                        <td> <div class="btn-group">
                     <button class="btn green btn-sm dropdown-toggle" type="button" data-toggle="dropdown" aria-expanded="false"> Go To
                         <i class="fa fa-angle-down"></i>
                     </button>
                     <ul class="dropdown-menu" role="menu">
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/ta-chart?instrumentCode=BRACSCBOND"> TA Chart </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/advance-ta-chart?instrumentCode=BRACSCBOND"> Advance TA Chart </a>
                         </li>
                                                  <li>
                                                      <a target="_blank" href="https://dev.stockbangladesh.com/minute-chart/51"> Minute Chart </a>
                                                  </li>

                                                  <li>
                                                      <a target="_blank" href="https://dev.stockbangladesh.com/news-chart/51"> News Chart </a>
                                                  </li>



                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/company-details/51"> Company Details </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/fundamental-details/51"> Fundamental Details </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/news/search?keyword=&amp;instrument_id=51&amp;from_date=&amp;to_date="> News</a>
                         </li>
                         <li class="divider"> </li>
                         <li>
                             <a href="javascript:;"> Separated link </a>
                         </li>
                     </ul>
                 </div>
                 </td>
                <td> 1012.5 </td>
                <td> 1012.5 </td>
                <td> 1012.5 </td>
                <td> 1012.5 </td>
                <td> 1080 </td>
                <td class="font-red-haze"> -67.5 </td>
                <td class="font-red-haze"> -6.25% </td>
                <td> 2 </td>
                <td> 0.01 </td>
                <td> 10 </td>
                <td> 01-Jan, 14:30 </td>
            </tr>
                    <tr>
                                        <td class="highlight"><div class="danger"></div> <a href="javascript:;"><a target="_blank" href="https://dev.stockbangladesh.com/company-details/52">BSC</a></a></td>
                                        <td> <div class="btn-group">
                     <button class="btn green btn-sm dropdown-toggle" type="button" data-toggle="dropdown" aria-expanded="false"> Go To
                         <i class="fa fa-angle-down"></i>
                     </button>
                     <ul class="dropdown-menu" role="menu">
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/ta-chart?instrumentCode=BSC"> TA Chart </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/advance-ta-chart?instrumentCode=BSC"> Advance TA Chart </a>
                         </li>
                                                  <li>
                                                      <a target="_blank" href="https://dev.stockbangladesh.com/minute-chart/52"> Minute Chart </a>
                                                  </li>

                                                  <li>
                                                      <a target="_blank" href="https://dev.stockbangladesh.com/news-chart/52"> News Chart </a>
                                                  </li>



                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/company-details/52"> Company Details </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/fundamental-details/52"> Fundamental Details </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/news/search?keyword=&amp;instrument_id=52&amp;from_date=&amp;to_date="> News</a>
                         </li>
                         <li class="divider"> </li>
                         <li>
                             <a href="javascript:;"> Separated link </a>
                         </li>
                     </ul>
                 </div>
                 </td>
                <td> 42.2 </td>
                <td> 43.4 </td>
                <td> 41.9 </td>
                <td> 42.1 </td>
                <td> 42.4 </td>
                <td class="font-red-haze"> -0.3 </td>
                <td class="font-red-haze"> -0.71% </td>
                <td> 684 </td>
                <td> 17.175 </td>
                <td> 404142 </td>
                <td> 17-May, 14:30 </td>
            </tr>
                    <tr>
                                        <td class="highlight"><div class="danger"></div> <a href="javascript:;"><a target="_blank" href="https://dev.stockbangladesh.com/company-details/510">BSCCL</a></a></td>
                                        <td> <div class="btn-group">
                     <button class="btn green btn-sm dropdown-toggle" type="button" data-toggle="dropdown" aria-expanded="false"> Go To
                         <i class="fa fa-angle-down"></i>
                     </button>
                     <ul class="dropdown-menu" role="menu">
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/ta-chart?instrumentCode=BSCCL"> TA Chart </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/advance-ta-chart?instrumentCode=BSCCL"> Advance TA Chart </a>
                         </li>
                                                  <li>
                                                      <a target="_blank" href="https://dev.stockbangladesh.com/minute-chart/510"> Minute Chart </a>
                                                  </li>

                                                  <li>
                                                      <a target="_blank" href="https://dev.stockbangladesh.com/news-chart/510"> News Chart </a>
                                                  </li>



                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/company-details/510"> Company Details </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/fundamental-details/510"> Fundamental Details </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/news/search?keyword=&amp;instrument_id=510&amp;from_date=&amp;to_date="> News</a>
                         </li>
                         <li class="divider"> </li>
                         <li>
                             <a href="javascript:;"> Separated link </a>
                         </li>
                     </ul>
                 </div>
                 </td>
                <td> 90.6 </td>
                <td> 90.8 </td>
                <td> 90.2 </td>
                <td> 90.6 </td>
                <td> 90.7 </td>
                <td class="font-red-haze"> -0.1 </td>
                <td class="font-red-haze"> -0.11% </td>
                <td> 156 </td>
                <td> 2.752 </td>
                <td> 30392 </td>
                <td> 17-May, 14:30 </td>
            </tr>
                    <tr>
            
                <td class="highlight"><div class="success"></div> <a href="javascript:;"><a target="_blank" href="https://dev.stockbangladesh.com/company-details/30011">BSRMLTD</a></a></td>
                                                    <td> <div class="btn-group">
                     <button class="btn green btn-sm dropdown-toggle" type="button" data-toggle="dropdown" aria-expanded="false"> Go To
                         <i class="fa fa-angle-down"></i>
                     </button>
                     <ul class="dropdown-menu" role="menu">
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/ta-chart?instrumentCode=BSRMLTD"> TA Chart </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/advance-ta-chart?instrumentCode=BSRMLTD"> Advance TA Chart </a>
                         </li>
                                                  <li>
                                                      <a target="_blank" href="https://dev.stockbangladesh.com/minute-chart/30011"> Minute Chart </a>
                                                  </li>

                                                  <li>
                                                      <a target="_blank" href="https://dev.stockbangladesh.com/news-chart/30011"> News Chart </a>
                                                  </li>



                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/company-details/30011"> Company Details </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/fundamental-details/30011"> Fundamental Details </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/news/search?keyword=&amp;instrument_id=30011&amp;from_date=&amp;to_date="> News</a>
                         </li>
                         <li class="divider"> </li>
                         <li>
                             <a href="javascript:;"> Separated link </a>
                         </li>
                     </ul>
                 </div>
                 </td>
                <td> 117.1 </td>
                <td> 120.6 </td>
                <td> 114 </td>
                <td> 116.9 </td>
                <td> 114.6 </td>
                <td class="font-green-jungle"> 2.3 </td>
                <td class="font-green-jungle"> 2.01% </td>
                <td> 4382 </td>
                <td> 305.469 </td>
                <td> 2590633 </td>
                <td> 17-May, 14:30 </td>
            </tr>
                    <tr>
                                        <td class="highlight"><div class="danger"></div> <a href="javascript:;"><a target="_blank" href="https://dev.stockbangladesh.com/company-details/53">BSRMSTEEL</a></a></td>
                                        <td> <div class="btn-group">
                     <button class="btn green btn-sm dropdown-toggle" type="button" data-toggle="dropdown" aria-expanded="false"> Go To
                         <i class="fa fa-angle-down"></i>
                     </button>
                     <ul class="dropdown-menu" role="menu">
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/ta-chart?instrumentCode=BSRMSTEEL"> TA Chart </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/advance-ta-chart?instrumentCode=BSRMSTEEL"> Advance TA Chart </a>
                         </li>
                                                  <li>
                                                      <a target="_blank" href="https://dev.stockbangladesh.com/minute-chart/53"> Minute Chart </a>
                                                  </li>

                                                  <li>
                                                      <a target="_blank" href="https://dev.stockbangladesh.com/news-chart/53"> News Chart </a>
                                                  </li>



                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/company-details/53"> Company Details </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/fundamental-details/53"> Fundamental Details </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/news/search?keyword=&amp;instrument_id=53&amp;from_date=&amp;to_date="> News</a>
                         </li>
                         <li class="divider"> </li>
                         <li>
                             <a href="javascript:;"> Separated link </a>
                         </li>
                     </ul>
                 </div>
                 </td>
                <td> 73.2 </td>
                <td> 74.8 </td>
                <td> 73.2 </td>
                <td> 73.5 </td>
                <td> 74.1 </td>
                <td class="font-red-haze"> -0.6 </td>
                <td class="font-red-haze"> -0.81% </td>
                <td> 264 </td>
                <td> 14.745 </td>
                <td> 198211 </td>
                <td> 17-May, 14:30 </td>
            </tr>
                    <tr>
                                        <td class="highlight"><div class="danger"></div> <a href="javascript:;"><a target="_blank" href="https://dev.stockbangladesh.com/company-details/54">BXPHARMA</a></a></td>
                                        <td> <div class="btn-group">
                     <button class="btn green btn-sm dropdown-toggle" type="button" data-toggle="dropdown" aria-expanded="false"> Go To
                         <i class="fa fa-angle-down"></i>
                     </button>
                     <ul class="dropdown-menu" role="menu">
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/ta-chart?instrumentCode=BXPHARMA"> TA Chart </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/advance-ta-chart?instrumentCode=BXPHARMA"> Advance TA Chart </a>
                         </li>
                                                  <li>
                                                      <a target="_blank" href="https://dev.stockbangladesh.com/minute-chart/54"> Minute Chart </a>
                                                  </li>

                                                  <li>
                                                      <a target="_blank" href="https://dev.stockbangladesh.com/news-chart/54"> News Chart </a>
                                                  </li>



                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/company-details/54"> Company Details </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/fundamental-details/54"> Fundamental Details </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/news/search?keyword=&amp;instrument_id=54&amp;from_date=&amp;to_date="> News</a>
                         </li>
                         <li class="divider"> </li>
                         <li>
                             <a href="javascript:;"> Separated link </a>
                         </li>
                     </ul>
                 </div>
                 </td>
                <td> 100 </td>
                <td> 104 </td>
                <td> 99 </td>
                <td> 99.9 </td>
                <td> 102.8 </td>
                <td class="font-red-haze"> -2.9 </td>
                <td class="font-red-haze"> -2.82% </td>
                <td> 322 </td>
                <td> 18.542 </td>
                <td> 183070 </td>
                <td> 17-May, 14:30 </td>
            </tr>
                    <tr>
                                        <td class="highlight"><div class="danger"></div> <a href="javascript:;"><a target="_blank" href="https://dev.stockbangladesh.com/company-details/55">BXSYNTH</a></a></td>
                                        <td> <div class="btn-group">
                     <button class="btn green btn-sm dropdown-toggle" type="button" data-toggle="dropdown" aria-expanded="false"> Go To
                         <i class="fa fa-angle-down"></i>
                     </button>
                     <ul class="dropdown-menu" role="menu">
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/ta-chart?instrumentCode=BXSYNTH"> TA Chart </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/advance-ta-chart?instrumentCode=BXSYNTH"> Advance TA Chart </a>
                         </li>
                                                  <li>
                                                      <a target="_blank" href="https://dev.stockbangladesh.com/minute-chart/55"> Minute Chart </a>
                                                  </li>

                                                  <li>
                                                      <a target="_blank" href="https://dev.stockbangladesh.com/news-chart/55"> News Chart </a>
                                                  </li>



                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/company-details/55"> Company Details </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/fundamental-details/55"> Fundamental Details </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/news/search?keyword=&amp;instrument_id=55&amp;from_date=&amp;to_date="> News</a>
                         </li>
                         <li class="divider"> </li>
                         <li>
                             <a href="javascript:;"> Separated link </a>
                         </li>
                     </ul>
                 </div>
                 </td>
                <td> 9.9 </td>
                <td> 10.2 </td>
                <td> 9.8 </td>
                <td> 9.9 </td>
                <td> 10 </td>
                <td class="font-red-haze"> -0.1 </td>
                <td class="font-red-haze"> -1% </td>
                <td> 49 </td>
                <td> 0.393 </td>
                <td> 39786 </td>
                <td> 17-May, 14:30 </td>
            </tr>
                    <tr>
                                                    <td class="highlight"><div class="info"></div> <a href="javascript:;"><a target="_blank" href="https://dev.stockbangladesh.com/company-details/30029">CAPMBDBLMF</a></a></td>
                            <td> <div class="btn-group">
                     <button class="btn green btn-sm dropdown-toggle" type="button" data-toggle="dropdown" aria-expanded="false"> Go To
                         <i class="fa fa-angle-down"></i>
                     </button>
                     <ul class="dropdown-menu" role="menu">
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/ta-chart?instrumentCode=CAPMBDBLMF"> TA Chart </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/advance-ta-chart?instrumentCode=CAPMBDBLMF"> Advance TA Chart </a>
                         </li>
                                                  <li>
                                                      <a target="_blank" href="https://dev.stockbangladesh.com/minute-chart/30029"> Minute Chart </a>
                                                  </li>

                                                  <li>
                                                      <a target="_blank" href="https://dev.stockbangladesh.com/news-chart/30029"> News Chart </a>
                                                  </li>



                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/company-details/30029"> Company Details </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/fundamental-details/30029"> Fundamental Details </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/news/search?keyword=&amp;instrument_id=30029&amp;from_date=&amp;to_date="> News</a>
                         </li>
                         <li class="divider"> </li>
                         <li>
                             <a href="javascript:;"> Separated link </a>
                         </li>
                     </ul>
                 </div>
                 </td>
                <td> 8.1 </td>
                <td> 8.1 </td>
                <td> 8 </td>
                <td> 8.1 </td>
                <td> 8.1 </td>
                <td class="font-green-jungle"> 0 </td>
                <td class="font-green-jungle"> 0% </td>
                <td> 25 </td>
                <td> 0.369 </td>
                <td> 45650 </td>
                <td> 17-May, 14:30 </td>
            </tr>
                    <tr>
                                        <td class="highlight"><div class="danger"></div> <a href="javascript:;"><a target="_blank" href="https://dev.stockbangladesh.com/company-details/30192">CAPMIBBLMF</a></a></td>
                                        <td> <div class="btn-group">
                     <button class="btn green btn-sm dropdown-toggle" type="button" data-toggle="dropdown" aria-expanded="false"> Go To
                         <i class="fa fa-angle-down"></i>
                     </button>
                     <ul class="dropdown-menu" role="menu">
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/ta-chart?instrumentCode=CAPMIBBLMF"> TA Chart </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/advance-ta-chart?instrumentCode=CAPMIBBLMF"> Advance TA Chart </a>
                         </li>
                                                  <li>
                                                      <a target="_blank" href="https://dev.stockbangladesh.com/minute-chart/30192"> Minute Chart </a>
                                                  </li>

                                                  <li>
                                                      <a target="_blank" href="https://dev.stockbangladesh.com/news-chart/30192"> News Chart </a>
                                                  </li>



                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/company-details/30192"> Company Details </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/fundamental-details/30192"> Fundamental Details </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/news/search?keyword=&amp;instrument_id=30192&amp;from_date=&amp;to_date="> News</a>
                         </li>
                         <li class="divider"> </li>
                         <li>
                             <a href="javascript:;"> Separated link </a>
                         </li>
                     </ul>
                 </div>
                 </td>
                <td> 9.1 </td>
                <td> 9.3 </td>
                <td> 8.9 </td>
                <td> 9 </td>
                <td> 9.2 </td>
                <td class="font-red-haze"> -0.2 </td>
                <td class="font-red-haze"> -2.17% </td>
                <td> 206 </td>
                <td> 3.064 </td>
                <td> 336284 </td>
                <td> 17-May, 14:30 </td>
            </tr>
                    <tr>
                                        <td class="highlight"><div class="danger"></div> <a href="javascript:;"><a target="_blank" href="https://dev.stockbangladesh.com/company-details/56">CENTRALINS</a></a></td>
                                        <td> <div class="btn-group">
                     <button class="btn green btn-sm dropdown-toggle" type="button" data-toggle="dropdown" aria-expanded="false"> Go To
                         <i class="fa fa-angle-down"></i>
                     </button>
                     <ul class="dropdown-menu" role="menu">
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/ta-chart?instrumentCode=CENTRALINS"> TA Chart </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/advance-ta-chart?instrumentCode=CENTRALINS"> Advance TA Chart </a>
                         </li>
                                                  <li>
                                                      <a target="_blank" href="https://dev.stockbangladesh.com/minute-chart/56"> Minute Chart </a>
                                                  </li>

                                                  <li>
                                                      <a target="_blank" href="https://dev.stockbangladesh.com/news-chart/56"> News Chart </a>
                                                  </li>



                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/company-details/56"> Company Details </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/fundamental-details/56"> Fundamental Details </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/news/search?keyword=&amp;instrument_id=56&amp;from_date=&amp;to_date="> News</a>
                         </li>
                         <li class="divider"> </li>
                         <li>
                             <a href="javascript:;"> Separated link </a>
                         </li>
                     </ul>
                 </div>
                 </td>
                <td> 20.1 </td>
                <td> 21.6 </td>
                <td> 20 </td>
                <td> 20.1 </td>
                <td> 20.4 </td>
                <td class="font-red-haze"> -0.3 </td>
                <td class="font-red-haze"> -1.47% </td>
                <td> 12 </td>
                <td> 0.217 </td>
                <td> 10791 </td>
                <td> 17-May, 14:30 </td>
            </tr>
                    <tr>
                                        <td class="highlight"><div class="danger"></div> <a href="javascript:;"><a target="_blank" href="https://dev.stockbangladesh.com/company-details/527">CENTRALPHL</a></a></td>
                                        <td> <div class="btn-group">
                     <button class="btn green btn-sm dropdown-toggle" type="button" data-toggle="dropdown" aria-expanded="false"> Go To
                         <i class="fa fa-angle-down"></i>
                     </button>
                     <ul class="dropdown-menu" role="menu">
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/ta-chart?instrumentCode=CENTRALPHL"> TA Chart </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/advance-ta-chart?instrumentCode=CENTRALPHL"> Advance TA Chart </a>
                         </li>
                                                  <li>
                                                      <a target="_blank" href="https://dev.stockbangladesh.com/minute-chart/527"> Minute Chart </a>
                                                  </li>

                                                  <li>
                                                      <a target="_blank" href="https://dev.stockbangladesh.com/news-chart/527"> News Chart </a>
                                                  </li>



                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/company-details/527"> Company Details </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/fundamental-details/527"> Fundamental Details </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/news/search?keyword=&amp;instrument_id=527&amp;from_date=&amp;to_date="> News</a>
                         </li>
                         <li class="divider"> </li>
                         <li>
                             <a href="javascript:;"> Separated link </a>
                         </li>
                     </ul>
                 </div>
                 </td>
                <td> 14.9 </td>
                <td> 15.1 </td>
                <td> 14.7 </td>
                <td> 14.8 </td>
                <td> 15 </td>
                <td class="font-red-haze"> -0.2 </td>
                <td class="font-red-haze"> -1.33% </td>
                <td> 195 </td>
                <td> 3.808 </td>
                <td> 255261 </td>
                <td> 17-May, 14:30 </td>
            </tr>
                    <tr>
                                                    <td class="highlight"><div class="info"></div> <a href="javascript:;"><a target="_blank" href="https://dev.stockbangladesh.com/company-details/57">CITYBANK</a></a></td>
                            <td> <div class="btn-group">
                     <button class="btn green btn-sm dropdown-toggle" type="button" data-toggle="dropdown" aria-expanded="false"> Go To
                         <i class="fa fa-angle-down"></i>
                     </button>
                     <ul class="dropdown-menu" role="menu">
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/ta-chart?instrumentCode=CITYBANK"> TA Chart </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/advance-ta-chart?instrumentCode=CITYBANK"> Advance TA Chart </a>
                         </li>
                                                  <li>
                                                      <a target="_blank" href="https://dev.stockbangladesh.com/minute-chart/57"> Minute Chart </a>
                                                  </li>

                                                  <li>
                                                      <a target="_blank" href="https://dev.stockbangladesh.com/news-chart/57"> News Chart </a>
                                                  </li>



                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/company-details/57"> Company Details </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/fundamental-details/57"> Fundamental Details </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/news/search?keyword=&amp;instrument_id=57&amp;from_date=&amp;to_date="> News</a>
                         </li>
                         <li class="divider"> </li>
                         <li>
                             <a href="javascript:;"> Separated link </a>
                         </li>
                     </ul>
                 </div>
                 </td>
                <td> 34.2 </td>
                <td> 34.3 </td>
                <td> 33.8 </td>
                <td> 34.1 </td>
                <td> 34.2 </td>
                <td class="font-red-haze"> -0.1 </td>
                <td class="font-red-haze"> -0.29% </td>
                <td> 397 </td>
                <td> 19.021 </td>
                <td> 557842 </td>
                <td> 17-May, 14:30 </td>
            </tr>
                    <tr>
                                        <td class="highlight"><div class="danger"></div> <a href="javascript:;"><a target="_blank" href="https://dev.stockbangladesh.com/company-details/58">CITYGENINS</a></a></td>
                                        <td> <div class="btn-group">
                     <button class="btn green btn-sm dropdown-toggle" type="button" data-toggle="dropdown" aria-expanded="false"> Go To
                         <i class="fa fa-angle-down"></i>
                     </button>
                     <ul class="dropdown-menu" role="menu">
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/ta-chart?instrumentCode=CITYGENINS"> TA Chart </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/advance-ta-chart?instrumentCode=CITYGENINS"> Advance TA Chart </a>
                         </li>
                                                  <li>
                                                      <a target="_blank" href="https://dev.stockbangladesh.com/minute-chart/58"> Minute Chart </a>
                                                  </li>

                                                  <li>
                                                      <a target="_blank" href="https://dev.stockbangladesh.com/news-chart/58"> News Chart </a>
                                                  </li>



                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/company-details/58"> Company Details </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/fundamental-details/58"> Fundamental Details </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/news/search?keyword=&amp;instrument_id=58&amp;from_date=&amp;to_date="> News</a>
                         </li>
                         <li class="divider"> </li>
                         <li>
                             <a href="javascript:;"> Separated link </a>
                         </li>
                     </ul>
                 </div>
                 </td>
                <td> 14 </td>
                <td> 14.2 </td>
                <td> 13.8 </td>
                <td> 14 </td>
                <td> 14.1 </td>
                <td class="font-red-haze"> -0.1 </td>
                <td class="font-red-haze"> -0.71% </td>
                <td> 61 </td>
                <td> 0.834 </td>
                <td> 59196 </td>
                <td> 17-May, 14:30 </td>
            </tr>
                    <tr>
                                        <td class="highlight"><div class="danger"></div> <a href="javascript:;"><a target="_blank" href="https://dev.stockbangladesh.com/company-details/30005">CNATEX</a></a></td>
                                        <td> <div class="btn-group">
                     <button class="btn green btn-sm dropdown-toggle" type="button" data-toggle="dropdown" aria-expanded="false"> Go To
                         <i class="fa fa-angle-down"></i>
                     </button>
                     <ul class="dropdown-menu" role="menu">
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/ta-chart?instrumentCode=CNATEX"> TA Chart </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/advance-ta-chart?instrumentCode=CNATEX"> Advance TA Chart </a>
                         </li>
                                                  <li>
                                                      <a target="_blank" href="https://dev.stockbangladesh.com/minute-chart/30005"> Minute Chart </a>
                                                  </li>

                                                  <li>
                                                      <a target="_blank" href="https://dev.stockbangladesh.com/news-chart/30005"> News Chart </a>
                                                  </li>



                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/company-details/30005"> Company Details </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/fundamental-details/30005"> Fundamental Details </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/news/search?keyword=&amp;instrument_id=30005&amp;from_date=&amp;to_date="> News</a>
                         </li>
                         <li class="divider"> </li>
                         <li>
                             <a href="javascript:;"> Separated link </a>
                         </li>
                     </ul>
                 </div>
                 </td>
                <td> 6.6 </td>
                <td> 6.9 </td>
                <td> 6.5 </td>
                <td> 6.5 </td>
                <td> 6.8 </td>
                <td class="font-red-haze"> -0.3 </td>
                <td class="font-red-haze"> -4.41% </td>
                <td> 240 </td>
                <td> 3.74 </td>
                <td> 565777 </td>
                <td> 17-May, 14:30 </td>
            </tr>
                    <tr>
                                        <td class="highlight"><div class="danger"></div> <a href="javascript:;"><a target="_blank" href="https://dev.stockbangladesh.com/company-details/60">CONFIDCEM</a></a></td>
                                        <td> <div class="btn-group">
                     <button class="btn green btn-sm dropdown-toggle" type="button" data-toggle="dropdown" aria-expanded="false"> Go To
                         <i class="fa fa-angle-down"></i>
                     </button>
                     <ul class="dropdown-menu" role="menu">
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/ta-chart?instrumentCode=CONFIDCEM"> TA Chart </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/advance-ta-chart?instrumentCode=CONFIDCEM"> Advance TA Chart </a>
                         </li>
                                                  <li>
                                                      <a target="_blank" href="https://dev.stockbangladesh.com/minute-chart/60"> Minute Chart </a>
                                                  </li>

                                                  <li>
                                                      <a target="_blank" href="https://dev.stockbangladesh.com/news-chart/60"> News Chart </a>
                                                  </li>



                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/company-details/60"> Company Details </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/fundamental-details/60"> Fundamental Details </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/news/search?keyword=&amp;instrument_id=60&amp;from_date=&amp;to_date="> News</a>
                         </li>
                         <li class="divider"> </li>
                         <li>
                             <a href="javascript:;"> Separated link </a>
                         </li>
                     </ul>
                 </div>
                 </td>
                <td> 147 </td>
                <td> 149.4 </td>
                <td> 145.4 </td>
                <td> 146.4 </td>
                <td> 149.1 </td>
                <td class="font-red-haze"> -2.7 </td>
                <td class="font-red-haze"> -1.81% </td>
                <td> 217 </td>
                <td> 7.553 </td>
                <td> 51092 </td>
                <td> 17-May, 14:30 </td>
            </tr>
                    <tr>
                                        <td class="highlight"><div class="danger"></div> <a href="javascript:;"><a target="_blank" href="https://dev.stockbangladesh.com/company-details/71">CONTININS</a></a></td>
                                        <td> <div class="btn-group">
                     <button class="btn green btn-sm dropdown-toggle" type="button" data-toggle="dropdown" aria-expanded="false"> Go To
                         <i class="fa fa-angle-down"></i>
                     </button>
                     <ul class="dropdown-menu" role="menu">
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/ta-chart?instrumentCode=CONTININS"> TA Chart </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/advance-ta-chart?instrumentCode=CONTININS"> Advance TA Chart </a>
                         </li>
                                                  <li>
                                                      <a target="_blank" href="https://dev.stockbangladesh.com/minute-chart/71"> Minute Chart </a>
                                                  </li>

                                                  <li>
                                                      <a target="_blank" href="https://dev.stockbangladesh.com/news-chart/71"> News Chart </a>
                                                  </li>



                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/company-details/71"> Company Details </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/fundamental-details/71"> Fundamental Details </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/news/search?keyword=&amp;instrument_id=71&amp;from_date=&amp;to_date="> News</a>
                         </li>
                         <li class="divider"> </li>
                         <li>
                             <a href="javascript:;"> Separated link </a>
                         </li>
                     </ul>
                 </div>
                 </td>
                <td> 0 </td>
                <td> 17 </td>
                <td> 16.3 </td>
                <td> 16.5 </td>
                <td> 16.6 </td>
                <td class="font-red-haze"> -0.1 </td>
                <td class="font-red-haze"> -0.6% </td>
                <td> 24 </td>
                <td> 0.295 </td>
                <td> 17772 </td>
                <td> 17-May, 14:30 </td>
            </tr>
                    <tr>
                                        <td class="highlight"><div class="danger"></div> <a href="javascript:;"><a target="_blank" href="https://dev.stockbangladesh.com/company-details/72">CVOPRL</a></a></td>
                                        <td> <div class="btn-group">
                     <button class="btn green btn-sm dropdown-toggle" type="button" data-toggle="dropdown" aria-expanded="false"> Go To
                         <i class="fa fa-angle-down"></i>
                     </button>
                     <ul class="dropdown-menu" role="menu">
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/ta-chart?instrumentCode=CVOPRL"> TA Chart </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/advance-ta-chart?instrumentCode=CVOPRL"> Advance TA Chart </a>
                         </li>
                                                  <li>
                                                      <a target="_blank" href="https://dev.stockbangladesh.com/minute-chart/72"> Minute Chart </a>
                                                  </li>

                                                  <li>
                                                      <a target="_blank" href="https://dev.stockbangladesh.com/news-chart/72"> News Chart </a>
                                                  </li>



                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/company-details/72"> Company Details </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/fundamental-details/72"> Fundamental Details </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/news/search?keyword=&amp;instrument_id=72&amp;from_date=&amp;to_date="> News</a>
                         </li>
                         <li class="divider"> </li>
                         <li>
                             <a href="javascript:;"> Separated link </a>
                         </li>
                     </ul>
                 </div>
                 </td>
                <td> 206.7 </td>
                <td> 210 </td>
                <td> 205.3 </td>
                <td> 206.1 </td>
                <td> 207.7 </td>
                <td class="font-red-haze"> -1.6 </td>
                <td class="font-red-haze"> -0.77% </td>
                <td> 735 </td>
                <td> 14.331 </td>
                <td> 69363 </td>
                <td> 17-May, 14:30 </td>
            </tr>
                    <tr>
                                        <td class="highlight"><div class="danger"></div> <a href="javascript:;"><a target="_blank" href="https://dev.stockbangladesh.com/company-details/73">DACCADYE</a></a></td>
                                        <td> <div class="btn-group">
                     <button class="btn green btn-sm dropdown-toggle" type="button" data-toggle="dropdown" aria-expanded="false"> Go To
                         <i class="fa fa-angle-down"></i>
                     </button>
                     <ul class="dropdown-menu" role="menu">
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/ta-chart?instrumentCode=DACCADYE"> TA Chart </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/advance-ta-chart?instrumentCode=DACCADYE"> Advance TA Chart </a>
                         </li>
                                                  <li>
                                                      <a target="_blank" href="https://dev.stockbangladesh.com/minute-chart/73"> Minute Chart </a>
                                                  </li>

                                                  <li>
                                                      <a target="_blank" href="https://dev.stockbangladesh.com/news-chart/73"> News Chart </a>
                                                  </li>



                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/company-details/73"> Company Details </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/fundamental-details/73"> Fundamental Details </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/news/search?keyword=&amp;instrument_id=73&amp;from_date=&amp;to_date="> News</a>
                         </li>
                         <li class="divider"> </li>
                         <li>
                             <a href="javascript:;"> Separated link </a>
                         </li>
                     </ul>
                 </div>
                 </td>
                <td> 7.8 </td>
                <td> 8 </td>
                <td> 7.7 </td>
                <td> 7.8 </td>
                <td> 8 </td>
                <td class="font-red-haze"> -0.2 </td>
                <td class="font-red-haze"> -2.5% </td>
                <td> 47 </td>
                <td> 0.459 </td>
                <td> 58831 </td>
                <td> 17-May, 14:30 </td>
            </tr>
                    <tr>
                                        <td class="highlight"><div class="danger"></div> <a href="javascript:;"><a target="_blank" href="https://dev.stockbangladesh.com/company-details/74">DAFODILCOM</a></a></td>
                                        <td> <div class="btn-group">
                     <button class="btn green btn-sm dropdown-toggle" type="button" data-toggle="dropdown" aria-expanded="false"> Go To
                         <i class="fa fa-angle-down"></i>
                     </button>
                     <ul class="dropdown-menu" role="menu">
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/ta-chart?instrumentCode=DAFODILCOM"> TA Chart </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/advance-ta-chart?instrumentCode=DAFODILCOM"> Advance TA Chart </a>
                         </li>
                                                  <li>
                                                      <a target="_blank" href="https://dev.stockbangladesh.com/minute-chart/74"> Minute Chart </a>
                                                  </li>

                                                  <li>
                                                      <a target="_blank" href="https://dev.stockbangladesh.com/news-chart/74"> News Chart </a>
                                                  </li>



                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/company-details/74"> Company Details </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/fundamental-details/74"> Fundamental Details </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/news/search?keyword=&amp;instrument_id=74&amp;from_date=&amp;to_date="> News</a>
                         </li>
                         <li class="divider"> </li>
                         <li>
                             <a href="javascript:;"> Separated link </a>
                         </li>
                     </ul>
                 </div>
                 </td>
                <td> 36.8 </td>
                <td> 37.7 </td>
                <td> 36.5 </td>
                <td> 36.7 </td>
                <td> 37.7 </td>
                <td class="font-red-haze"> -1 </td>
                <td class="font-red-haze"> -2.65% </td>
                <td> 292 </td>
                <td> 10.476 </td>
                <td> 283342 </td>
                <td> 17-May, 14:30 </td>
            </tr>
                    <tr>
                                        <td class="highlight"><div class="danger"></div> <a href="javascript:;"><a target="_blank" href="https://dev.stockbangladesh.com/company-details/75">DBH</a></a></td>
                                        <td> <div class="btn-group">
                     <button class="btn green btn-sm dropdown-toggle" type="button" data-toggle="dropdown" aria-expanded="false"> Go To
                         <i class="fa fa-angle-down"></i>
                     </button>
                     <ul class="dropdown-menu" role="menu">
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/ta-chart?instrumentCode=DBH"> TA Chart </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/advance-ta-chart?instrumentCode=DBH"> Advance TA Chart </a>
                         </li>
                                                  <li>
                                                      <a target="_blank" href="https://dev.stockbangladesh.com/minute-chart/75"> Minute Chart </a>
                                                  </li>

                                                  <li>
                                                      <a target="_blank" href="https://dev.stockbangladesh.com/news-chart/75"> News Chart </a>
                                                  </li>



                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/company-details/75"> Company Details </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/fundamental-details/75"> Fundamental Details </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/news/search?keyword=&amp;instrument_id=75&amp;from_date=&amp;to_date="> News</a>
                         </li>
                         <li class="divider"> </li>
                         <li>
                             <a href="javascript:;"> Separated link </a>
                         </li>
                     </ul>
                 </div>
                 </td>
                <td> 133.8 </td>
                <td> 134.1 </td>
                <td> 133.8 </td>
                <td> 133.9 </td>
                <td> 135 </td>
                <td class="font-red-haze"> -1.1 </td>
                <td class="font-red-haze"> -0.81% </td>
                <td> 70 </td>
                <td> 2.479 </td>
                <td> 18499 </td>
                <td> 17-May, 14:30 </td>
            </tr>
                    <tr>
                                        <td class="highlight"><div class="danger"></div> <a href="javascript:;"><a target="_blank" href="https://dev.stockbangladesh.com/company-details/76">DBH1STMF</a></a></td>
                                        <td> <div class="btn-group">
                     <button class="btn green btn-sm dropdown-toggle" type="button" data-toggle="dropdown" aria-expanded="false"> Go To
                         <i class="fa fa-angle-down"></i>
                     </button>
                     <ul class="dropdown-menu" role="menu">
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/ta-chart?instrumentCode=DBH1STMF"> TA Chart </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/advance-ta-chart?instrumentCode=DBH1STMF"> Advance TA Chart </a>
                         </li>
                                                  <li>
                                                      <a target="_blank" href="https://dev.stockbangladesh.com/minute-chart/76"> Minute Chart </a>
                                                  </li>

                                                  <li>
                                                      <a target="_blank" href="https://dev.stockbangladesh.com/news-chart/76"> News Chart </a>
                                                  </li>



                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/company-details/76"> Company Details </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/fundamental-details/76"> Fundamental Details </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/news/search?keyword=&amp;instrument_id=76&amp;from_date=&amp;to_date="> News</a>
                         </li>
                         <li class="divider"> </li>
                         <li>
                             <a href="javascript:;"> Separated link </a>
                         </li>
                     </ul>
                 </div>
                 </td>
                <td> 9.6 </td>
                <td> 9.8 </td>
                <td> 9.4 </td>
                <td> 9.6 </td>
                <td> 9.7 </td>
                <td class="font-red-haze"> -0.1 </td>
                <td class="font-red-haze"> -1.03% </td>
                <td> 13 </td>
                <td> 1.785 </td>
                <td> 185957 </td>
                <td> 17-May, 14:30 </td>
            </tr>
                    <tr>
                                        <td class="highlight"><div class="danger"></div> <a href="javascript:;"><a target="_blank" href="https://dev.stockbangladesh.com/company-details/77">DELTALIFE</a></a></td>
                                        <td> <div class="btn-group">
                     <button class="btn green btn-sm dropdown-toggle" type="button" data-toggle="dropdown" aria-expanded="false"> Go To
                         <i class="fa fa-angle-down"></i>
                     </button>
                     <ul class="dropdown-menu" role="menu">
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/ta-chart?instrumentCode=DELTALIFE"> TA Chart </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/advance-ta-chart?instrumentCode=DELTALIFE"> Advance TA Chart </a>
                         </li>
                                                  <li>
                                                      <a target="_blank" href="https://dev.stockbangladesh.com/minute-chart/77"> Minute Chart </a>
                                                  </li>

                                                  <li>
                                                      <a target="_blank" href="https://dev.stockbangladesh.com/news-chart/77"> News Chart </a>
                                                  </li>



                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/company-details/77"> Company Details </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/fundamental-details/77"> Fundamental Details </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/news/search?keyword=&amp;instrument_id=77&amp;from_date=&amp;to_date="> News</a>
                         </li>
                         <li class="divider"> </li>
                         <li>
                             <a href="javascript:;"> Separated link </a>
                         </li>
                     </ul>
                 </div>
                 </td>
                <td> 0 </td>
                <td> 105 </td>
                <td> 101.1 </td>
                <td> 101.6 </td>
                <td> 103.1 </td>
                <td class="font-red-haze"> -1.5 </td>
                <td class="font-red-haze"> -1.45% </td>
                <td> 238 </td>
                <td> 9.237 </td>
                <td> 90112 </td>
                <td> 16-May, 14:30 </td>
            </tr>
                    <tr>
                                        <td class="highlight"><div class="danger"></div> <a href="javascript:;"><a target="_blank" href="https://dev.stockbangladesh.com/company-details/78">DELTASPINN</a></a></td>
                                        <td> <div class="btn-group">
                     <button class="btn green btn-sm dropdown-toggle" type="button" data-toggle="dropdown" aria-expanded="false"> Go To
                         <i class="fa fa-angle-down"></i>
                     </button>
                     <ul class="dropdown-menu" role="menu">
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/ta-chart?instrumentCode=DELTASPINN"> TA Chart </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/advance-ta-chart?instrumentCode=DELTASPINN"> Advance TA Chart </a>
                         </li>
                                                  <li>
                                                      <a target="_blank" href="https://dev.stockbangladesh.com/minute-chart/78"> Minute Chart </a>
                                                  </li>

                                                  <li>
                                                      <a target="_blank" href="https://dev.stockbangladesh.com/news-chart/78"> News Chart </a>
                                                  </li>



                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/company-details/78"> Company Details </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/fundamental-details/78"> Fundamental Details </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/news/search?keyword=&amp;instrument_id=78&amp;from_date=&amp;to_date="> News</a>
                         </li>
                         <li class="divider"> </li>
                         <li>
                             <a href="javascript:;"> Separated link </a>
                         </li>
                     </ul>
                 </div>
                 </td>
                <td> 8.5 </td>
                <td> 8.8 </td>
                <td> 8.5 </td>
                <td> 8.5 </td>
                <td> 8.7 </td>
                <td class="font-red-haze"> -0.2 </td>
                <td class="font-red-haze"> -2.3% </td>
                <td> 166 </td>
                <td> 3.374 </td>
                <td> 393183 </td>
                <td> 17-May, 14:30 </td>
            </tr>
                    <tr>
                                        <td class="highlight"><div class="danger"></div> <a href="javascript:;"><a target="_blank" href="https://dev.stockbangladesh.com/company-details/79">DESCO</a></a></td>
                                        <td> <div class="btn-group">
                     <button class="btn green btn-sm dropdown-toggle" type="button" data-toggle="dropdown" aria-expanded="false"> Go To
                         <i class="fa fa-angle-down"></i>
                     </button>
                     <ul class="dropdown-menu" role="menu">
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/ta-chart?instrumentCode=DESCO"> TA Chart </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/advance-ta-chart?instrumentCode=DESCO"> Advance TA Chart </a>
                         </li>
                                                  <li>
                                                      <a target="_blank" href="https://dev.stockbangladesh.com/minute-chart/79"> Minute Chart </a>
                                                  </li>

                                                  <li>
                                                      <a target="_blank" href="https://dev.stockbangladesh.com/news-chart/79"> News Chart </a>
                                                  </li>



                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/company-details/79"> Company Details </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/fundamental-details/79"> Fundamental Details </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/news/search?keyword=&amp;instrument_id=79&amp;from_date=&amp;to_date="> News</a>
                         </li>
                         <li class="divider"> </li>
                         <li>
                             <a href="javascript:;"> Separated link </a>
                         </li>
                     </ul>
                 </div>
                 </td>
                <td> 42 </td>
                <td> 42.1 </td>
                <td> 41.6 </td>
                <td> 42 </td>
                <td> 42.2 </td>
                <td class="font-red-haze"> -0.2 </td>
                <td class="font-red-haze"> -0.47% </td>
                <td> 37 </td>
                <td> 0.928 </td>
                <td> 22140 </td>
                <td> 17-May, 14:30 </td>
            </tr>
                    <tr>
                                        <td class="highlight"><div class="danger"></div> <a href="javascript:;"><a target="_blank" href="https://dev.stockbangladesh.com/company-details/80">DESHBANDHU</a></a></td>
                                        <td> <div class="btn-group">
                     <button class="btn green btn-sm dropdown-toggle" type="button" data-toggle="dropdown" aria-expanded="false"> Go To
                         <i class="fa fa-angle-down"></i>
                     </button>
                     <ul class="dropdown-menu" role="menu">
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/ta-chart?instrumentCode=DESHBANDHU"> TA Chart </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/advance-ta-chart?instrumentCode=DESHBANDHU"> Advance TA Chart </a>
                         </li>
                                                  <li>
                                                      <a target="_blank" href="https://dev.stockbangladesh.com/minute-chart/80"> Minute Chart </a>
                                                  </li>

                                                  <li>
                                                      <a target="_blank" href="https://dev.stockbangladesh.com/news-chart/80"> News Chart </a>
                                                  </li>



                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/company-details/80"> Company Details </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/fundamental-details/80"> Fundamental Details </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/news/search?keyword=&amp;instrument_id=80&amp;from_date=&amp;to_date="> News</a>
                         </li>
                         <li class="divider"> </li>
                         <li>
                             <a href="javascript:;"> Separated link </a>
                         </li>
                     </ul>
                 </div>
                 </td>
                <td> 16.9 </td>
                <td> 17.5 </td>
                <td> 16.8 </td>
                <td> 16.9 </td>
                <td> 17.5 </td>
                <td class="font-red-haze"> -0.6 </td>
                <td class="font-red-haze"> -3.43% </td>
                <td> 382 </td>
                <td> 6.867 </td>
                <td> 403601 </td>
                <td> 17-May, 14:30 </td>
            </tr>
                    <tr>
                                        <td class="highlight"><div class="danger"></div> <a href="javascript:;"><a target="_blank" href="https://dev.stockbangladesh.com/company-details/81">DHAKABANK</a></a></td>
                                        <td> <div class="btn-group">
                     <button class="btn green btn-sm dropdown-toggle" type="button" data-toggle="dropdown" aria-expanded="false"> Go To
                         <i class="fa fa-angle-down"></i>
                     </button>
                     <ul class="dropdown-menu" role="menu">
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/ta-chart?instrumentCode=DHAKABANK"> TA Chart </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/advance-ta-chart?instrumentCode=DHAKABANK"> Advance TA Chart </a>
                         </li>
                                                  <li>
                                                      <a target="_blank" href="https://dev.stockbangladesh.com/minute-chart/81"> Minute Chart </a>
                                                  </li>

                                                  <li>
                                                      <a target="_blank" href="https://dev.stockbangladesh.com/news-chart/81"> News Chart </a>
                                                  </li>



                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/company-details/81"> Company Details </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/fundamental-details/81"> Fundamental Details </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/news/search?keyword=&amp;instrument_id=81&amp;from_date=&amp;to_date="> News</a>
                         </li>
                         <li class="divider"> </li>
                         <li>
                             <a href="javascript:;"> Separated link </a>
                         </li>
                     </ul>
                 </div>
                 </td>
                <td> 0 </td>
                <td> 16.1 </td>
                <td> 15.8 </td>
                <td> 15.9 </td>
                <td> 16 </td>
                <td class="font-red-haze"> -0.1 </td>
                <td class="font-red-haze"> -0.62% </td>
                <td> 214 </td>
                <td> 13.785 </td>
                <td> 864850 </td>
                <td> 17-May, 14:30 </td>
            </tr>
                    <tr>
            
                <td class="highlight"><div class="success"></div> <a href="javascript:;"><a target="_blank" href="https://dev.stockbangladesh.com/company-details/82">DHAKAINS</a></a></td>
                                                    <td> <div class="btn-group">
                     <button class="btn green btn-sm dropdown-toggle" type="button" data-toggle="dropdown" aria-expanded="false"> Go To
                         <i class="fa fa-angle-down"></i>
                     </button>
                     <ul class="dropdown-menu" role="menu">
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/ta-chart?instrumentCode=DHAKAINS"> TA Chart </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/advance-ta-chart?instrumentCode=DHAKAINS"> Advance TA Chart </a>
                         </li>
                                                  <li>
                                                      <a target="_blank" href="https://dev.stockbangladesh.com/minute-chart/82"> Minute Chart </a>
                                                  </li>

                                                  <li>
                                                      <a target="_blank" href="https://dev.stockbangladesh.com/news-chart/82"> News Chart </a>
                                                  </li>



                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/company-details/82"> Company Details </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/fundamental-details/82"> Fundamental Details </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/news/search?keyword=&amp;instrument_id=82&amp;from_date=&amp;to_date="> News</a>
                         </li>
                         <li class="divider"> </li>
                         <li>
                             <a href="javascript:;"> Separated link </a>
                         </li>
                     </ul>
                 </div>
                 </td>
                <td> 20.8 </td>
                <td> 20.9 </td>
                <td> 20.2 </td>
                <td> 20.5 </td>
                <td> 20.3 </td>
                <td class="font-green-jungle"> 0.2 </td>
                <td class="font-green-jungle"> 0.99% </td>
                <td> 23 </td>
                <td> 0.114 </td>
                <td> 5550 </td>
                <td> 17-May, 14:30 </td>
            </tr>
                    <tr>
                                        <td class="highlight"><div class="danger"></div> <a href="javascript:;"><a target="_blank" href="https://dev.stockbangladesh.com/company-details/30022">DOREENPWR</a></a></td>
                                        <td> <div class="btn-group">
                     <button class="btn green btn-sm dropdown-toggle" type="button" data-toggle="dropdown" aria-expanded="false"> Go To
                         <i class="fa fa-angle-down"></i>
                     </button>
                     <ul class="dropdown-menu" role="menu">
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/ta-chart?instrumentCode=DOREENPWR"> TA Chart </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/advance-ta-chart?instrumentCode=DOREENPWR"> Advance TA Chart </a>
                         </li>
                                                  <li>
                                                      <a target="_blank" href="https://dev.stockbangladesh.com/minute-chart/30022"> Minute Chart </a>
                                                  </li>

                                                  <li>
                                                      <a target="_blank" href="https://dev.stockbangladesh.com/news-chart/30022"> News Chart </a>
                                                  </li>



                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/company-details/30022"> Company Details </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/fundamental-details/30022"> Fundamental Details </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/news/search?keyword=&amp;instrument_id=30022&amp;from_date=&amp;to_date="> News</a>
                         </li>
                         <li class="divider"> </li>
                         <li>
                             <a href="javascript:;"> Separated link </a>
                         </li>
                     </ul>
                 </div>
                 </td>
                <td> 104.9 </td>
                <td> 107.5 </td>
                <td> 104.6 </td>
                <td> 104.8 </td>
                <td> 107.1 </td>
                <td class="font-red-haze"> -2.3 </td>
                <td class="font-red-haze"> -2.15% </td>
                <td> 1032 </td>
                <td> 56.654 </td>
                <td> 535550 </td>
                <td> 17-May, 14:30 </td>
            </tr>
                    <tr>
            
                <td class="highlight"><div class="success"></div> <a href="javascript:;"><a target="_blank" href="https://dev.stockbangladesh.com/company-details/10001">DSEX</a></a></td>
                                                    <td> <div class="btn-group">
                     <button class="btn green btn-sm dropdown-toggle" type="button" data-toggle="dropdown" aria-expanded="false"> Go To
                         <i class="fa fa-angle-down"></i>
                     </button>
                     <ul class="dropdown-menu" role="menu">
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/ta-chart?instrumentCode=DSEX"> TA Chart </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/advance-ta-chart?instrumentCode=DSEX"> Advance TA Chart </a>
                         </li>
                                                  <li>
                                                      <a target="_blank" href="https://dev.stockbangladesh.com/minute-chart/10001"> Minute Chart </a>
                                                  </li>

                                                  <li>
                                                      <a target="_blank" href="https://dev.stockbangladesh.com/news-chart/10001"> News Chart </a>
                                                  </li>



                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/company-details/10001"> Company Details </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/fundamental-details/10001"> Fundamental Details </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/news/search?keyword=&amp;instrument_id=10001&amp;from_date=&amp;to_date="> News</a>
                         </li>
                         <li class="divider"> </li>
                         <li>
                             <a href="javascript:;"> Separated link </a>
                         </li>
                     </ul>
                 </div>
                 </td>
                <td> 5806.13 </td>
                <td> 5825.25 </td>
                <td> 5801.82 </td>
                <td> 5806.13 </td>
                <td> 0 </td>
                <td class="font-green-jungle"> 5806.13 </td>
                <td class="font-green-jungle"> 0% </td>
                <td> 103520 </td>
                <td> 4105.72 </td>
                <td> 99151598 </td>
                <td> 23-Apr, 14:30 </td>
            </tr>
                    <tr>
                                        <td class="highlight"><div class="danger"></div> <a href="javascript:;"><a target="_blank" href="https://dev.stockbangladesh.com/company-details/83">DSHGARME</a></a></td>
                                        <td> <div class="btn-group">
                     <button class="btn green btn-sm dropdown-toggle" type="button" data-toggle="dropdown" aria-expanded="false"> Go To
                         <i class="fa fa-angle-down"></i>
                     </button>
                     <ul class="dropdown-menu" role="menu">
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/ta-chart?instrumentCode=DSHGARME"> TA Chart </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/advance-ta-chart?instrumentCode=DSHGARME"> Advance TA Chart </a>
                         </li>
                                                  <li>
                                                      <a target="_blank" href="https://dev.stockbangladesh.com/minute-chart/83"> Minute Chart </a>
                                                  </li>

                                                  <li>
                                                      <a target="_blank" href="https://dev.stockbangladesh.com/news-chart/83"> News Chart </a>
                                                  </li>



                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/company-details/83"> Company Details </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/fundamental-details/83"> Fundamental Details </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/news/search?keyword=&amp;instrument_id=83&amp;from_date=&amp;to_date="> News</a>
                         </li>
                         <li class="divider"> </li>
                         <li>
                             <a href="javascript:;"> Separated link </a>
                         </li>
                     </ul>
                 </div>
                 </td>
                <td> 214.3 </td>
                <td> 218 </td>
                <td> 214 </td>
                <td> 214.5 </td>
                <td> 219.2 </td>
                <td class="font-red-haze"> -4.7 </td>
                <td class="font-red-haze"> -2.14% </td>
                <td> 189 </td>
                <td> 3.143 </td>
                <td> 14562 </td>
                <td> 17-May, 14:30 </td>
            </tr>
                    <tr>
                                        <td class="highlight"><div class="danger"></div> <a href="javascript:;"><a target="_blank" href="https://dev.stockbangladesh.com/company-details/30021">DSSL</a></a></td>
                                        <td> <div class="btn-group">
                     <button class="btn green btn-sm dropdown-toggle" type="button" data-toggle="dropdown" aria-expanded="false"> Go To
                         <i class="fa fa-angle-down"></i>
                     </button>
                     <ul class="dropdown-menu" role="menu">
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/ta-chart?instrumentCode=DSSL"> TA Chart </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/advance-ta-chart?instrumentCode=DSSL"> Advance TA Chart </a>
                         </li>
                                                  <li>
                                                      <a target="_blank" href="https://dev.stockbangladesh.com/minute-chart/30021"> Minute Chart </a>
                                                  </li>

                                                  <li>
                                                      <a target="_blank" href="https://dev.stockbangladesh.com/news-chart/30021"> News Chart </a>
                                                  </li>



                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/company-details/30021"> Company Details </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/fundamental-details/30021"> Fundamental Details </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/news/search?keyword=&amp;instrument_id=30021&amp;from_date=&amp;to_date="> News</a>
                         </li>
                         <li class="divider"> </li>
                         <li>
                             <a href="javascript:;"> Separated link </a>
                         </li>
                     </ul>
                 </div>
                 </td>
                <td> 20.8 </td>
                <td> 21.1 </td>
                <td> 20.5 </td>
                <td> 20.6 </td>
                <td> 21 </td>
                <td class="font-red-haze"> -0.4 </td>
                <td class="font-red-haze"> -1.9% </td>
                <td> 643 </td>
                <td> 31.22 </td>
                <td> 1512070 </td>
                <td> 17-May, 14:30 </td>
            </tr>
                    <tr>
                                        <td class="highlight"><div class="danger"></div> <a href="javascript:;"><a target="_blank" href="https://dev.stockbangladesh.com/company-details/84">DULAMIACOT</a></a></td>
                                        <td> <div class="btn-group">
                     <button class="btn green btn-sm dropdown-toggle" type="button" data-toggle="dropdown" aria-expanded="false"> Go To
                         <i class="fa fa-angle-down"></i>
                     </button>
                     <ul class="dropdown-menu" role="menu">
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/ta-chart?instrumentCode=DULAMIACOT"> TA Chart </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/advance-ta-chart?instrumentCode=DULAMIACOT"> Advance TA Chart </a>
                         </li>
                                                  <li>
                                                      <a target="_blank" href="https://dev.stockbangladesh.com/minute-chart/84"> Minute Chart </a>
                                                  </li>

                                                  <li>
                                                      <a target="_blank" href="https://dev.stockbangladesh.com/news-chart/84"> News Chart </a>
                                                  </li>



                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/company-details/84"> Company Details </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/fundamental-details/84"> Fundamental Details </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/news/search?keyword=&amp;instrument_id=84&amp;from_date=&amp;to_date="> News</a>
                         </li>
                         <li class="divider"> </li>
                         <li>
                             <a href="javascript:;"> Separated link </a>
                         </li>
                     </ul>
                 </div>
                 </td>
                <td> 39.7 </td>
                <td> 41.3 </td>
                <td> 39.7 </td>
                <td> 40.4 </td>
                <td> 41.2 </td>
                <td class="font-red-haze"> -0.8 </td>
                <td class="font-red-haze"> -1.94% </td>
                <td> 11 </td>
                <td> 0.048 </td>
                <td> 1180 </td>
                <td> 17-May, 14:30 </td>
            </tr>
                    <tr>
            
                <td class="highlight"><div class="success"></div> <a href="javascript:;"><a target="_blank" href="https://dev.stockbangladesh.com/company-details/85">DUTCHBANGL</a></a></td>
                                                    <td> <div class="btn-group">
                     <button class="btn green btn-sm dropdown-toggle" type="button" data-toggle="dropdown" aria-expanded="false"> Go To
                         <i class="fa fa-angle-down"></i>
                     </button>
                     <ul class="dropdown-menu" role="menu">
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/ta-chart?instrumentCode=DUTCHBANGL"> TA Chart </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/advance-ta-chart?instrumentCode=DUTCHBANGL"> Advance TA Chart </a>
                         </li>
                                                  <li>
                                                      <a target="_blank" href="https://dev.stockbangladesh.com/minute-chart/85"> Minute Chart </a>
                                                  </li>

                                                  <li>
                                                      <a target="_blank" href="https://dev.stockbangladesh.com/news-chart/85"> News Chart </a>
                                                  </li>



                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/company-details/85"> Company Details </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/fundamental-details/85"> Fundamental Details </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/news/search?keyword=&amp;instrument_id=85&amp;from_date=&amp;to_date="> News</a>
                         </li>
                         <li class="divider"> </li>
                         <li>
                             <a href="javascript:;"> Separated link </a>
                         </li>
                     </ul>
                 </div>
                 </td>
                <td> 115.9 </td>
                <td> 117.9 </td>
                <td> 114.3 </td>
                <td> 115.1 </td>
                <td> 115.1 </td>
                <td class="font-green-jungle"> 0 </td>
                <td class="font-green-jungle"> 0% </td>
                <td> 190 </td>
                <td> 7.965 </td>
                <td> 68865 </td>
                <td> 17-May, 14:30 </td>
            </tr>
                    <tr>
                                                    <td class="highlight"><div class="info"></div> <a href="javascript:;"><a target="_blank" href="https://dev.stockbangladesh.com/company-details/86">EASTERNINS</a></a></td>
                            <td> <div class="btn-group">
                     <button class="btn green btn-sm dropdown-toggle" type="button" data-toggle="dropdown" aria-expanded="false"> Go To
                         <i class="fa fa-angle-down"></i>
                     </button>
                     <ul class="dropdown-menu" role="menu">
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/ta-chart?instrumentCode=EASTERNINS"> TA Chart </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/advance-ta-chart?instrumentCode=EASTERNINS"> Advance TA Chart </a>
                         </li>
                                                  <li>
                                                      <a target="_blank" href="https://dev.stockbangladesh.com/minute-chart/86"> Minute Chart </a>
                                                  </li>

                                                  <li>
                                                      <a target="_blank" href="https://dev.stockbangladesh.com/news-chart/86"> News Chart </a>
                                                  </li>



                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/company-details/86"> Company Details </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/fundamental-details/86"> Fundamental Details </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/news/search?keyword=&amp;instrument_id=86&amp;from_date=&amp;to_date="> News</a>
                         </li>
                         <li class="divider"> </li>
                         <li>
                             <a href="javascript:;"> Separated link </a>
                         </li>
                     </ul>
                 </div>
                 </td>
                <td> 29 </td>
                <td> 29.1 </td>
                <td> 28.7 </td>
                <td> 29 </td>
                <td> 29 </td>
                <td class="font-green-jungle"> 0 </td>
                <td class="font-green-jungle"> 0% </td>
                <td> 48 </td>
                <td> 0.975 </td>
                <td> 33639 </td>
                <td> 17-May, 14:30 </td>
            </tr>
                    <tr>
                                        <td class="highlight"><div class="danger"></div> <a href="javascript:;"><a target="_blank" href="https://dev.stockbangladesh.com/company-details/87">EASTLAND</a></a></td>
                                        <td> <div class="btn-group">
                     <button class="btn green btn-sm dropdown-toggle" type="button" data-toggle="dropdown" aria-expanded="false"> Go To
                         <i class="fa fa-angle-down"></i>
                     </button>
                     <ul class="dropdown-menu" role="menu">
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/ta-chart?instrumentCode=EASTLAND"> TA Chart </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/advance-ta-chart?instrumentCode=EASTLAND"> Advance TA Chart </a>
                         </li>
                                                  <li>
                                                      <a target="_blank" href="https://dev.stockbangladesh.com/minute-chart/87"> Minute Chart </a>
                                                  </li>

                                                  <li>
                                                      <a target="_blank" href="https://dev.stockbangladesh.com/news-chart/87"> News Chart </a>
                                                  </li>



                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/company-details/87"> Company Details </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/fundamental-details/87"> Fundamental Details </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/news/search?keyword=&amp;instrument_id=87&amp;from_date=&amp;to_date="> News</a>
                         </li>
                         <li class="divider"> </li>
                         <li>
                             <a href="javascript:;"> Separated link </a>
                         </li>
                     </ul>
                 </div>
                 </td>
                <td> 19 </td>
                <td> 19.1 </td>
                <td> 18.6 </td>
                <td> 18.7 </td>
                <td> 19.5 </td>
                <td class="font-red-haze"> -0.8 </td>
                <td class="font-red-haze"> -4.1% </td>
                <td> 67 </td>
                <td> 0.542 </td>
                <td> 28731 </td>
                <td> 17-May, 14:30 </td>
            </tr>
                    <tr>
                                        <td class="highlight"><div class="danger"></div> <a href="javascript:;"><a target="_blank" href="https://dev.stockbangladesh.com/company-details/88">EASTRNLUB</a></a></td>
                                        <td> <div class="btn-group">
                     <button class="btn green btn-sm dropdown-toggle" type="button" data-toggle="dropdown" aria-expanded="false"> Go To
                         <i class="fa fa-angle-down"></i>
                     </button>
                     <ul class="dropdown-menu" role="menu">
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/ta-chart?instrumentCode=EASTRNLUB"> TA Chart </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/advance-ta-chart?instrumentCode=EASTRNLUB"> Advance TA Chart </a>
                         </li>
                                                  <li>
                                                      <a target="_blank" href="https://dev.stockbangladesh.com/minute-chart/88"> Minute Chart </a>
                                                  </li>

                                                  <li>
                                                      <a target="_blank" href="https://dev.stockbangladesh.com/news-chart/88"> News Chart </a>
                                                  </li>



                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/company-details/88"> Company Details </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/fundamental-details/88"> Fundamental Details </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/news/search?keyword=&amp;instrument_id=88&amp;from_date=&amp;to_date="> News</a>
                         </li>
                         <li class="divider"> </li>
                         <li>
                             <a href="javascript:;"> Separated link </a>
                         </li>
                     </ul>
                 </div>
                 </td>
                <td> 1291.1 </td>
                <td> 1346.9 </td>
                <td> 1281.3 </td>
                <td> 1290.8 </td>
                <td> 1334.5 </td>
                <td class="font-red-haze"> -43.7 </td>
                <td class="font-red-haze"> -3.27% </td>
                <td> 1009 </td>
                <td> 22.542 </td>
                <td> 17182 </td>
                <td> 17-May, 14:30 </td>
            </tr>
                    <tr>
                                        <td class="highlight"><div class="danger"></div> <a href="javascript:;"><a target="_blank" href="https://dev.stockbangladesh.com/company-details/89">EBL</a></a></td>
                                        <td> <div class="btn-group">
                     <button class="btn green btn-sm dropdown-toggle" type="button" data-toggle="dropdown" aria-expanded="false"> Go To
                         <i class="fa fa-angle-down"></i>
                     </button>
                     <ul class="dropdown-menu" role="menu">
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/ta-chart?instrumentCode=EBL"> TA Chart </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/advance-ta-chart?instrumentCode=EBL"> Advance TA Chart </a>
                         </li>
                                                  <li>
                                                      <a target="_blank" href="https://dev.stockbangladesh.com/minute-chart/89"> Minute Chart </a>
                                                  </li>

                                                  <li>
                                                      <a target="_blank" href="https://dev.stockbangladesh.com/news-chart/89"> News Chart </a>
                                                  </li>



                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/company-details/89"> Company Details </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/fundamental-details/89"> Fundamental Details </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/news/search?keyword=&amp;instrument_id=89&amp;from_date=&amp;to_date="> News</a>
                         </li>
                         <li class="divider"> </li>
                         <li>
                             <a href="javascript:;"> Separated link </a>
                         </li>
                     </ul>
                 </div>
                 </td>
                <td> 0 </td>
                <td> 37.5 </td>
                <td> 35.2 </td>
                <td> 35.7 </td>
                <td> 37.5 </td>
                <td class="font-red-haze"> -1.8 </td>
                <td class="font-red-haze"> -4.8% </td>
                <td> 228 </td>
                <td> 9.876 </td>
                <td> 271860 </td>
                <td> 17-May, 14:30 </td>
            </tr>
                    <tr>
            
                <td class="highlight"><div class="success"></div> <a href="javascript:;"><a target="_blank" href="https://dev.stockbangladesh.com/company-details/90">EBL1STMF</a></a></td>
                                                    <td> <div class="btn-group">
                     <button class="btn green btn-sm dropdown-toggle" type="button" data-toggle="dropdown" aria-expanded="false"> Go To
                         <i class="fa fa-angle-down"></i>
                     </button>
                     <ul class="dropdown-menu" role="menu">
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/ta-chart?instrumentCode=EBL1STMF"> TA Chart </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/advance-ta-chart?instrumentCode=EBL1STMF"> Advance TA Chart </a>
                         </li>
                                                  <li>
                                                      <a target="_blank" href="https://dev.stockbangladesh.com/minute-chart/90"> Minute Chart </a>
                                                  </li>

                                                  <li>
                                                      <a target="_blank" href="https://dev.stockbangladesh.com/news-chart/90"> News Chart </a>
                                                  </li>



                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/company-details/90"> Company Details </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/fundamental-details/90"> Fundamental Details </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/news/search?keyword=&amp;instrument_id=90&amp;from_date=&amp;to_date="> News</a>
                         </li>
                         <li class="divider"> </li>
                         <li>
                             <a href="javascript:;"> Separated link </a>
                         </li>
                     </ul>
                 </div>
                 </td>
                <td> 7.9 </td>
                <td> 7.9 </td>
                <td> 7.8 </td>
                <td> 7.9 </td>
                <td> 7.8 </td>
                <td class="font-green-jungle"> 0.1 </td>
                <td class="font-green-jungle"> 1.28% </td>
                <td> 10 </td>
                <td> 0.2 </td>
                <td> 25346 </td>
                <td> 17-May, 14:30 </td>
            </tr>
                    <tr>
            
                <td class="highlight"><div class="success"></div> <a href="javascript:;"><a target="_blank" href="https://dev.stockbangladesh.com/company-details/91">EBLNRBMF</a></a></td>
                                                    <td> <div class="btn-group">
                     <button class="btn green btn-sm dropdown-toggle" type="button" data-toggle="dropdown" aria-expanded="false"> Go To
                         <i class="fa fa-angle-down"></i>
                     </button>
                     <ul class="dropdown-menu" role="menu">
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/ta-chart?instrumentCode=EBLNRBMF"> TA Chart </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/advance-ta-chart?instrumentCode=EBLNRBMF"> Advance TA Chart </a>
                         </li>
                                                  <li>
                                                      <a target="_blank" href="https://dev.stockbangladesh.com/minute-chart/91"> Minute Chart </a>
                                                  </li>

                                                  <li>
                                                      <a target="_blank" href="https://dev.stockbangladesh.com/news-chart/91"> News Chart </a>
                                                  </li>



                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/company-details/91"> Company Details </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/fundamental-details/91"> Fundamental Details </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/news/search?keyword=&amp;instrument_id=91&amp;from_date=&amp;to_date="> News</a>
                         </li>
                         <li class="divider"> </li>
                         <li>
                             <a href="javascript:;"> Separated link </a>
                         </li>
                     </ul>
                 </div>
                 </td>
                <td> 6.2 </td>
                <td> 6.2 </td>
                <td> 6.1 </td>
                <td> 6.1 </td>
                <td> 6.1 </td>
                <td class="font-green-jungle"> 0 </td>
                <td class="font-green-jungle"> 0% </td>
                <td> 4 </td>
                <td> 0.04 </td>
                <td> 6550 </td>
                <td> 17-May, 14:30 </td>
            </tr>
                    <tr>
            
                <td class="highlight"><div class="success"></div> <a href="javascript:;"><a target="_blank" href="https://dev.stockbangladesh.com/company-details/92">ECABLES</a></a></td>
                                                    <td> <div class="btn-group">
                     <button class="btn green btn-sm dropdown-toggle" type="button" data-toggle="dropdown" aria-expanded="false"> Go To
                         <i class="fa fa-angle-down"></i>
                     </button>
                     <ul class="dropdown-menu" role="menu">
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/ta-chart?instrumentCode=ECABLES"> TA Chart </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/advance-ta-chart?instrumentCode=ECABLES"> Advance TA Chart </a>
                         </li>
                                                  <li>
                                                      <a target="_blank" href="https://dev.stockbangladesh.com/minute-chart/92"> Minute Chart </a>
                                                  </li>

                                                  <li>
                                                      <a target="_blank" href="https://dev.stockbangladesh.com/news-chart/92"> News Chart </a>
                                                  </li>



                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/company-details/92"> Company Details </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/fundamental-details/92"> Fundamental Details </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/news/search?keyword=&amp;instrument_id=92&amp;from_date=&amp;to_date="> News</a>
                         </li>
                         <li class="divider"> </li>
                         <li>
                             <a href="javascript:;"> Separated link </a>
                         </li>
                     </ul>
                 </div>
                 </td>
                <td> 203 </td>
                <td> 209.9 </td>
                <td> 197.5 </td>
                <td> 203.2 </td>
                <td> 197.2 </td>
                <td class="font-green-jungle"> 6 </td>
                <td class="font-green-jungle"> 3.04% </td>
                <td> 1779 </td>
                <td> 39.714 </td>
                <td> 192766 </td>
                <td> 17-May, 14:30 </td>
            </tr>
                    <tr>
                                        <td class="highlight"><div class="danger"></div> <a href="javascript:;"><a target="_blank" href="https://dev.stockbangladesh.com/company-details/93">EHL</a></a></td>
                                        <td> <div class="btn-group">
                     <button class="btn green btn-sm dropdown-toggle" type="button" data-toggle="dropdown" aria-expanded="false"> Go To
                         <i class="fa fa-angle-down"></i>
                     </button>
                     <ul class="dropdown-menu" role="menu">
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/ta-chart?instrumentCode=EHL"> TA Chart </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/advance-ta-chart?instrumentCode=EHL"> Advance TA Chart </a>
                         </li>
                                                  <li>
                                                      <a target="_blank" href="https://dev.stockbangladesh.com/minute-chart/93"> Minute Chart </a>
                                                  </li>

                                                  <li>
                                                      <a target="_blank" href="https://dev.stockbangladesh.com/news-chart/93"> News Chart </a>
                                                  </li>



                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/company-details/93"> Company Details </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/fundamental-details/93"> Fundamental Details </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/news/search?keyword=&amp;instrument_id=93&amp;from_date=&amp;to_date="> News</a>
                         </li>
                         <li class="divider"> </li>
                         <li>
                             <a href="javascript:;"> Separated link </a>
                         </li>
                     </ul>
                 </div>
                 </td>
                <td> 46.6 </td>
                <td> 47.3 </td>
                <td> 46.6 </td>
                <td> 46.8 </td>
                <td> 47.2 </td>
                <td class="font-red-haze"> -0.4 </td>
                <td class="font-red-haze"> -0.85% </td>
                <td> 180 </td>
                <td> 4.333 </td>
                <td> 92321 </td>
                <td> 17-May, 14:30 </td>
            </tr>
                    <tr>
                                        <td class="highlight"><div class="danger"></div> <a href="javascript:;"><a target="_blank" href="https://dev.stockbangladesh.com/company-details/532">EMERALDOIL</a></a></td>
                                        <td> <div class="btn-group">
                     <button class="btn green btn-sm dropdown-toggle" type="button" data-toggle="dropdown" aria-expanded="false"> Go To
                         <i class="fa fa-angle-down"></i>
                     </button>
                     <ul class="dropdown-menu" role="menu">
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/ta-chart?instrumentCode=EMERALDOIL"> TA Chart </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/advance-ta-chart?instrumentCode=EMERALDOIL"> Advance TA Chart </a>
                         </li>
                                                  <li>
                                                      <a target="_blank" href="https://dev.stockbangladesh.com/minute-chart/532"> Minute Chart </a>
                                                  </li>

                                                  <li>
                                                      <a target="_blank" href="https://dev.stockbangladesh.com/news-chart/532"> News Chart </a>
                                                  </li>



                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/company-details/532"> Company Details </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/fundamental-details/532"> Fundamental Details </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/news/search?keyword=&amp;instrument_id=532&amp;from_date=&amp;to_date="> News</a>
                         </li>
                         <li class="divider"> </li>
                         <li>
                             <a href="javascript:;"> Separated link </a>
                         </li>
                     </ul>
                 </div>
                 </td>
                <td> 12.2 </td>
                <td> 12.5 </td>
                <td> 12.2 </td>
                <td> 12.3 </td>
                <td> 12.7 </td>
                <td class="font-red-haze"> -0.4 </td>
                <td class="font-red-haze"> -3.15% </td>
                <td> 64 </td>
                <td> 0.47 </td>
                <td> 37935 </td>
                <td> 17-May, 14:30 </td>
            </tr>
                    <tr>
                                        <td class="highlight"><div class="danger"></div> <a href="javascript:;"><a target="_blank" href="https://dev.stockbangladesh.com/company-details/515">ENVOYTEX</a></a></td>
                                        <td> <div class="btn-group">
                     <button class="btn green btn-sm dropdown-toggle" type="button" data-toggle="dropdown" aria-expanded="false"> Go To
                         <i class="fa fa-angle-down"></i>
                     </button>
                     <ul class="dropdown-menu" role="menu">
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/ta-chart?instrumentCode=ENVOYTEX"> TA Chart </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/advance-ta-chart?instrumentCode=ENVOYTEX"> Advance TA Chart </a>
                         </li>
                                                  <li>
                                                      <a target="_blank" href="https://dev.stockbangladesh.com/minute-chart/515"> Minute Chart </a>
                                                  </li>

                                                  <li>
                                                      <a target="_blank" href="https://dev.stockbangladesh.com/news-chart/515"> News Chart </a>
                                                  </li>



                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/company-details/515"> Company Details </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/fundamental-details/515"> Fundamental Details </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/news/search?keyword=&amp;instrument_id=515&amp;from_date=&amp;to_date="> News</a>
                         </li>
                         <li class="divider"> </li>
                         <li>
                             <a href="javascript:;"> Separated link </a>
                         </li>
                     </ul>
                 </div>
                 </td>
                <td> 29.8 </td>
                <td> 30.5 </td>
                <td> 29.6 </td>
                <td> 29.7 </td>
                <td> 30 </td>
                <td class="font-red-haze"> -0.3 </td>
                <td class="font-red-haze"> -1% </td>
                <td> 69 </td>
                <td> 1.057 </td>
                <td> 35436 </td>
                <td> 17-May, 14:30 </td>
            </tr>
                    <tr>
            
                <td class="highlight"><div class="success"></div> <a href="javascript:;"><a target="_blank" href="https://dev.stockbangladesh.com/company-details/30025">ETL</a></a></td>
                                                    <td> <div class="btn-group">
                     <button class="btn green btn-sm dropdown-toggle" type="button" data-toggle="dropdown" aria-expanded="false"> Go To
                         <i class="fa fa-angle-down"></i>
                     </button>
                     <ul class="dropdown-menu" role="menu">
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/ta-chart?instrumentCode=ETL"> TA Chart </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/advance-ta-chart?instrumentCode=ETL"> Advance TA Chart </a>
                         </li>
                                                  <li>
                                                      <a target="_blank" href="https://dev.stockbangladesh.com/minute-chart/30025"> Minute Chart </a>
                                                  </li>

                                                  <li>
                                                      <a target="_blank" href="https://dev.stockbangladesh.com/news-chart/30025"> News Chart </a>
                                                  </li>



                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/company-details/30025"> Company Details </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/fundamental-details/30025"> Fundamental Details </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/news/search?keyword=&amp;instrument_id=30025&amp;from_date=&amp;to_date="> News</a>
                         </li>
                         <li class="divider"> </li>
                         <li>
                             <a href="javascript:;"> Separated link </a>
                         </li>
                     </ul>
                 </div>
                 </td>
                <td> 15.8 </td>
                <td> 15.8 </td>
                <td> 15.3 </td>
                <td> 15.7 </td>
                <td> 15.2 </td>
                <td class="font-green-jungle"> 0.5 </td>
                <td class="font-green-jungle"> 3.29% </td>
                <td> 660 </td>
                <td> 19.457 </td>
                <td> 1250360 </td>
                <td> 17-May, 14:30 </td>
            </tr>
                    <tr>
                                        <td class="highlight"><div class="danger"></div> <a href="javascript:;"><a target="_blank" href="https://dev.stockbangladesh.com/company-details/526">EXIM1STMF</a></a></td>
                                        <td> <div class="btn-group">
                     <button class="btn green btn-sm dropdown-toggle" type="button" data-toggle="dropdown" aria-expanded="false"> Go To
                         <i class="fa fa-angle-down"></i>
                     </button>
                     <ul class="dropdown-menu" role="menu">
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/ta-chart?instrumentCode=EXIM1STMF"> TA Chart </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/advance-ta-chart?instrumentCode=EXIM1STMF"> Advance TA Chart </a>
                         </li>
                                                  <li>
                                                      <a target="_blank" href="https://dev.stockbangladesh.com/minute-chart/526"> Minute Chart </a>
                                                  </li>

                                                  <li>
                                                      <a target="_blank" href="https://dev.stockbangladesh.com/news-chart/526"> News Chart </a>
                                                  </li>



                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/company-details/526"> Company Details </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/fundamental-details/526"> Fundamental Details </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/news/search?keyword=&amp;instrument_id=526&amp;from_date=&amp;to_date="> News</a>
                         </li>
                         <li class="divider"> </li>
                         <li>
                             <a href="javascript:;"> Separated link </a>
                         </li>
                     </ul>
                 </div>
                 </td>
                <td> 6.7 </td>
                <td> 6.8 </td>
                <td> 6.7 </td>
                <td> 6.8 </td>
                <td> 6.8 </td>
                <td class="font-green-jungle"> 0 </td>
                <td class="font-green-jungle"> 0% </td>
                <td> 15 </td>
                <td> 0.248 </td>
                <td> 36600 </td>
                <td> 17-May, 14:30 </td>
            </tr>
                    <tr>
                                        <td class="highlight"><div class="danger"></div> <a href="javascript:;"><a target="_blank" href="https://dev.stockbangladesh.com/company-details/94">EXIMBANK</a></a></td>
                                        <td> <div class="btn-group">
                     <button class="btn green btn-sm dropdown-toggle" type="button" data-toggle="dropdown" aria-expanded="false"> Go To
                         <i class="fa fa-angle-down"></i>
                     </button>
                     <ul class="dropdown-menu" role="menu">
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/ta-chart?instrumentCode=EXIMBANK"> TA Chart </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/advance-ta-chart?instrumentCode=EXIMBANK"> Advance TA Chart </a>
                         </li>
                                                  <li>
                                                      <a target="_blank" href="https://dev.stockbangladesh.com/minute-chart/94"> Minute Chart </a>
                                                  </li>

                                                  <li>
                                                      <a target="_blank" href="https://dev.stockbangladesh.com/news-chart/94"> News Chart </a>
                                                  </li>



                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/company-details/94"> Company Details </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/fundamental-details/94"> Fundamental Details </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/news/search?keyword=&amp;instrument_id=94&amp;from_date=&amp;to_date="> News</a>
                         </li>
                         <li class="divider"> </li>
                         <li>
                             <a href="javascript:;"> Separated link </a>
                         </li>
                     </ul>
                 </div>
                 </td>
                <td> 13.2 </td>
                <td> 13.4 </td>
                <td> 13.2 </td>
                <td> 13.2 </td>
                <td> 13.3 </td>
                <td class="font-red-haze"> -0.1 </td>
                <td class="font-red-haze"> -0.75% </td>
                <td> 376 </td>
                <td> 20.299 </td>
                <td> 1530092 </td>
                <td> 17-May, 14:30 </td>
            </tr>
                    <tr>
                                                    <td class="highlight"><div class="info"></div> <a href="javascript:;"><a target="_blank" href="https://dev.stockbangladesh.com/company-details/524">FAMILYTEX</a></a></td>
                            <td> <div class="btn-group">
                     <button class="btn green btn-sm dropdown-toggle" type="button" data-toggle="dropdown" aria-expanded="false"> Go To
                         <i class="fa fa-angle-down"></i>
                     </button>
                     <ul class="dropdown-menu" role="menu">
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/ta-chart?instrumentCode=FAMILYTEX"> TA Chart </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/advance-ta-chart?instrumentCode=FAMILYTEX"> Advance TA Chart </a>
                         </li>
                                                  <li>
                                                      <a target="_blank" href="https://dev.stockbangladesh.com/minute-chart/524"> Minute Chart </a>
                                                  </li>

                                                  <li>
                                                      <a target="_blank" href="https://dev.stockbangladesh.com/news-chart/524"> News Chart </a>
                                                  </li>



                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/company-details/524"> Company Details </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/fundamental-details/524"> Fundamental Details </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/news/search?keyword=&amp;instrument_id=524&amp;from_date=&amp;to_date="> News</a>
                         </li>
                         <li class="divider"> </li>
                         <li>
                             <a href="javascript:;"> Separated link </a>
                         </li>
                     </ul>
                 </div>
                 </td>
                <td> 6.5 </td>
                <td> 6.8 </td>
                <td> 6.5 </td>
                <td> 6.5 </td>
                <td> 6.5 </td>
                <td class="font-green-jungle"> 0 </td>
                <td class="font-green-jungle"> 0% </td>
                <td> 297 </td>
                <td> 4.015 </td>
                <td> 616116 </td>
                <td> 17-May, 14:30 </td>
            </tr>
                    <tr>
                                        <td class="highlight"><div class="danger"></div> <a href="javascript:;"><a target="_blank" href="https://dev.stockbangladesh.com/company-details/537">FARCHEM</a></a></td>
                                        <td> <div class="btn-group">
                     <button class="btn green btn-sm dropdown-toggle" type="button" data-toggle="dropdown" aria-expanded="false"> Go To
                         <i class="fa fa-angle-down"></i>
                     </button>
                     <ul class="dropdown-menu" role="menu">
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/ta-chart?instrumentCode=FARCHEM"> TA Chart </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/advance-ta-chart?instrumentCode=FARCHEM"> Advance TA Chart </a>
                         </li>
                                                  <li>
                                                      <a target="_blank" href="https://dev.stockbangladesh.com/minute-chart/537"> Minute Chart </a>
                                                  </li>

                                                  <li>
                                                      <a target="_blank" href="https://dev.stockbangladesh.com/news-chart/537"> News Chart </a>
                                                  </li>



                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/company-details/537"> Company Details </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/fundamental-details/537"> Fundamental Details </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/news/search?keyword=&amp;instrument_id=537&amp;from_date=&amp;to_date="> News</a>
                         </li>
                         <li class="divider"> </li>
                         <li>
                             <a href="javascript:;"> Separated link </a>
                         </li>
                     </ul>
                 </div>
                 </td>
                <td> 16.7 </td>
                <td> 17.2 </td>
                <td> 16.7 </td>
                <td> 16.8 </td>
                <td> 17 </td>
                <td class="font-red-haze"> -0.2 </td>
                <td class="font-red-haze"> -1.18% </td>
                <td> 136 </td>
                <td> 2.342 </td>
                <td> 139276 </td>
                <td> 17-May, 14:30 </td>
            </tr>
                    <tr>
                                        <td class="highlight"><div class="danger"></div> <a href="javascript:;"><a target="_blank" href="https://dev.stockbangladesh.com/company-details/528">FAREASTFIN</a></a></td>
                                        <td> <div class="btn-group">
                     <button class="btn green btn-sm dropdown-toggle" type="button" data-toggle="dropdown" aria-expanded="false"> Go To
                         <i class="fa fa-angle-down"></i>
                     </button>
                     <ul class="dropdown-menu" role="menu">
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/ta-chart?instrumentCode=FAREASTFIN"> TA Chart </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/advance-ta-chart?instrumentCode=FAREASTFIN"> Advance TA Chart </a>
                         </li>
                                                  <li>
                                                      <a target="_blank" href="https://dev.stockbangladesh.com/minute-chart/528"> Minute Chart </a>
                                                  </li>

                                                  <li>
                                                      <a target="_blank" href="https://dev.stockbangladesh.com/news-chart/528"> News Chart </a>
                                                  </li>



                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/company-details/528"> Company Details </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/fundamental-details/528"> Fundamental Details </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/news/search?keyword=&amp;instrument_id=528&amp;from_date=&amp;to_date="> News</a>
                         </li>
                         <li class="divider"> </li>
                         <li>
                             <a href="javascript:;"> Separated link </a>
                         </li>
                     </ul>
                 </div>
                 </td>
                <td> 7 </td>
                <td> 7.2 </td>
                <td> 7 </td>
                <td> 7 </td>
                <td> 7.3 </td>
                <td class="font-red-haze"> -0.3 </td>
                <td class="font-red-haze"> -4.11% </td>
                <td> 69 </td>
                <td> 0.813 </td>
                <td> 115474 </td>
                <td> 17-May, 14:30 </td>
            </tr>
                    <tr>
                                        <td class="highlight"><div class="danger"></div> <a href="javascript:;"><a target="_blank" href="https://dev.stockbangladesh.com/company-details/95">FAREASTLIF</a></a></td>
                                        <td> <div class="btn-group">
                     <button class="btn green btn-sm dropdown-toggle" type="button" data-toggle="dropdown" aria-expanded="false"> Go To
                         <i class="fa fa-angle-down"></i>
                     </button>
                     <ul class="dropdown-menu" role="menu">
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/ta-chart?instrumentCode=FAREASTLIF"> TA Chart </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/advance-ta-chart?instrumentCode=FAREASTLIF"> Advance TA Chart </a>
                         </li>
                                                  <li>
                                                      <a target="_blank" href="https://dev.stockbangladesh.com/minute-chart/95"> Minute Chart </a>
                                                  </li>

                                                  <li>
                                                      <a target="_blank" href="https://dev.stockbangladesh.com/news-chart/95"> News Chart </a>
                                                  </li>



                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/company-details/95"> Company Details </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/fundamental-details/95"> Fundamental Details </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/news/search?keyword=&amp;instrument_id=95&amp;from_date=&amp;to_date="> News</a>
                         </li>
                         <li class="divider"> </li>
                         <li>
                             <a href="javascript:;"> Separated link </a>
                         </li>
                     </ul>
                 </div>
                 </td>
                <td> 67 </td>
                <td> 71.7 </td>
                <td> 67 </td>
                <td> 69.1 </td>
                <td> 71.5 </td>
                <td class="font-red-haze"> -2.4 </td>
                <td class="font-red-haze"> -3.36% </td>
                <td> 158 </td>
                <td> 3.582 </td>
                <td> 51436 </td>
                <td> 17-May, 14:30 </td>
            </tr>
                    <tr>
                                        <td class="highlight"><div class="danger"></div> <a href="javascript:;"><a target="_blank" href="https://dev.stockbangladesh.com/company-details/96">FASFIN</a></a></td>
                                        <td> <div class="btn-group">
                     <button class="btn green btn-sm dropdown-toggle" type="button" data-toggle="dropdown" aria-expanded="false"> Go To
                         <i class="fa fa-angle-down"></i>
                     </button>
                     <ul class="dropdown-menu" role="menu">
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/ta-chart?instrumentCode=FASFIN"> TA Chart </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/advance-ta-chart?instrumentCode=FASFIN"> Advance TA Chart </a>
                         </li>
                                                  <li>
                                                      <a target="_blank" href="https://dev.stockbangladesh.com/minute-chart/96"> Minute Chart </a>
                                                  </li>

                                                  <li>
                                                      <a target="_blank" href="https://dev.stockbangladesh.com/news-chart/96"> News Chart </a>
                                                  </li>



                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/company-details/96"> Company Details </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/fundamental-details/96"> Fundamental Details </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/news/search?keyword=&amp;instrument_id=96&amp;from_date=&amp;to_date="> News</a>
                         </li>
                         <li class="divider"> </li>
                         <li>
                             <a href="javascript:;"> Separated link </a>
                         </li>
                     </ul>
                 </div>
                 </td>
                <td> 11.6 </td>
                <td> 12.2 </td>
                <td> 11.6 </td>
                <td> 11.7 </td>
                <td> 12 </td>
                <td class="font-red-haze"> -0.3 </td>
                <td class="font-red-haze"> -2.5% </td>
                <td> 237 </td>
                <td> 5.071 </td>
                <td> 426803 </td>
                <td> 17-May, 14:30 </td>
            </tr>
                    <tr>
                                                    <td class="highlight"><div class="info"></div> <a href="javascript:;"><a target="_blank" href="https://dev.stockbangladesh.com/company-details/504">FBFIF</a></a></td>
                            <td> <div class="btn-group">
                     <button class="btn green btn-sm dropdown-toggle" type="button" data-toggle="dropdown" aria-expanded="false"> Go To
                         <i class="fa fa-angle-down"></i>
                     </button>
                     <ul class="dropdown-menu" role="menu">
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/ta-chart?instrumentCode=FBFIF"> TA Chart </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/advance-ta-chart?instrumentCode=FBFIF"> Advance TA Chart </a>
                         </li>
                                                  <li>
                                                      <a target="_blank" href="https://dev.stockbangladesh.com/minute-chart/504"> Minute Chart </a>
                                                  </li>

                                                  <li>
                                                      <a target="_blank" href="https://dev.stockbangladesh.com/news-chart/504"> News Chart </a>
                                                  </li>



                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/company-details/504"> Company Details </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/fundamental-details/504"> Fundamental Details </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/news/search?keyword=&amp;instrument_id=504&amp;from_date=&amp;to_date="> News</a>
                         </li>
                         <li class="divider"> </li>
                         <li>
                             <a href="javascript:;"> Separated link </a>
                         </li>
                     </ul>
                 </div>
                 </td>
                <td> 5.6 </td>
                <td> 5.6 </td>
                <td> 5.5 </td>
                <td> 5.5 </td>
                <td> 5.6 </td>
                <td class="font-red-haze"> -0.1 </td>
                <td class="font-red-haze"> -1.79% </td>
                <td> 95 </td>
                <td> 5.417 </td>
                <td> 983488 </td>
                <td> 17-May, 14:30 </td>
            </tr>
                    <tr>
                                        <td class="highlight"><div class="danger"></div> <a href="javascript:;"><a target="_blank" href="https://dev.stockbangladesh.com/company-details/97">FEDERALINS</a></a></td>
                                        <td> <div class="btn-group">
                     <button class="btn green btn-sm dropdown-toggle" type="button" data-toggle="dropdown" aria-expanded="false"> Go To
                         <i class="fa fa-angle-down"></i>
                     </button>
                     <ul class="dropdown-menu" role="menu">
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/ta-chart?instrumentCode=FEDERALINS"> TA Chart </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/advance-ta-chart?instrumentCode=FEDERALINS"> Advance TA Chart </a>
                         </li>
                                                  <li>
                                                      <a target="_blank" href="https://dev.stockbangladesh.com/minute-chart/97"> Minute Chart </a>
                                                  </li>

                                                  <li>
                                                      <a target="_blank" href="https://dev.stockbangladesh.com/news-chart/97"> News Chart </a>
                                                  </li>



                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/company-details/97"> Company Details </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/fundamental-details/97"> Fundamental Details </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/news/search?keyword=&amp;instrument_id=97&amp;from_date=&amp;to_date="> News</a>
                         </li>
                         <li class="divider"> </li>
                         <li>
                             <a href="javascript:;"> Separated link </a>
                         </li>
                     </ul>
                 </div>
                 </td>
                <td> 9.9 </td>
                <td> 10.1 </td>
                <td> 9.9 </td>
                <td> 10 </td>
                <td> 10 </td>
                <td class="font-green-jungle"> 0 </td>
                <td class="font-green-jungle"> 0% </td>
                <td> 59 </td>
                <td> 1.27 </td>
                <td> 126985 </td>
                <td> 17-May, 14:30 </td>
            </tr>
                    <tr>
                                        <td class="highlight"><div class="danger"></div> <a href="javascript:;"><a target="_blank" href="https://dev.stockbangladesh.com/company-details/540">FEKDIL</a></a></td>
                                        <td> <div class="btn-group">
                     <button class="btn green btn-sm dropdown-toggle" type="button" data-toggle="dropdown" aria-expanded="false"> Go To
                         <i class="fa fa-angle-down"></i>
                     </button>
                     <ul class="dropdown-menu" role="menu">
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/ta-chart?instrumentCode=FEKDIL"> TA Chart </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/advance-ta-chart?instrumentCode=FEKDIL"> Advance TA Chart </a>
                         </li>
                                                  <li>
                                                      <a target="_blank" href="https://dev.stockbangladesh.com/minute-chart/540"> Minute Chart </a>
                                                  </li>

                                                  <li>
                                                      <a target="_blank" href="https://dev.stockbangladesh.com/news-chart/540"> News Chart </a>
                                                  </li>



                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/company-details/540"> Company Details </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/fundamental-details/540"> Fundamental Details </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/news/search?keyword=&amp;instrument_id=540&amp;from_date=&amp;to_date="> News</a>
                         </li>
                         <li class="divider"> </li>
                         <li>
                             <a href="javascript:;"> Separated link </a>
                         </li>
                     </ul>
                 </div>
                 </td>
                <td> 15.1 </td>
                <td> 15.3 </td>
                <td> 15 </td>
                <td> 15 </td>
                <td> 15.3 </td>
                <td class="font-red-haze"> -0.3 </td>
                <td class="font-red-haze"> -1.96% </td>
                <td> 110 </td>
                <td> 3.153 </td>
                <td> 209292 </td>
                <td> 17-May, 14:30 </td>
            </tr>
                    <tr>
                                        <td class="highlight"><div class="danger"></div> <a href="javascript:;"><a target="_blank" href="https://dev.stockbangladesh.com/company-details/98">FINEFOODS</a></a></td>
                                        <td> <div class="btn-group">
                     <button class="btn green btn-sm dropdown-toggle" type="button" data-toggle="dropdown" aria-expanded="false"> Go To
                         <i class="fa fa-angle-down"></i>
                     </button>
                     <ul class="dropdown-menu" role="menu">
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/ta-chart?instrumentCode=FINEFOODS"> TA Chart </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/advance-ta-chart?instrumentCode=FINEFOODS"> Advance TA Chart </a>
                         </li>
                                                  <li>
                                                      <a target="_blank" href="https://dev.stockbangladesh.com/minute-chart/98"> Minute Chart </a>
                                                  </li>

                                                  <li>
                                                      <a target="_blank" href="https://dev.stockbangladesh.com/news-chart/98"> News Chart </a>
                                                  </li>



                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/company-details/98"> Company Details </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/fundamental-details/98"> Fundamental Details </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/news/search?keyword=&amp;instrument_id=98&amp;from_date=&amp;to_date="> News</a>
                         </li>
                         <li class="divider"> </li>
                         <li>
                             <a href="javascript:;"> Separated link </a>
                         </li>
                     </ul>
                 </div>
                 </td>
                <td> 33.2 </td>
                <td> 34.7 </td>
                <td> 33.2 </td>
                <td> 33.4 </td>
                <td> 34.5 </td>
                <td class="font-red-haze"> -1.1 </td>
                <td class="font-red-haze"> -3.19% </td>
                <td> 615 </td>
                <td> 12.846 </td>
                <td> 381134 </td>
                <td> 17-May, 14:30 </td>
            </tr>
                    <tr>
                                        <td class="highlight"><div class="danger"></div> <a href="javascript:;"><a target="_blank" href="https://dev.stockbangladesh.com/company-details/100">FIRSTFIN</a></a></td>
                                        <td> <div class="btn-group">
                     <button class="btn green btn-sm dropdown-toggle" type="button" data-toggle="dropdown" aria-expanded="false"> Go To
                         <i class="fa fa-angle-down"></i>
                     </button>
                     <ul class="dropdown-menu" role="menu">
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/ta-chart?instrumentCode=FIRSTFIN"> TA Chart </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/advance-ta-chart?instrumentCode=FIRSTFIN"> Advance TA Chart </a>
                         </li>
                                                  <li>
                                                      <a target="_blank" href="https://dev.stockbangladesh.com/minute-chart/100"> Minute Chart </a>
                                                  </li>

                                                  <li>
                                                      <a target="_blank" href="https://dev.stockbangladesh.com/news-chart/100"> News Chart </a>
                                                  </li>



                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/company-details/100"> Company Details </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/fundamental-details/100"> Fundamental Details </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/news/search?keyword=&amp;instrument_id=100&amp;from_date=&amp;to_date="> News</a>
                         </li>
                         <li class="divider"> </li>
                         <li>
                             <a href="javascript:;"> Separated link </a>
                         </li>
                     </ul>
                 </div>
                 </td>
                <td> 7.1 </td>
                <td> 7.4 </td>
                <td> 7 </td>
                <td> 7.3 </td>
                <td> 7.2 </td>
                <td class="font-green-jungle"> 0.1 </td>
                <td class="font-green-jungle"> 1.39% </td>
                <td> 17 </td>
                <td> 0.079 </td>
                <td> 10891 </td>
                <td> 17-May, 14:30 </td>
            </tr>
                    <tr>
                                        <td class="highlight"><div class="danger"></div> <a href="javascript:;"><a target="_blank" href="https://dev.stockbangladesh.com/company-details/99">FIRSTSBANK</a></a></td>
                                        <td> <div class="btn-group">
                     <button class="btn green btn-sm dropdown-toggle" type="button" data-toggle="dropdown" aria-expanded="false"> Go To
                         <i class="fa fa-angle-down"></i>
                     </button>
                     <ul class="dropdown-menu" role="menu">
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/ta-chart?instrumentCode=FIRSTSBANK"> TA Chart </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/advance-ta-chart?instrumentCode=FIRSTSBANK"> Advance TA Chart </a>
                         </li>
                                                  <li>
                                                      <a target="_blank" href="https://dev.stockbangladesh.com/minute-chart/99"> Minute Chart </a>
                                                  </li>

                                                  <li>
                                                      <a target="_blank" href="https://dev.stockbangladesh.com/news-chart/99"> News Chart </a>
                                                  </li>



                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/company-details/99"> Company Details </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/fundamental-details/99"> Fundamental Details </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/news/search?keyword=&amp;instrument_id=99&amp;from_date=&amp;to_date="> News</a>
                         </li>
                         <li class="divider"> </li>
                         <li>
                             <a href="javascript:;"> Separated link </a>
                         </li>
                     </ul>
                 </div>
                 </td>
                <td> 0 </td>
                <td> 12.5 </td>
                <td> 12.3 </td>
                <td> 12.4 </td>
                <td> 12.4 </td>
                <td class="font-green-jungle"> 0 </td>
                <td class="font-green-jungle"> 0% </td>
                <td> 181 </td>
                <td> 7.864 </td>
                <td> 635291 </td>
                <td> 17-May, 14:30 </td>
            </tr>
                    <tr>
                                        <td class="highlight"><div class="danger"></div> <a href="javascript:;"><a target="_blank" href="https://dev.stockbangladesh.com/company-details/30027">FORTUNE</a></a></td>
                                        <td> <div class="btn-group">
                     <button class="btn green btn-sm dropdown-toggle" type="button" data-toggle="dropdown" aria-expanded="false"> Go To
                         <i class="fa fa-angle-down"></i>
                     </button>
                     <ul class="dropdown-menu" role="menu">
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/ta-chart?instrumentCode=FORTUNE"> TA Chart </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/advance-ta-chart?instrumentCode=FORTUNE"> Advance TA Chart </a>
                         </li>
                                                  <li>
                                                      <a target="_blank" href="https://dev.stockbangladesh.com/minute-chart/30027"> Minute Chart </a>
                                                  </li>

                                                  <li>
                                                      <a target="_blank" href="https://dev.stockbangladesh.com/news-chart/30027"> News Chart </a>
                                                  </li>



                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/company-details/30027"> Company Details </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/fundamental-details/30027"> Fundamental Details </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/news/search?keyword=&amp;instrument_id=30027&amp;from_date=&amp;to_date="> News</a>
                         </li>
                         <li class="divider"> </li>
                         <li>
                             <a href="javascript:;"> Separated link </a>
                         </li>
                     </ul>
                 </div>
                 </td>
                <td> 29.1 </td>
                <td> 30 </td>
                <td> 29.1 </td>
                <td> 29.2 </td>
                <td> 29.6 </td>
                <td class="font-red-haze"> -0.4 </td>
                <td class="font-red-haze"> -1.35% </td>
                <td> 559 </td>
                <td> 17.598 </td>
                <td> 600188 </td>
                <td> 17-May, 14:30 </td>
            </tr>
                    <tr>
                                        <td class="highlight"><div class="danger"></div> <a href="javascript:;"><a target="_blank" href="https://dev.stockbangladesh.com/company-details/254">FUWANGCER</a></a></td>
                                        <td> <div class="btn-group">
                     <button class="btn green btn-sm dropdown-toggle" type="button" data-toggle="dropdown" aria-expanded="false"> Go To
                         <i class="fa fa-angle-down"></i>
                     </button>
                     <ul class="dropdown-menu" role="menu">
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/ta-chart?instrumentCode=FUWANGCER"> TA Chart </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/advance-ta-chart?instrumentCode=FUWANGCER"> Advance TA Chart </a>
                         </li>
                                                  <li>
                                                      <a target="_blank" href="https://dev.stockbangladesh.com/minute-chart/254"> Minute Chart </a>
                                                  </li>

                                                  <li>
                                                      <a target="_blank" href="https://dev.stockbangladesh.com/news-chart/254"> News Chart </a>
                                                  </li>



                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/company-details/254"> Company Details </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/fundamental-details/254"> Fundamental Details </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/news/search?keyword=&amp;instrument_id=254&amp;from_date=&amp;to_date="> News</a>
                         </li>
                         <li class="divider"> </li>
                         <li>
                             <a href="javascript:;"> Separated link </a>
                         </li>
                     </ul>
                 </div>
                 </td>
                <td> 15.7 </td>
                <td> 16 </td>
                <td> 15.7 </td>
                <td> 15.7 </td>
                <td> 16 </td>
                <td class="font-red-haze"> -0.3 </td>
                <td class="font-red-haze"> -1.88% </td>
                <td> 269 </td>
                <td> 5.508 </td>
                <td> 349082 </td>
                <td> 17-May, 14:30 </td>
            </tr>
                    <tr>
                                        <td class="highlight"><div class="danger"></div> <a href="javascript:;"><a target="_blank" href="https://dev.stockbangladesh.com/company-details/101">FUWANGFOOD</a></a></td>
                                        <td> <div class="btn-group">
                     <button class="btn green btn-sm dropdown-toggle" type="button" data-toggle="dropdown" aria-expanded="false"> Go To
                         <i class="fa fa-angle-down"></i>
                     </button>
                     <ul class="dropdown-menu" role="menu">
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/ta-chart?instrumentCode=FUWANGFOOD"> TA Chart </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/advance-ta-chart?instrumentCode=FUWANGFOOD"> Advance TA Chart </a>
                         </li>
                                                  <li>
                                                      <a target="_blank" href="https://dev.stockbangladesh.com/minute-chart/101"> Minute Chart </a>
                                                  </li>

                                                  <li>
                                                      <a target="_blank" href="https://dev.stockbangladesh.com/news-chart/101"> News Chart </a>
                                                  </li>



                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/company-details/101"> Company Details </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/fundamental-details/101"> Fundamental Details </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/news/search?keyword=&amp;instrument_id=101&amp;from_date=&amp;to_date="> News</a>
                         </li>
                         <li class="divider"> </li>
                         <li>
                             <a href="javascript:;"> Separated link </a>
                         </li>
                     </ul>
                 </div>
                 </td>
                <td> 17.9 </td>
                <td> 18.3 </td>
                <td> 17.5 </td>
                <td> 17.7 </td>
                <td> 18 </td>
                <td class="font-red-haze"> -0.3 </td>
                <td class="font-red-haze"> -1.67% </td>
                <td> 530 </td>
                <td> 13.986 </td>
                <td> 787446 </td>
                <td> 17-May, 14:30 </td>
            </tr>
                    <tr>
            
                <td class="highlight"><div class="success"></div> <a href="javascript:;"><a target="_blank" href="https://dev.stockbangladesh.com/company-details/509">GBBPOWER</a></a></td>
                                                    <td> <div class="btn-group">
                     <button class="btn green btn-sm dropdown-toggle" type="button" data-toggle="dropdown" aria-expanded="false"> Go To
                         <i class="fa fa-angle-down"></i>
                     </button>
                     <ul class="dropdown-menu" role="menu">
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/ta-chart?instrumentCode=GBBPOWER"> TA Chart </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/advance-ta-chart?instrumentCode=GBBPOWER"> Advance TA Chart </a>
                         </li>
                                                  <li>
                                                      <a target="_blank" href="https://dev.stockbangladesh.com/minute-chart/509"> Minute Chart </a>
                                                  </li>

                                                  <li>
                                                      <a target="_blank" href="https://dev.stockbangladesh.com/news-chart/509"> News Chart </a>
                                                  </li>



                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/company-details/509"> Company Details </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/fundamental-details/509"> Fundamental Details </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/news/search?keyword=&amp;instrument_id=509&amp;from_date=&amp;to_date="> News</a>
                         </li>
                         <li class="divider"> </li>
                         <li>
                             <a href="javascript:;"> Separated link </a>
                         </li>
                     </ul>
                 </div>
                 </td>
                <td> 15.1 </td>
                <td> 15.1 </td>
                <td> 14.9 </td>
                <td> 15 </td>
                <td> 15 </td>
                <td class="font-green-jungle"> 0 </td>
                <td class="font-green-jungle"> 0% </td>
                <td> 123 </td>
                <td> 1.195 </td>
                <td> 79699 </td>
                <td> 17-May, 14:30 </td>
            </tr>
                    <tr>
                                        <td class="highlight"><div class="danger"></div> <a href="javascript:;"><a target="_blank" href="https://dev.stockbangladesh.com/company-details/102">GEMINISEA</a></a></td>
                                        <td> <div class="btn-group">
                     <button class="btn green btn-sm dropdown-toggle" type="button" data-toggle="dropdown" aria-expanded="false"> Go To
                         <i class="fa fa-angle-down"></i>
                     </button>
                     <ul class="dropdown-menu" role="menu">
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/ta-chart?instrumentCode=GEMINISEA"> TA Chart </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/advance-ta-chart?instrumentCode=GEMINISEA"> Advance TA Chart </a>
                         </li>
                                                  <li>
                                                      <a target="_blank" href="https://dev.stockbangladesh.com/minute-chart/102"> Minute Chart </a>
                                                  </li>

                                                  <li>
                                                      <a target="_blank" href="https://dev.stockbangladesh.com/news-chart/102"> News Chart </a>
                                                  </li>



                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/company-details/102"> Company Details </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/fundamental-details/102"> Fundamental Details </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/news/search?keyword=&amp;instrument_id=102&amp;from_date=&amp;to_date="> News</a>
                         </li>
                         <li class="divider"> </li>
                         <li>
                             <a href="javascript:;"> Separated link </a>
                         </li>
                     </ul>
                 </div>
                 </td>
                <td> 408.7 </td>
                <td> 412 </td>
                <td> 401.3 </td>
                <td> 404.1 </td>
                <td> 408.8 </td>
                <td class="font-red-haze"> -4.7 </td>
                <td class="font-red-haze"> -1.15% </td>
                <td> 600 </td>
                <td> 9.778 </td>
                <td> 24045 </td>
                <td> 17-May, 14:30 </td>
            </tr>
                    <tr>
                                        <td class="highlight"><div class="danger"></div> <a href="javascript:;"><a target="_blank" href="https://dev.stockbangladesh.com/company-details/514">GENNEXT</a></a></td>
                                        <td> <div class="btn-group">
                     <button class="btn green btn-sm dropdown-toggle" type="button" data-toggle="dropdown" aria-expanded="false"> Go To
                         <i class="fa fa-angle-down"></i>
                     </button>
                     <ul class="dropdown-menu" role="menu">
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/ta-chart?instrumentCode=GENNEXT"> TA Chart </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/advance-ta-chart?instrumentCode=GENNEXT"> Advance TA Chart </a>
                         </li>
                                                  <li>
                                                      <a target="_blank" href="https://dev.stockbangladesh.com/minute-chart/514"> Minute Chart </a>
                                                  </li>

                                                  <li>
                                                      <a target="_blank" href="https://dev.stockbangladesh.com/news-chart/514"> News Chart </a>
                                                  </li>



                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/company-details/514"> Company Details </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/fundamental-details/514"> Fundamental Details </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/news/search?keyword=&amp;instrument_id=514&amp;from_date=&amp;to_date="> News</a>
                         </li>
                         <li class="divider"> </li>
                         <li>
                             <a href="javascript:;"> Separated link </a>
                         </li>
                     </ul>
                 </div>
                 </td>
                <td> 8.6 </td>
                <td> 8.8 </td>
                <td> 8.6 </td>
                <td> 8.6 </td>
                <td> 8.8 </td>
                <td class="font-red-haze"> -0.2 </td>
                <td class="font-red-haze"> -2.27% </td>
                <td> 482 </td>
                <td> 11.813 </td>
                <td> 1362019 </td>
                <td> 17-May, 14:30 </td>
            </tr>
                    <tr>
                                        <td class="highlight"><div class="danger"></div> <a href="javascript:;"><a target="_blank" href="https://dev.stockbangladesh.com/company-details/519">GHAIL</a></a></td>
                                        <td> <div class="btn-group">
                     <button class="btn green btn-sm dropdown-toggle" type="button" data-toggle="dropdown" aria-expanded="false"> Go To
                         <i class="fa fa-angle-down"></i>
                     </button>
                     <ul class="dropdown-menu" role="menu">
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/ta-chart?instrumentCode=GHAIL"> TA Chart </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/advance-ta-chart?instrumentCode=GHAIL"> Advance TA Chart </a>
                         </li>
                                                  <li>
                                                      <a target="_blank" href="https://dev.stockbangladesh.com/minute-chart/519"> Minute Chart </a>
                                                  </li>

                                                  <li>
                                                      <a target="_blank" href="https://dev.stockbangladesh.com/news-chart/519"> News Chart </a>
                                                  </li>



                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/company-details/519"> Company Details </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/fundamental-details/519"> Fundamental Details </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/news/search?keyword=&amp;instrument_id=519&amp;from_date=&amp;to_date="> News</a>
                         </li>
                         <li class="divider"> </li>
                         <li>
                             <a href="javascript:;"> Separated link </a>
                         </li>
                     </ul>
                 </div>
                 </td>
                <td> 36.1 </td>
                <td> 37.5 </td>
                <td> 35 </td>
                <td> 35.7 </td>
                <td> 37.1 </td>
                <td class="font-red-haze"> -1.4 </td>
                <td class="font-red-haze"> -3.77% </td>
                <td> 346 </td>
                <td> 9.948 </td>
                <td> 274534 </td>
                <td> 17-May, 14:30 </td>
            </tr>
                    <tr>
            
                <td class="highlight"><div class="success"></div> <a href="javascript:;"><a target="_blank" href="https://dev.stockbangladesh.com/company-details/520">GHCL</a></a></td>
                                                    <td> <div class="btn-group">
                     <button class="btn green btn-sm dropdown-toggle" type="button" data-toggle="dropdown" aria-expanded="false"> Go To
                         <i class="fa fa-angle-down"></i>
                     </button>
                     <ul class="dropdown-menu" role="menu">
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/ta-chart?instrumentCode=GHCL"> TA Chart </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/advance-ta-chart?instrumentCode=GHCL"> Advance TA Chart </a>
                         </li>
                                                  <li>
                                                      <a target="_blank" href="https://dev.stockbangladesh.com/minute-chart/520"> Minute Chart </a>
                                                  </li>

                                                  <li>
                                                      <a target="_blank" href="https://dev.stockbangladesh.com/news-chart/520"> News Chart </a>
                                                  </li>



                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/company-details/520"> Company Details </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/fundamental-details/520"> Fundamental Details </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/news/search?keyword=&amp;instrument_id=520&amp;from_date=&amp;to_date="> News</a>
                         </li>
                         <li class="divider"> </li>
                         <li>
                             <a href="javascript:;"> Separated link </a>
                         </li>
                     </ul>
                 </div>
                 </td>
                <td> 38.3 </td>
                <td> 38.3 </td>
                <td> 37.9 </td>
                <td> 38.1 </td>
                <td> 38.2 </td>
                <td class="font-red-haze"> -0.1 </td>
                <td class="font-red-haze"> -0.26% </td>
                <td> 76 </td>
                <td> 2.345 </td>
                <td> 61734 </td>
                <td> 17-May, 14:30 </td>
            </tr>
                    <tr>
                                        <td class="highlight"><div class="danger"></div> <a href="javascript:;"><a target="_blank" href="https://dev.stockbangladesh.com/company-details/103">GLAXOSMITH</a></a></td>
                                        <td> <div class="btn-group">
                     <button class="btn green btn-sm dropdown-toggle" type="button" data-toggle="dropdown" aria-expanded="false"> Go To
                         <i class="fa fa-angle-down"></i>
                     </button>
                     <ul class="dropdown-menu" role="menu">
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/ta-chart?instrumentCode=GLAXOSMITH"> TA Chart </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/advance-ta-chart?instrumentCode=GLAXOSMITH"> Advance TA Chart </a>
                         </li>
                                                  <li>
                                                      <a target="_blank" href="https://dev.stockbangladesh.com/minute-chart/103"> Minute Chart </a>
                                                  </li>

                                                  <li>
                                                      <a target="_blank" href="https://dev.stockbangladesh.com/news-chart/103"> News Chart </a>
                                                  </li>



                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/company-details/103"> Company Details </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/fundamental-details/103"> Fundamental Details </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/news/search?keyword=&amp;instrument_id=103&amp;from_date=&amp;to_date="> News</a>
                         </li>
                         <li class="divider"> </li>
                         <li>
                             <a href="javascript:;"> Separated link </a>
                         </li>
                     </ul>
                 </div>
                 </td>
                <td> 1425 </td>
                <td> 1458 </td>
                <td> 1425 </td>
                <td> 1428.4 </td>
                <td> 1440.2 </td>
                <td class="font-red-haze"> -11.8 </td>
                <td class="font-red-haze"> -0.82% </td>
                <td> 27 </td>
                <td> 0.887 </td>
                <td> 620 </td>
                <td> 17-May, 14:30 </td>
            </tr>
                    <tr>
                                        <td class="highlight"><div class="danger"></div> <a href="javascript:;"><a target="_blank" href="https://dev.stockbangladesh.com/company-details/104">GLOBALINS</a></a></td>
                                        <td> <div class="btn-group">
                     <button class="btn green btn-sm dropdown-toggle" type="button" data-toggle="dropdown" aria-expanded="false"> Go To
                         <i class="fa fa-angle-down"></i>
                     </button>
                     <ul class="dropdown-menu" role="menu">
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/ta-chart?instrumentCode=GLOBALINS"> TA Chart </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/advance-ta-chart?instrumentCode=GLOBALINS"> Advance TA Chart </a>
                         </li>
                                                  <li>
                                                      <a target="_blank" href="https://dev.stockbangladesh.com/minute-chart/104"> Minute Chart </a>
                                                  </li>

                                                  <li>
                                                      <a target="_blank" href="https://dev.stockbangladesh.com/news-chart/104"> News Chart </a>
                                                  </li>



                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/company-details/104"> Company Details </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/fundamental-details/104"> Fundamental Details </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/news/search?keyword=&amp;instrument_id=104&amp;from_date=&amp;to_date="> News</a>
                         </li>
                         <li class="divider"> </li>
                         <li>
                             <a href="javascript:;"> Separated link </a>
                         </li>
                     </ul>
                 </div>
                 </td>
                <td> 12.5 </td>
                <td> 13.2 </td>
                <td> 12.5 </td>
                <td> 12.6 </td>
                <td> 13 </td>
                <td class="font-red-haze"> -0.4 </td>
                <td class="font-red-haze"> -3.08% </td>
                <td> 48 </td>
                <td> 0.342 </td>
                <td> 26438 </td>
                <td> 17-May, 14:30 </td>
            </tr>
                    <tr>
                                                    <td class="highlight"><div class="info"></div> <a href="javascript:;"><a target="_blank" href="https://dev.stockbangladesh.com/company-details/105">GOLDENSON</a></a></td>
                            <td> <div class="btn-group">
                     <button class="btn green btn-sm dropdown-toggle" type="button" data-toggle="dropdown" aria-expanded="false"> Go To
                         <i class="fa fa-angle-down"></i>
                     </button>
                     <ul class="dropdown-menu" role="menu">
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/ta-chart?instrumentCode=GOLDENSON"> TA Chart </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/advance-ta-chart?instrumentCode=GOLDENSON"> Advance TA Chart </a>
                         </li>
                                                  <li>
                                                      <a target="_blank" href="https://dev.stockbangladesh.com/minute-chart/105"> Minute Chart </a>
                                                  </li>

                                                  <li>
                                                      <a target="_blank" href="https://dev.stockbangladesh.com/news-chart/105"> News Chart </a>
                                                  </li>



                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/company-details/105"> Company Details </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/fundamental-details/105"> Fundamental Details </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/news/search?keyword=&amp;instrument_id=105&amp;from_date=&amp;to_date="> News</a>
                         </li>
                         <li class="divider"> </li>
                         <li>
                             <a href="javascript:;"> Separated link </a>
                         </li>
                     </ul>
                 </div>
                 </td>
                <td> 11.2 </td>
                <td> 11.4 </td>
                <td> 11.1 </td>
                <td> 11.2 </td>
                <td> 11.2 </td>
                <td class="font-green-jungle"> 0 </td>
                <td class="font-green-jungle"> 0% </td>
                <td> 47 </td>
                <td> 0.382 </td>
                <td> 34209 </td>
                <td> 17-May, 14:30 </td>
            </tr>
                    <tr>
                                        <td class="highlight"><div class="danger"></div> <a href="javascript:;"><a target="_blank" href="https://dev.stockbangladesh.com/company-details/106">GP</a></a></td>
                                        <td> <div class="btn-group">
                     <button class="btn green btn-sm dropdown-toggle" type="button" data-toggle="dropdown" aria-expanded="false"> Go To
                         <i class="fa fa-angle-down"></i>
                     </button>
                     <ul class="dropdown-menu" role="menu">
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/ta-chart?instrumentCode=GP"> TA Chart </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/advance-ta-chart?instrumentCode=GP"> Advance TA Chart </a>
                         </li>
                                                  <li>
                                                      <a target="_blank" href="https://dev.stockbangladesh.com/minute-chart/106"> Minute Chart </a>
                                                  </li>

                                                  <li>
                                                      <a target="_blank" href="https://dev.stockbangladesh.com/news-chart/106"> News Chart </a>
                                                  </li>



                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/company-details/106"> Company Details </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/fundamental-details/106"> Fundamental Details </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/news/search?keyword=&amp;instrument_id=106&amp;from_date=&amp;to_date="> News</a>
                         </li>
                         <li class="divider"> </li>
                         <li>
                             <a href="javascript:;"> Separated link </a>
                         </li>
                     </ul>
                 </div>
                 </td>
                <td> 443.5 </td>
                <td> 455.4 </td>
                <td> 443 </td>
                <td> 444.3 </td>
                <td> 452.6 </td>
                <td class="font-red-haze"> -8.3 </td>
                <td class="font-red-haze"> -1.83% </td>
                <td> 1378 </td>
                <td> 100.55 </td>
                <td> 225074 </td>
                <td> 17-May, 14:30 </td>
            </tr>
                    <tr>
            
                <td class="highlight"><div class="success"></div> <a href="javascript:;"><a target="_blank" href="https://dev.stockbangladesh.com/company-details/506">GPHISPAT</a></a></td>
                                                    <td> <div class="btn-group">
                     <button class="btn green btn-sm dropdown-toggle" type="button" data-toggle="dropdown" aria-expanded="false"> Go To
                         <i class="fa fa-angle-down"></i>
                     </button>
                     <ul class="dropdown-menu" role="menu">
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/ta-chart?instrumentCode=GPHISPAT"> TA Chart </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/advance-ta-chart?instrumentCode=GPHISPAT"> Advance TA Chart </a>
                         </li>
                                                  <li>
                                                      <a target="_blank" href="https://dev.stockbangladesh.com/minute-chart/506"> Minute Chart </a>
                                                  </li>

                                                  <li>
                                                      <a target="_blank" href="https://dev.stockbangladesh.com/news-chart/506"> News Chart </a>
                                                  </li>



                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/company-details/506"> Company Details </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/fundamental-details/506"> Fundamental Details </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/news/search?keyword=&amp;instrument_id=506&amp;from_date=&amp;to_date="> News</a>
                         </li>
                         <li class="divider"> </li>
                         <li>
                             <a href="javascript:;"> Separated link </a>
                         </li>
                     </ul>
                 </div>
                 </td>
                <td> 39.3 </td>
                <td> 40.5 </td>
                <td> 38.2 </td>
                <td> 39 </td>
                <td> 37.9 </td>
                <td class="font-green-jungle"> 1.1 </td>
                <td class="font-green-jungle"> 2.9% </td>
                <td> 972 </td>
                <td> 45.594 </td>
                <td> 1149801 </td>
                <td> 17-May, 14:30 </td>
            </tr>
                    <tr>
                                        <td class="highlight"><div class="danger"></div> <a href="javascript:;"><a target="_blank" href="https://dev.stockbangladesh.com/company-details/107">GQBALLPEN</a></a></td>
                                        <td> <div class="btn-group">
                     <button class="btn green btn-sm dropdown-toggle" type="button" data-toggle="dropdown" aria-expanded="false"> Go To
                         <i class="fa fa-angle-down"></i>
                     </button>
                     <ul class="dropdown-menu" role="menu">
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/ta-chart?instrumentCode=GQBALLPEN"> TA Chart </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/advance-ta-chart?instrumentCode=GQBALLPEN"> Advance TA Chart </a>
                         </li>
                                                  <li>
                                                      <a target="_blank" href="https://dev.stockbangladesh.com/minute-chart/107"> Minute Chart </a>
                                                  </li>

                                                  <li>
                                                      <a target="_blank" href="https://dev.stockbangladesh.com/news-chart/107"> News Chart </a>
                                                  </li>



                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/company-details/107"> Company Details </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/fundamental-details/107"> Fundamental Details </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/news/search?keyword=&amp;instrument_id=107&amp;from_date=&amp;to_date="> News</a>
                         </li>
                         <li class="divider"> </li>
                         <li>
                             <a href="javascript:;"> Separated link </a>
                         </li>
                     </ul>
                 </div>
                 </td>
                <td> 70.6 </td>
                <td> 71.4 </td>
                <td> 70.4 </td>
                <td> 70.6 </td>
                <td> 70.9 </td>
                <td class="font-red-haze"> -0.3 </td>
                <td class="font-red-haze"> -0.42% </td>
                <td> 79 </td>
                <td> 1.408 </td>
                <td> 19904 </td>
                <td> 17-May, 14:30 </td>
            </tr>
                    <tr>
                                        <td class="highlight"><div class="danger"></div> <a href="javascript:;"><a target="_blank" href="https://dev.stockbangladesh.com/company-details/109">GRAMEENS2</a></a></td>
                                        <td> <div class="btn-group">
                     <button class="btn green btn-sm dropdown-toggle" type="button" data-toggle="dropdown" aria-expanded="false"> Go To
                         <i class="fa fa-angle-down"></i>
                     </button>
                     <ul class="dropdown-menu" role="menu">
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/ta-chart?instrumentCode=GRAMEENS2"> TA Chart </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/advance-ta-chart?instrumentCode=GRAMEENS2"> Advance TA Chart </a>
                         </li>
                                                  <li>
                                                      <a target="_blank" href="https://dev.stockbangladesh.com/minute-chart/109"> Minute Chart </a>
                                                  </li>

                                                  <li>
                                                      <a target="_blank" href="https://dev.stockbangladesh.com/news-chart/109"> News Chart </a>
                                                  </li>



                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/company-details/109"> Company Details </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/fundamental-details/109"> Fundamental Details </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/news/search?keyword=&amp;instrument_id=109&amp;from_date=&amp;to_date="> News</a>
                         </li>
                         <li class="divider"> </li>
                         <li>
                             <a href="javascript:;"> Separated link </a>
                         </li>
                     </ul>
                 </div>
                 </td>
                <td> 16.7 </td>
                <td> 16.9 </td>
                <td> 16.6 </td>
                <td> 16.6 </td>
                <td> 16.9 </td>
                <td class="font-red-haze"> -0.3 </td>
                <td class="font-red-haze"> -1.78% </td>
                <td> 11 </td>
                <td> 0.232 </td>
                <td> 13950 </td>
                <td> 17-May, 14:30 </td>
            </tr>
                    <tr>
                                        <td class="highlight"><div class="danger"></div> <a href="javascript:;"><a target="_blank" href="https://dev.stockbangladesh.com/company-details/110">GREENDELMF</a></a></td>
                                        <td> <div class="btn-group">
                     <button class="btn green btn-sm dropdown-toggle" type="button" data-toggle="dropdown" aria-expanded="false"> Go To
                         <i class="fa fa-angle-down"></i>
                     </button>
                     <ul class="dropdown-menu" role="menu">
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/ta-chart?instrumentCode=GREENDELMF"> TA Chart </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/advance-ta-chart?instrumentCode=GREENDELMF"> Advance TA Chart </a>
                         </li>
                                                  <li>
                                                      <a target="_blank" href="https://dev.stockbangladesh.com/minute-chart/110"> Minute Chart </a>
                                                  </li>

                                                  <li>
                                                      <a target="_blank" href="https://dev.stockbangladesh.com/news-chart/110"> News Chart </a>
                                                  </li>



                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/company-details/110"> Company Details </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/fundamental-details/110"> Fundamental Details </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/news/search?keyword=&amp;instrument_id=110&amp;from_date=&amp;to_date="> News</a>
                         </li>
                         <li class="divider"> </li>
                         <li>
                             <a href="javascript:;"> Separated link </a>
                         </li>
                     </ul>
                 </div>
                 </td>
                <td> 9.3 </td>
                <td> 9.7 </td>
                <td> 9 </td>
                <td> 9.1 </td>
                <td> 9.4 </td>
                <td class="font-red-haze"> -0.3 </td>
                <td class="font-red-haze"> -3.19% </td>
                <td> 33 </td>
                <td> 1.97 </td>
                <td> 214580 </td>
                <td> 17-May, 14:30 </td>
            </tr>
                    <tr>
                                        <td class="highlight"><div class="danger"></div> <a href="javascript:;"><a target="_blank" href="https://dev.stockbangladesh.com/company-details/111">GREENDELT</a></a></td>
                                        <td> <div class="btn-group">
                     <button class="btn green btn-sm dropdown-toggle" type="button" data-toggle="dropdown" aria-expanded="false"> Go To
                         <i class="fa fa-angle-down"></i>
                     </button>
                     <ul class="dropdown-menu" role="menu">
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/ta-chart?instrumentCode=GREENDELT"> TA Chart </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/advance-ta-chart?instrumentCode=GREENDELT"> Advance TA Chart </a>
                         </li>
                                                  <li>
                                                      <a target="_blank" href="https://dev.stockbangladesh.com/minute-chart/111"> Minute Chart </a>
                                                  </li>

                                                  <li>
                                                      <a target="_blank" href="https://dev.stockbangladesh.com/news-chart/111"> News Chart </a>
                                                  </li>



                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/company-details/111"> Company Details </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/fundamental-details/111"> Fundamental Details </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/news/search?keyword=&amp;instrument_id=111&amp;from_date=&amp;to_date="> News</a>
                         </li>
                         <li class="divider"> </li>
                         <li>
                             <a href="javascript:;"> Separated link </a>
                         </li>
                     </ul>
                 </div>
                 </td>
                <td> 58.5 </td>
                <td> 59 </td>
                <td> 58.2 </td>
                <td> 58.5 </td>
                <td> 58.8 </td>
                <td class="font-red-haze"> -0.3 </td>
                <td class="font-red-haze"> -0.51% </td>
                <td> 45 </td>
                <td> 1.716 </td>
                <td> 29326 </td>
                <td> 17-May, 14:30 </td>
            </tr>
                    <tr>
                                        <td class="highlight"><div class="danger"></div> <a href="javascript:;"><a target="_blank" href="https://dev.stockbangladesh.com/company-details/505">GSPFINANCE</a></a></td>
                                        <td> <div class="btn-group">
                     <button class="btn green btn-sm dropdown-toggle" type="button" data-toggle="dropdown" aria-expanded="false"> Go To
                         <i class="fa fa-angle-down"></i>
                     </button>
                     <ul class="dropdown-menu" role="menu">
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/ta-chart?instrumentCode=GSPFINANCE"> TA Chart </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/advance-ta-chart?instrumentCode=GSPFINANCE"> Advance TA Chart </a>
                         </li>
                                                  <li>
                                                      <a target="_blank" href="https://dev.stockbangladesh.com/minute-chart/505"> Minute Chart </a>
                                                  </li>

                                                  <li>
                                                      <a target="_blank" href="https://dev.stockbangladesh.com/news-chart/505"> News Chart </a>
                                                  </li>



                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/company-details/505"> Company Details </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/fundamental-details/505"> Fundamental Details </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/news/search?keyword=&amp;instrument_id=505&amp;from_date=&amp;to_date="> News</a>
                         </li>
                         <li class="divider"> </li>
                         <li>
                             <a href="javascript:;"> Separated link </a>
                         </li>
                     </ul>
                 </div>
                 </td>
                <td> 16.9 </td>
                <td> 17.3 </td>
                <td> 16.8 </td>
                <td> 16.9 </td>
                <td> 17.3 </td>
                <td class="font-red-haze"> -0.4 </td>
                <td class="font-red-haze"> -2.31% </td>
                <td> 169 </td>
                <td> 3.423 </td>
                <td> 201628 </td>
                <td> 17-May, 14:30 </td>
            </tr>
                    <tr>
                                        <td class="highlight"><div class="danger"></div> <a href="javascript:;"><a target="_blank" href="https://dev.stockbangladesh.com/company-details/112">HAKKANIPUL</a></a></td>
                                        <td> <div class="btn-group">
                     <button class="btn green btn-sm dropdown-toggle" type="button" data-toggle="dropdown" aria-expanded="false"> Go To
                         <i class="fa fa-angle-down"></i>
                     </button>
                     <ul class="dropdown-menu" role="menu">
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/ta-chart?instrumentCode=HAKKANIPUL"> TA Chart </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/advance-ta-chart?instrumentCode=HAKKANIPUL"> Advance TA Chart </a>
                         </li>
                                                  <li>
                                                      <a target="_blank" href="https://dev.stockbangladesh.com/minute-chart/112"> Minute Chart </a>
                                                  </li>

                                                  <li>
                                                      <a target="_blank" href="https://dev.stockbangladesh.com/news-chart/112"> News Chart </a>
                                                  </li>



                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/company-details/112"> Company Details </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/fundamental-details/112"> Fundamental Details </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/news/search?keyword=&amp;instrument_id=112&amp;from_date=&amp;to_date="> News</a>
                         </li>
                         <li class="divider"> </li>
                         <li>
                             <a href="javascript:;"> Separated link </a>
                         </li>
                     </ul>
                 </div>
                 </td>
                <td> 56 </td>
                <td> 59 </td>
                <td> 56 </td>
                <td> 56.2 </td>
                <td> 57 </td>
                <td class="font-red-haze"> -0.8 </td>
                <td class="font-red-haze"> -1.4% </td>
                <td> 56 </td>
                <td> 0.615 </td>
                <td> 10912 </td>
                <td> 17-May, 14:30 </td>
            </tr>
                    <tr>
                                        <td class="highlight"><div class="danger"></div> <a href="javascript:;"><a target="_blank" href="https://dev.stockbangladesh.com/company-details/113">HEIDELBCEM</a></a></td>
                                        <td> <div class="btn-group">
                     <button class="btn green btn-sm dropdown-toggle" type="button" data-toggle="dropdown" aria-expanded="false"> Go To
                         <i class="fa fa-angle-down"></i>
                     </button>
                     <ul class="dropdown-menu" role="menu">
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/ta-chart?instrumentCode=HEIDELBCEM"> TA Chart </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/advance-ta-chart?instrumentCode=HEIDELBCEM"> Advance TA Chart </a>
                         </li>
                                                  <li>
                                                      <a target="_blank" href="https://dev.stockbangladesh.com/minute-chart/113"> Minute Chart </a>
                                                  </li>

                                                  <li>
                                                      <a target="_blank" href="https://dev.stockbangladesh.com/news-chart/113"> News Chart </a>
                                                  </li>



                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/company-details/113"> Company Details </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/fundamental-details/113"> Fundamental Details </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/news/search?keyword=&amp;instrument_id=113&amp;from_date=&amp;to_date="> News</a>
                         </li>
                         <li class="divider"> </li>
                         <li>
                             <a href="javascript:;"> Separated link </a>
                         </li>
                     </ul>
                 </div>
                 </td>
                <td> 0 </td>
                <td> 379.1 </td>
                <td> 374.7 </td>
                <td> 375.7 </td>
                <td> 376.8 </td>
                <td class="font-red-haze"> -1.1 </td>
                <td class="font-red-haze"> -0.29% </td>
                <td> 190 </td>
                <td> 3.851 </td>
                <td> 10245 </td>
                <td> 17-May, 14:30 </td>
            </tr>
                    <tr>
                                                    <td class="highlight"><div class="info"></div> <a href="javascript:;"><a target="_blank" href="https://dev.stockbangladesh.com/company-details/30002">HFL</a></a></td>
                            <td> <div class="btn-group">
                     <button class="btn green btn-sm dropdown-toggle" type="button" data-toggle="dropdown" aria-expanded="false"> Go To
                         <i class="fa fa-angle-down"></i>
                     </button>
                     <ul class="dropdown-menu" role="menu">
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/ta-chart?instrumentCode=HFL"> TA Chart </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/advance-ta-chart?instrumentCode=HFL"> Advance TA Chart </a>
                         </li>
                                                  <li>
                                                      <a target="_blank" href="https://dev.stockbangladesh.com/minute-chart/30002"> Minute Chart </a>
                                                  </li>

                                                  <li>
                                                      <a target="_blank" href="https://dev.stockbangladesh.com/news-chart/30002"> News Chart </a>
                                                  </li>



                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/company-details/30002"> Company Details </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/fundamental-details/30002"> Fundamental Details </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/news/search?keyword=&amp;instrument_id=30002&amp;from_date=&amp;to_date="> News</a>
                         </li>
                         <li class="divider"> </li>
                         <li>
                             <a href="javascript:;"> Separated link </a>
                         </li>
                     </ul>
                 </div>
                 </td>
                <td> 24.9 </td>
                <td> 25.4 </td>
                <td> 24.9 </td>
                <td> 25 </td>
                <td> 24.9 </td>
                <td class="font-green-jungle"> 0.1 </td>
                <td class="font-green-jungle"> 0.4% </td>
                <td> 155 </td>
                <td> 2.169 </td>
                <td> 86673 </td>
                <td> 17-May, 14:30 </td>
            </tr>
                    <tr>
                                        <td class="highlight"><div class="danger"></div> <a href="javascript:;"><a target="_blank" href="https://dev.stockbangladesh.com/company-details/114">HRTEX</a></a></td>
                                        <td> <div class="btn-group">
                     <button class="btn green btn-sm dropdown-toggle" type="button" data-toggle="dropdown" aria-expanded="false"> Go To
                         <i class="fa fa-angle-down"></i>
                     </button>
                     <ul class="dropdown-menu" role="menu">
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/ta-chart?instrumentCode=HRTEX"> TA Chart </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/advance-ta-chart?instrumentCode=HRTEX"> Advance TA Chart </a>
                         </li>
                                                  <li>
                                                      <a target="_blank" href="https://dev.stockbangladesh.com/minute-chart/114"> Minute Chart </a>
                                                  </li>

                                                  <li>
                                                      <a target="_blank" href="https://dev.stockbangladesh.com/news-chart/114"> News Chart </a>
                                                  </li>



                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/company-details/114"> Company Details </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/fundamental-details/114"> Fundamental Details </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/news/search?keyword=&amp;instrument_id=114&amp;from_date=&amp;to_date="> News</a>
                         </li>
                         <li class="divider"> </li>
                         <li>
                             <a href="javascript:;"> Separated link </a>
                         </li>
                     </ul>
                 </div>
                 </td>
                <td> 38.5 </td>
                <td> 41.6 </td>
                <td> 38.5 </td>
                <td> 38.7 </td>
                <td> 40.5 </td>
                <td class="font-red-haze"> -1.8 </td>
                <td class="font-red-haze"> -4.44% </td>
                <td> 1226 </td>
                <td> 39.347 </td>
                <td> 985944 </td>
                <td> 17-May, 14:30 </td>
            </tr>
                    <tr>
                                        <td class="highlight"><div class="danger"></div> <a href="javascript:;"><a target="_blank" href="https://dev.stockbangladesh.com/company-details/534">HWAWELLTEX</a></a></td>
                                        <td> <div class="btn-group">
                     <button class="btn green btn-sm dropdown-toggle" type="button" data-toggle="dropdown" aria-expanded="false"> Go To
                         <i class="fa fa-angle-down"></i>
                     </button>
                     <ul class="dropdown-menu" role="menu">
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/ta-chart?instrumentCode=HWAWELLTEX"> TA Chart </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/advance-ta-chart?instrumentCode=HWAWELLTEX"> Advance TA Chart </a>
                         </li>
                                                  <li>
                                                      <a target="_blank" href="https://dev.stockbangladesh.com/minute-chart/534"> Minute Chart </a>
                                                  </li>

                                                  <li>
                                                      <a target="_blank" href="https://dev.stockbangladesh.com/news-chart/534"> News Chart </a>
                                                  </li>



                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/company-details/534"> Company Details </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/fundamental-details/534"> Fundamental Details </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/news/search?keyword=&amp;instrument_id=534&amp;from_date=&amp;to_date="> News</a>
                         </li>
                         <li class="divider"> </li>
                         <li>
                             <a href="javascript:;"> Separated link </a>
                         </li>
                     </ul>
                 </div>
                 </td>
                <td> 36.8 </td>
                <td> 37.3 </td>
                <td> 36.6 </td>
                <td> 36.8 </td>
                <td> 37.6 </td>
                <td class="font-red-haze"> -0.8 </td>
                <td class="font-red-haze"> -2.13% </td>
                <td> 29 </td>
                <td> 0.28 </td>
                <td> 7605 </td>
                <td> 17-May, 14:30 </td>
            </tr>
                    <tr>
                                        <td class="highlight"><div class="danger"></div> <a href="javascript:;"><a target="_blank" href="https://dev.stockbangladesh.com/company-details/115">IBBLPBOND</a></a></td>
                                        <td> <div class="btn-group">
                     <button class="btn green btn-sm dropdown-toggle" type="button" data-toggle="dropdown" aria-expanded="false"> Go To
                         <i class="fa fa-angle-down"></i>
                     </button>
                     <ul class="dropdown-menu" role="menu">
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/ta-chart?instrumentCode=IBBLPBOND"> TA Chart </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/advance-ta-chart?instrumentCode=IBBLPBOND"> Advance TA Chart </a>
                         </li>
                                                  <li>
                                                      <a target="_blank" href="https://dev.stockbangladesh.com/minute-chart/115"> Minute Chart </a>
                                                  </li>

                                                  <li>
                                                      <a target="_blank" href="https://dev.stockbangladesh.com/news-chart/115"> News Chart </a>
                                                  </li>



                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/company-details/115"> Company Details </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/fundamental-details/115"> Fundamental Details </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/news/search?keyword=&amp;instrument_id=115&amp;from_date=&amp;to_date="> News</a>
                         </li>
                         <li class="divider"> </li>
                         <li>
                             <a href="javascript:;"> Separated link </a>
                         </li>
                     </ul>
                 </div>
                 </td>
                <td> 0 </td>
                <td> 983.5 </td>
                <td> 982 </td>
                <td> 982.5 </td>
                <td> 987.5 </td>
                <td class="font-red-haze"> -5 </td>
                <td class="font-red-haze"> -0.51% </td>
                <td> 6 </td>
                <td> 0.085 </td>
                <td> 86 </td>
                <td> 17-May, 14:30 </td>
            </tr>
                    <tr>
                                        <td class="highlight"><div class="danger"></div> <a href="javascript:;"><a target="_blank" href="https://dev.stockbangladesh.com/company-details/116">IBNSINA</a></a></td>
                                        <td> <div class="btn-group">
                     <button class="btn green btn-sm dropdown-toggle" type="button" data-toggle="dropdown" aria-expanded="false"> Go To
                         <i class="fa fa-angle-down"></i>
                     </button>
                     <ul class="dropdown-menu" role="menu">
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/ta-chart?instrumentCode=IBNSINA"> TA Chart </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/advance-ta-chart?instrumentCode=IBNSINA"> Advance TA Chart </a>
                         </li>
                                                  <li>
                                                      <a target="_blank" href="https://dev.stockbangladesh.com/minute-chart/116"> Minute Chart </a>
                                                  </li>

                                                  <li>
                                                      <a target="_blank" href="https://dev.stockbangladesh.com/news-chart/116"> News Chart </a>
                                                  </li>



                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/company-details/116"> Company Details </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/fundamental-details/116"> Fundamental Details </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/news/search?keyword=&amp;instrument_id=116&amp;from_date=&amp;to_date="> News</a>
                         </li>
                         <li class="divider"> </li>
                         <li>
                             <a href="javascript:;"> Separated link </a>
                         </li>
                     </ul>
                 </div>
                 </td>
                <td> 250.3 </td>
                <td> 258.9 </td>
                <td> 250 </td>
                <td> 252.1 </td>
                <td> 258.8 </td>
                <td class="font-red-haze"> -6.7 </td>
                <td class="font-red-haze"> -2.59% </td>
                <td> 290 </td>
                <td> 12.491 </td>
                <td> 49088 </td>
                <td> 17-May, 14:30 </td>
            </tr>
                    <tr>
                                        <td class="highlight"><div class="danger"></div> <a href="javascript:;"><a target="_blank" href="https://dev.stockbangladesh.com/company-details/117">ICB</a></a></td>
                                        <td> <div class="btn-group">
                     <button class="btn green btn-sm dropdown-toggle" type="button" data-toggle="dropdown" aria-expanded="false"> Go To
                         <i class="fa fa-angle-down"></i>
                     </button>
                     <ul class="dropdown-menu" role="menu">
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/ta-chart?instrumentCode=ICB"> TA Chart </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/advance-ta-chart?instrumentCode=ICB"> Advance TA Chart </a>
                         </li>
                                                  <li>
                                                      <a target="_blank" href="https://dev.stockbangladesh.com/minute-chart/117"> Minute Chart </a>
                                                  </li>

                                                  <li>
                                                      <a target="_blank" href="https://dev.stockbangladesh.com/news-chart/117"> News Chart </a>
                                                  </li>



                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/company-details/117"> Company Details </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/fundamental-details/117"> Fundamental Details </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/news/search?keyword=&amp;instrument_id=117&amp;from_date=&amp;to_date="> News</a>
                         </li>
                         <li class="divider"> </li>
                         <li>
                             <a href="javascript:;"> Separated link </a>
                         </li>
                     </ul>
                 </div>
                 </td>
                <td> 125.1 </td>
                <td> 128.9 </td>
                <td> 124.4 </td>
                <td> 124.8 </td>
                <td> 127.5 </td>
                <td class="font-red-haze"> -2.7 </td>
                <td class="font-red-haze"> -2.12% </td>
                <td> 268 </td>
                <td> 4.297 </td>
                <td> 34322 </td>
                <td> 17-May, 14:30 </td>
            </tr>
                    <tr>
                                                    <td class="highlight"><div class="info"></div> <a href="javascript:;"><a target="_blank" href="https://dev.stockbangladesh.com/company-details/119">ICB2NDNRB</a></a></td>
                            <td> <div class="btn-group">
                     <button class="btn green btn-sm dropdown-toggle" type="button" data-toggle="dropdown" aria-expanded="false"> Go To
                         <i class="fa fa-angle-down"></i>
                     </button>
                     <ul class="dropdown-menu" role="menu">
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/ta-chart?instrumentCode=ICB2NDNRB"> TA Chart </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/advance-ta-chart?instrumentCode=ICB2NDNRB"> Advance TA Chart </a>
                         </li>
                                                  <li>
                                                      <a target="_blank" href="https://dev.stockbangladesh.com/minute-chart/119"> Minute Chart </a>
                                                  </li>

                                                  <li>
                                                      <a target="_blank" href="https://dev.stockbangladesh.com/news-chart/119"> News Chart </a>
                                                  </li>



                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/company-details/119"> Company Details </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/fundamental-details/119"> Fundamental Details </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/news/search?keyword=&amp;instrument_id=119&amp;from_date=&amp;to_date="> News</a>
                         </li>
                         <li class="divider"> </li>
                         <li>
                             <a href="javascript:;"> Separated link </a>
                         </li>
                     </ul>
                 </div>
                 </td>
                <td> 10 </td>
                <td> 10 </td>
                <td> 9.9 </td>
                <td> 9.9 </td>
                <td> 10 </td>
                <td class="font-red-haze"> -0.1 </td>
                <td class="font-red-haze"> -1% </td>
                <td> 9 </td>
                <td> 0.127 </td>
                <td> 12800 </td>
                <td> 17-May, 14:30 </td>
            </tr>
                    <tr>
                                                    <td class="highlight"><div class="info"></div> <a href="javascript:;"><a target="_blank" href="https://dev.stockbangladesh.com/company-details/120">ICB3RDNRB</a></a></td>
                            <td> <div class="btn-group">
                     <button class="btn green btn-sm dropdown-toggle" type="button" data-toggle="dropdown" aria-expanded="false"> Go To
                         <i class="fa fa-angle-down"></i>
                     </button>
                     <ul class="dropdown-menu" role="menu">
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/ta-chart?instrumentCode=ICB3RDNRB"> TA Chart </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/advance-ta-chart?instrumentCode=ICB3RDNRB"> Advance TA Chart </a>
                         </li>
                                                  <li>
                                                      <a target="_blank" href="https://dev.stockbangladesh.com/minute-chart/120"> Minute Chart </a>
                                                  </li>

                                                  <li>
                                                      <a target="_blank" href="https://dev.stockbangladesh.com/news-chart/120"> News Chart </a>
                                                  </li>



                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/company-details/120"> Company Details </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/fundamental-details/120"> Fundamental Details </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/news/search?keyword=&amp;instrument_id=120&amp;from_date=&amp;to_date="> News</a>
                         </li>
                         <li class="divider"> </li>
                         <li>
                             <a href="javascript:;"> Separated link </a>
                         </li>
                     </ul>
                 </div>
                 </td>
                <td> 6.1 </td>
                <td> 6.2 </td>
                <td> 6.1 </td>
                <td> 6.1 </td>
                <td> 6.1 </td>
                <td class="font-green-jungle"> 0 </td>
                <td class="font-green-jungle"> 0% </td>
                <td> 14 </td>
                <td> 0.582 </td>
                <td> 95148 </td>
                <td> 17-May, 14:30 </td>
            </tr>
                    <tr>
                                        <td class="highlight"><div class="danger"></div> <a href="javascript:;"><a target="_blank" href="https://dev.stockbangladesh.com/company-details/30036">ICBAGRANI1</a></a></td>
                                        <td> <div class="btn-group">
                     <button class="btn green btn-sm dropdown-toggle" type="button" data-toggle="dropdown" aria-expanded="false"> Go To
                         <i class="fa fa-angle-down"></i>
                     </button>
                     <ul class="dropdown-menu" role="menu">
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/ta-chart?instrumentCode=ICBAGRANI1"> TA Chart </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/advance-ta-chart?instrumentCode=ICBAGRANI1"> Advance TA Chart </a>
                         </li>
                                                  <li>
                                                      <a target="_blank" href="https://dev.stockbangladesh.com/minute-chart/30036"> Minute Chart </a>
                                                  </li>

                                                  <li>
                                                      <a target="_blank" href="https://dev.stockbangladesh.com/news-chart/30036"> News Chart </a>
                                                  </li>



                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/company-details/30036"> Company Details </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/fundamental-details/30036"> Fundamental Details </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/news/search?keyword=&amp;instrument_id=30036&amp;from_date=&amp;to_date="> News</a>
                         </li>
                         <li class="divider"> </li>
                         <li>
                             <a href="javascript:;"> Separated link </a>
                         </li>
                     </ul>
                 </div>
                 </td>
                <td> 7.4 </td>
                <td> 7.6 </td>
                <td> 7.4 </td>
                <td> 7.5 </td>
                <td> 7.6 </td>
                <td class="font-red-haze"> -0.1 </td>
                <td class="font-red-haze"> -1.32% </td>
                <td> 36 </td>
                <td> 0.731 </td>
                <td> 97750 </td>
                <td> 17-May, 14:30 </td>
            </tr>
                    <tr>
                                        <td class="highlight"><div class="danger"></div> <a href="javascript:;"><a target="_blank" href="https://dev.stockbangladesh.com/company-details/147">ICBAMCL2ND</a></a></td>
                                        <td> <div class="btn-group">
                     <button class="btn green btn-sm dropdown-toggle" type="button" data-toggle="dropdown" aria-expanded="false"> Go To
                         <i class="fa fa-angle-down"></i>
                     </button>
                     <ul class="dropdown-menu" role="menu">
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/ta-chart?instrumentCode=ICBAMCL2ND"> TA Chart </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/advance-ta-chart?instrumentCode=ICBAMCL2ND"> Advance TA Chart </a>
                         </li>
                                                  <li>
                                                      <a target="_blank" href="https://dev.stockbangladesh.com/minute-chart/147"> Minute Chart </a>
                                                  </li>

                                                  <li>
                                                      <a target="_blank" href="https://dev.stockbangladesh.com/news-chart/147"> News Chart </a>
                                                  </li>



                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/company-details/147"> Company Details </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/fundamental-details/147"> Fundamental Details </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/news/search?keyword=&amp;instrument_id=147&amp;from_date=&amp;to_date="> News</a>
                         </li>
                         <li class="divider"> </li>
                         <li>
                             <a href="javascript:;"> Separated link </a>
                         </li>
                     </ul>
                 </div>
                 </td>
                <td> 7.8 </td>
                <td> 8 </td>
                <td> 7.8 </td>
                <td> 8 </td>
                <td> 8.1 </td>
                <td class="font-red-haze"> -0.1 </td>
                <td class="font-red-haze"> -1.23% </td>
                <td> 11 </td>
                <td> 0.113 </td>
                <td> 14110 </td>
                <td> 17-May, 14:30 </td>
            </tr>
                    <tr>
                                        <td class="highlight"><div class="danger"></div> <a href="javascript:;"><a target="_blank" href="https://dev.stockbangladesh.com/company-details/148">ICBEPMF1S1</a></a></td>
                                        <td> <div class="btn-group">
                     <button class="btn green btn-sm dropdown-toggle" type="button" data-toggle="dropdown" aria-expanded="false"> Go To
                         <i class="fa fa-angle-down"></i>
                     </button>
                     <ul class="dropdown-menu" role="menu">
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/ta-chart?instrumentCode=ICBEPMF1S1"> TA Chart </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/advance-ta-chart?instrumentCode=ICBEPMF1S1"> Advance TA Chart </a>
                         </li>
                                                  <li>
                                                      <a target="_blank" href="https://dev.stockbangladesh.com/minute-chart/148"> Minute Chart </a>
                                                  </li>

                                                  <li>
                                                      <a target="_blank" href="https://dev.stockbangladesh.com/news-chart/148"> News Chart </a>
                                                  </li>



                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/company-details/148"> Company Details </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/fundamental-details/148"> Fundamental Details </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/news/search?keyword=&amp;instrument_id=148&amp;from_date=&amp;to_date="> News</a>
                         </li>
                         <li class="divider"> </li>
                         <li>
                             <a href="javascript:;"> Separated link </a>
                         </li>
                     </ul>
                 </div>
                 </td>
                <td> 6.7 </td>
                <td> 6.8 </td>
                <td> 6.7 </td>
                <td> 6.8 </td>
                <td> 6.8 </td>
                <td class="font-green-jungle"> 0 </td>
                <td class="font-green-jungle"> 0% </td>
                <td> 22 </td>
                <td> 0.364 </td>
                <td> 53714 </td>
                <td> 17-May, 14:30 </td>
            </tr>
                    <tr>
                                        <td class="highlight"><div class="danger"></div> <a href="javascript:;"><a target="_blank" href="https://dev.stockbangladesh.com/company-details/149">ICBIBANK</a></a></td>
                                        <td> <div class="btn-group">
                     <button class="btn green btn-sm dropdown-toggle" type="button" data-toggle="dropdown" aria-expanded="false"> Go To
                         <i class="fa fa-angle-down"></i>
                     </button>
                     <ul class="dropdown-menu" role="menu">
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/ta-chart?instrumentCode=ICBIBANK"> TA Chart </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/advance-ta-chart?instrumentCode=ICBIBANK"> Advance TA Chart </a>
                         </li>
                                                  <li>
                                                      <a target="_blank" href="https://dev.stockbangladesh.com/minute-chart/149"> Minute Chart </a>
                                                  </li>

                                                  <li>
                                                      <a target="_blank" href="https://dev.stockbangladesh.com/news-chart/149"> News Chart </a>
                                                  </li>



                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/company-details/149"> Company Details </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/fundamental-details/149"> Fundamental Details </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/news/search?keyword=&amp;instrument_id=149&amp;from_date=&amp;to_date="> News</a>
                         </li>
                         <li class="divider"> </li>
                         <li>
                             <a href="javascript:;"> Separated link </a>
                         </li>
                     </ul>
                 </div>
                 </td>
                <td> 4.8 </td>
                <td> 4.9 </td>
                <td> 4.8 </td>
                <td> 4.8 </td>
                <td> 4.9 </td>
                <td class="font-red-haze"> -0.1 </td>
                <td class="font-red-haze"> -2.04% </td>
                <td> 35 </td>
                <td> 0.689 </td>
                <td> 142861 </td>
                <td> 17-May, 14:30 </td>
            </tr>
                    <tr>
                                        <td class="highlight"><div class="danger"></div> <a href="javascript:;"><a target="_blank" href="https://dev.stockbangladesh.com/company-details/523">ICBSONALI1</a></a></td>
                                        <td> <div class="btn-group">
                     <button class="btn green btn-sm dropdown-toggle" type="button" data-toggle="dropdown" aria-expanded="false"> Go To
                         <i class="fa fa-angle-down"></i>
                     </button>
                     <ul class="dropdown-menu" role="menu">
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/ta-chart?instrumentCode=ICBSONALI1"> TA Chart </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/advance-ta-chart?instrumentCode=ICBSONALI1"> Advance TA Chart </a>
                         </li>
                                                  <li>
                                                      <a target="_blank" href="https://dev.stockbangladesh.com/minute-chart/523"> Minute Chart </a>
                                                  </li>

                                                  <li>
                                                      <a target="_blank" href="https://dev.stockbangladesh.com/news-chart/523"> News Chart </a>
                                                  </li>



                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/company-details/523"> Company Details </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/fundamental-details/523"> Fundamental Details </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/news/search?keyword=&amp;instrument_id=523&amp;from_date=&amp;to_date="> News</a>
                         </li>
                         <li class="divider"> </li>
                         <li>
                             <a href="javascript:;"> Separated link </a>
                         </li>
                     </ul>
                 </div>
                 </td>
                <td> 8.3 </td>
                <td> 8.7 </td>
                <td> 8.3 </td>
                <td> 8.6 </td>
                <td> 8.5 </td>
                <td class="font-green-jungle"> 0.1 </td>
                <td class="font-green-jungle"> 1.18% </td>
                <td> 19 </td>
                <td> 0.913 </td>
                <td> 106000 </td>
                <td> 17-May, 14:30 </td>
            </tr>
                    <tr>
                                        <td class="highlight"><div class="danger"></div> <a href="javascript:;"><a target="_blank" href="https://dev.stockbangladesh.com/company-details/151">IDLC</a></a></td>
                                        <td> <div class="btn-group">
                     <button class="btn green btn-sm dropdown-toggle" type="button" data-toggle="dropdown" aria-expanded="false"> Go To
                         <i class="fa fa-angle-down"></i>
                     </button>
                     <ul class="dropdown-menu" role="menu">
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/ta-chart?instrumentCode=IDLC"> TA Chart </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/advance-ta-chart?instrumentCode=IDLC"> Advance TA Chart </a>
                         </li>
                                                  <li>
                                                      <a target="_blank" href="https://dev.stockbangladesh.com/minute-chart/151"> Minute Chart </a>
                                                  </li>

                                                  <li>
                                                      <a target="_blank" href="https://dev.stockbangladesh.com/news-chart/151"> News Chart </a>
                                                  </li>



                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/company-details/151"> Company Details </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/fundamental-details/151"> Fundamental Details </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/news/search?keyword=&amp;instrument_id=151&amp;from_date=&amp;to_date="> News</a>
                         </li>
                         <li class="divider"> </li>
                         <li>
                             <a href="javascript:;"> Separated link </a>
                         </li>
                     </ul>
                 </div>
                 </td>
                <td> 68.2 </td>
                <td> 70 </td>
                <td> 68.2 </td>
                <td> 68.5 </td>
                <td> 70.1 </td>
                <td class="font-red-haze"> -1.6 </td>
                <td class="font-red-haze"> -2.28% </td>
                <td> 111 </td>
                <td> 4.168 </td>
                <td> 60447 </td>
                <td> 17-May, 14:30 </td>
            </tr>
                    <tr>
            
                <td class="highlight"><div class="success"></div> <a href="javascript:;"><a target="_blank" href="https://dev.stockbangladesh.com/company-details/30006">IFADAUTOS</a></a></td>
                                                    <td> <div class="btn-group">
                     <button class="btn green btn-sm dropdown-toggle" type="button" data-toggle="dropdown" aria-expanded="false"> Go To
                         <i class="fa fa-angle-down"></i>
                     </button>
                     <ul class="dropdown-menu" role="menu">
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/ta-chart?instrumentCode=IFADAUTOS"> TA Chart </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/advance-ta-chart?instrumentCode=IFADAUTOS"> Advance TA Chart </a>
                         </li>
                                                  <li>
                                                      <a target="_blank" href="https://dev.stockbangladesh.com/minute-chart/30006"> Minute Chart </a>
                                                  </li>

                                                  <li>
                                                      <a target="_blank" href="https://dev.stockbangladesh.com/news-chart/30006"> News Chart </a>
                                                  </li>



                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/company-details/30006"> Company Details </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/fundamental-details/30006"> Fundamental Details </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/news/search?keyword=&amp;instrument_id=30006&amp;from_date=&amp;to_date="> News</a>
                         </li>
                         <li class="divider"> </li>
                         <li>
                             <a href="javascript:;"> Separated link </a>
                         </li>
                     </ul>
                 </div>
                 </td>
                <td> 114.5 </td>
                <td> 115.8 </td>
                <td> 113.9 </td>
                <td> 114.4 </td>
                <td> 114.4 </td>
                <td class="font-green-jungle"> 0 </td>
                <td class="font-green-jungle"> 0% </td>
                <td> 1177 </td>
                <td> 65.741 </td>
                <td> 572683 </td>
                <td> 17-May, 14:30 </td>
            </tr>
                    <tr>
                                        <td class="highlight"><div class="danger"></div> <a href="javascript:;"><a target="_blank" href="https://dev.stockbangladesh.com/company-details/152">IFIC</a></a></td>
                                        <td> <div class="btn-group">
                     <button class="btn green btn-sm dropdown-toggle" type="button" data-toggle="dropdown" aria-expanded="false"> Go To
                         <i class="fa fa-angle-down"></i>
                     </button>
                     <ul class="dropdown-menu" role="menu">
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/ta-chart?instrumentCode=IFIC"> TA Chart </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/advance-ta-chart?instrumentCode=IFIC"> Advance TA Chart </a>
                         </li>
                                                  <li>
                                                      <a target="_blank" href="https://dev.stockbangladesh.com/minute-chart/152"> Minute Chart </a>
                                                  </li>

                                                  <li>
                                                      <a target="_blank" href="https://dev.stockbangladesh.com/news-chart/152"> News Chart </a>
                                                  </li>



                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/company-details/152"> Company Details </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/fundamental-details/152"> Fundamental Details </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/news/search?keyword=&amp;instrument_id=152&amp;from_date=&amp;to_date="> News</a>
                         </li>
                         <li class="divider"> </li>
                         <li>
                             <a href="javascript:;"> Separated link </a>
                         </li>
                     </ul>
                 </div>
                 </td>
                <td> 13.1 </td>
                <td> 13.3 </td>
                <td> 13.1 </td>
                <td> 13.1 </td>
                <td> 13.3 </td>
                <td class="font-red-haze"> -0.2 </td>
                <td class="font-red-haze"> -1.5% </td>
                <td> 281 </td>
                <td> 12.949 </td>
                <td> 983080 </td>
                <td> 17-May, 14:30 </td>
            </tr>
                    <tr>
                                                    <td class="highlight"><div class="info"></div> <a href="javascript:;"><a target="_blank" href="https://dev.stockbangladesh.com/company-details/153">IFIC1STMF</a></a></td>
                            <td> <div class="btn-group">
                     <button class="btn green btn-sm dropdown-toggle" type="button" data-toggle="dropdown" aria-expanded="false"> Go To
                         <i class="fa fa-angle-down"></i>
                     </button>
                     <ul class="dropdown-menu" role="menu">
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/ta-chart?instrumentCode=IFIC1STMF"> TA Chart </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/advance-ta-chart?instrumentCode=IFIC1STMF"> Advance TA Chart </a>
                         </li>
                                                  <li>
                                                      <a target="_blank" href="https://dev.stockbangladesh.com/minute-chart/153"> Minute Chart </a>
                                                  </li>

                                                  <li>
                                                      <a target="_blank" href="https://dev.stockbangladesh.com/news-chart/153"> News Chart </a>
                                                  </li>



                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/company-details/153"> Company Details </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/fundamental-details/153"> Fundamental Details </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/news/search?keyword=&amp;instrument_id=153&amp;from_date=&amp;to_date="> News</a>
                         </li>
                         <li class="divider"> </li>
                         <li>
                             <a href="javascript:;"> Separated link </a>
                         </li>
                     </ul>
                 </div>
                 </td>
                <td> 5.9 </td>
                <td> 6 </td>
                <td> 5.8 </td>
                <td> 5.8 </td>
                <td> 5.9 </td>
                <td class="font-red-haze"> -0.1 </td>
                <td class="font-red-haze"> -1.69% </td>
                <td> 42 </td>
                <td> 1.932 </td>
                <td> 330724 </td>
                <td> 17-May, 14:30 </td>
            </tr>
                    <tr>
                                        <td class="highlight"><div class="danger"></div> <a href="javascript:;"><a target="_blank" href="https://dev.stockbangladesh.com/company-details/154">IFILISLMF1</a></a></td>
                                        <td> <div class="btn-group">
                     <button class="btn green btn-sm dropdown-toggle" type="button" data-toggle="dropdown" aria-expanded="false"> Go To
                         <i class="fa fa-angle-down"></i>
                     </button>
                     <ul class="dropdown-menu" role="menu">
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/ta-chart?instrumentCode=IFILISLMF1"> TA Chart </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/advance-ta-chart?instrumentCode=IFILISLMF1"> Advance TA Chart </a>
                         </li>
                                                  <li>
                                                      <a target="_blank" href="https://dev.stockbangladesh.com/minute-chart/154"> Minute Chart </a>
                                                  </li>

                                                  <li>
                                                      <a target="_blank" href="https://dev.stockbangladesh.com/news-chart/154"> News Chart </a>
                                                  </li>



                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/company-details/154"> Company Details </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/fundamental-details/154"> Fundamental Details </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/news/search?keyword=&amp;instrument_id=154&amp;from_date=&amp;to_date="> News</a>
                         </li>
                         <li class="divider"> </li>
                         <li>
                             <a href="javascript:;"> Separated link </a>
                         </li>
                     </ul>
                 </div>
                 </td>
                <td> 7.3 </td>
                <td> 7.4 </td>
                <td> 7.3 </td>
                <td> 7.4 </td>
                <td> 7.4 </td>
                <td class="font-green-jungle"> 0 </td>
                <td class="font-green-jungle"> 0% </td>
                <td> 29 </td>
                <td> 0.879 </td>
                <td> 118955 </td>
                <td> 17-May, 14:30 </td>
            </tr>
                    <tr>
                                        <td class="highlight"><div class="danger"></div> <a href="javascript:;"><a target="_blank" href="https://dev.stockbangladesh.com/company-details/155">ILFSL</a></a></td>
                                        <td> <div class="btn-group">
                     <button class="btn green btn-sm dropdown-toggle" type="button" data-toggle="dropdown" aria-expanded="false"> Go To
                         <i class="fa fa-angle-down"></i>
                     </button>
                     <ul class="dropdown-menu" role="menu">
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/ta-chart?instrumentCode=ILFSL"> TA Chart </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/advance-ta-chart?instrumentCode=ILFSL"> Advance TA Chart </a>
                         </li>
                                                  <li>
                                                      <a target="_blank" href="https://dev.stockbangladesh.com/minute-chart/155"> Minute Chart </a>
                                                  </li>

                                                  <li>
                                                      <a target="_blank" href="https://dev.stockbangladesh.com/news-chart/155"> News Chart </a>
                                                  </li>



                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/company-details/155"> Company Details </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/fundamental-details/155"> Fundamental Details </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/news/search?keyword=&amp;instrument_id=155&amp;from_date=&amp;to_date="> News</a>
                         </li>
                         <li class="divider"> </li>
                         <li>
                             <a href="javascript:;"> Separated link </a>
                         </li>
                     </ul>
                 </div>
                 </td>
                <td> 17.5 </td>
                <td> 18.3 </td>
                <td> 17.5 </td>
                <td> 17.5 </td>
                <td> 18.1 </td>
                <td class="font-red-haze"> -0.6 </td>
                <td class="font-red-haze"> -3.31% </td>
                <td> 234 </td>
                <td> 7.794 </td>
                <td> 438035 </td>
                <td> 17-May, 14:30 </td>
            </tr>
                    <tr>
                                        <td class="highlight"><div class="danger"></div> <a href="javascript:;"><a target="_blank" href="https://dev.stockbangladesh.com/company-details/156">IMAMBUTTON</a></a></td>
                                        <td> <div class="btn-group">
                     <button class="btn green btn-sm dropdown-toggle" type="button" data-toggle="dropdown" aria-expanded="false"> Go To
                         <i class="fa fa-angle-down"></i>
                     </button>
                     <ul class="dropdown-menu" role="menu">
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/ta-chart?instrumentCode=IMAMBUTTON"> TA Chart </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/advance-ta-chart?instrumentCode=IMAMBUTTON"> Advance TA Chart </a>
                         </li>
                                                  <li>
                                                      <a target="_blank" href="https://dev.stockbangladesh.com/minute-chart/156"> Minute Chart </a>
                                                  </li>

                                                  <li>
                                                      <a target="_blank" href="https://dev.stockbangladesh.com/news-chart/156"> News Chart </a>
                                                  </li>



                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/company-details/156"> Company Details </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/fundamental-details/156"> Fundamental Details </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/news/search?keyword=&amp;instrument_id=156&amp;from_date=&amp;to_date="> News</a>
                         </li>
                         <li class="divider"> </li>
                         <li>
                             <a href="javascript:;"> Separated link </a>
                         </li>
                     </ul>
                 </div>
                 </td>
                <td> 28.1 </td>
                <td> 30.7 </td>
                <td> 28 </td>
                <td> 28.7 </td>
                <td> 29.9 </td>
                <td class="font-red-haze"> -1.2 </td>
                <td class="font-red-haze"> -4.01% </td>
                <td> 46 </td>
                <td> 0.25 </td>
                <td> 8650 </td>
                <td> 17-May, 14:30 </td>
            </tr>
                    <tr>
                                        <td class="highlight"><div class="danger"></div> <a href="javascript:;"><a target="_blank" href="https://dev.stockbangladesh.com/company-details/157">INTECH</a></a></td>
                                        <td> <div class="btn-group">
                     <button class="btn green btn-sm dropdown-toggle" type="button" data-toggle="dropdown" aria-expanded="false"> Go To
                         <i class="fa fa-angle-down"></i>
                     </button>
                     <ul class="dropdown-menu" role="menu">
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/ta-chart?instrumentCode=INTECH"> TA Chart </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/advance-ta-chart?instrumentCode=INTECH"> Advance TA Chart </a>
                         </li>
                                                  <li>
                                                      <a target="_blank" href="https://dev.stockbangladesh.com/minute-chart/157"> Minute Chart </a>
                                                  </li>

                                                  <li>
                                                      <a target="_blank" href="https://dev.stockbangladesh.com/news-chart/157"> News Chart </a>
                                                  </li>



                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/company-details/157"> Company Details </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/fundamental-details/157"> Fundamental Details </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/news/search?keyword=&amp;instrument_id=157&amp;from_date=&amp;to_date="> News</a>
                         </li>
                         <li class="divider"> </li>
                         <li>
                             <a href="javascript:;"> Separated link </a>
                         </li>
                     </ul>
                 </div>
                 </td>
                <td> 17.7 </td>
                <td> 18.1 </td>
                <td> 17.6 </td>
                <td> 17.7 </td>
                <td> 18 </td>
                <td class="font-red-haze"> -0.3 </td>
                <td class="font-red-haze"> -1.67% </td>
                <td> 183 </td>
                <td> 2.891 </td>
                <td> 163156 </td>
                <td> 17-May, 14:30 </td>
            </tr>
                    <tr>
            
                <td class="highlight"><div class="success"></div> <a href="javascript:;"><a target="_blank" href="https://dev.stockbangladesh.com/company-details/30194">INTRACO</a></a></td>
                                                    <td> <div class="btn-group">
                     <button class="btn green btn-sm dropdown-toggle" type="button" data-toggle="dropdown" aria-expanded="false"> Go To
                         <i class="fa fa-angle-down"></i>
                     </button>
                     <ul class="dropdown-menu" role="menu">
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/ta-chart?instrumentCode=INTRACO"> TA Chart </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/advance-ta-chart?instrumentCode=INTRACO"> Advance TA Chart </a>
                         </li>
                                                  <li>
                                                      <a target="_blank" href="https://dev.stockbangladesh.com/minute-chart/30194"> Minute Chart </a>
                                                  </li>

                                                  <li>
                                                      <a target="_blank" href="https://dev.stockbangladesh.com/news-chart/30194"> News Chart </a>
                                                  </li>



                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/company-details/30194"> Company Details </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/fundamental-details/30194"> Fundamental Details </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/news/search?keyword=&amp;instrument_id=30194&amp;from_date=&amp;to_date="> News</a>
                         </li>
                         <li class="divider"> </li>
                         <li>
                             <a href="javascript:;"> Separated link </a>
                         </li>
                     </ul>
                 </div>
                 </td>
                <td> 43.3 </td>
                <td> 66 </td>
                <td> 43 </td>
                <td> 43.6 </td>
                <td> 0 </td>
                <td class="font-green-jungle"> 43.6 </td>
                <td class="font-green-jungle"> 0% </td>
                <td> 22301 </td>
                <td> 443.063 </td>
                <td> 9660473 </td>
                <td> 17-May, 14:30 </td>
            </tr>
                    <tr>
                                        <td class="highlight"><div class="danger"></div> <a href="javascript:;"><a target="_blank" href="https://dev.stockbangladesh.com/company-details/158">IPDC</a></a></td>
                                        <td> <div class="btn-group">
                     <button class="btn green btn-sm dropdown-toggle" type="button" data-toggle="dropdown" aria-expanded="false"> Go To
                         <i class="fa fa-angle-down"></i>
                     </button>
                     <ul class="dropdown-menu" role="menu">
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/ta-chart?instrumentCode=IPDC"> TA Chart </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/advance-ta-chart?instrumentCode=IPDC"> Advance TA Chart </a>
                         </li>
                                                  <li>
                                                      <a target="_blank" href="https://dev.stockbangladesh.com/minute-chart/158"> Minute Chart </a>
                                                  </li>

                                                  <li>
                                                      <a target="_blank" href="https://dev.stockbangladesh.com/news-chart/158"> News Chart </a>
                                                  </li>



                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/company-details/158"> Company Details </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/fundamental-details/158"> Fundamental Details </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/news/search?keyword=&amp;instrument_id=158&amp;from_date=&amp;to_date="> News</a>
                         </li>
                         <li class="divider"> </li>
                         <li>
                             <a href="javascript:;"> Separated link </a>
                         </li>
                     </ul>
                 </div>
                 </td>
                <td> 32.3 </td>
                <td> 33 </td>
                <td> 32.2 </td>
                <td> 32.4 </td>
                <td> 32.6 </td>
                <td class="font-red-haze"> -0.2 </td>
                <td class="font-red-haze"> -0.61% </td>
                <td> 102 </td>
                <td> 2.198 </td>
                <td> 67379 </td>
                <td> 17-May, 14:30 </td>
            </tr>
                    <tr>
                                        <td class="highlight"><div class="danger"></div> <a href="javascript:;"><a target="_blank" href="https://dev.stockbangladesh.com/company-details/159">ISLAMIBANK</a></a></td>
                                        <td> <div class="btn-group">
                     <button class="btn green btn-sm dropdown-toggle" type="button" data-toggle="dropdown" aria-expanded="false"> Go To
                         <i class="fa fa-angle-down"></i>
                     </button>
                     <ul class="dropdown-menu" role="menu">
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/ta-chart?instrumentCode=ISLAMIBANK"> TA Chart </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/advance-ta-chart?instrumentCode=ISLAMIBANK"> Advance TA Chart </a>
                         </li>
                                                  <li>
                                                      <a target="_blank" href="https://dev.stockbangladesh.com/minute-chart/159"> Minute Chart </a>
                                                  </li>

                                                  <li>
                                                      <a target="_blank" href="https://dev.stockbangladesh.com/news-chart/159"> News Chart </a>
                                                  </li>



                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/company-details/159"> Company Details </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/fundamental-details/159"> Fundamental Details </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/news/search?keyword=&amp;instrument_id=159&amp;from_date=&amp;to_date="> News</a>
                         </li>
                         <li class="divider"> </li>
                         <li>
                             <a href="javascript:;"> Separated link </a>
                         </li>
                     </ul>
                 </div>
                 </td>
                <td> 0 </td>
                <td> 24.7 </td>
                <td> 24.1 </td>
                <td> 24.5 </td>
                <td> 24.2 </td>
                <td class="font-green-jungle"> 0.3 </td>
                <td class="font-green-jungle"> 1.24% </td>
                <td> 528 </td>
                <td> 33.48 </td>
                <td> 1370721 </td>
                <td> 17-May, 14:30 </td>
            </tr>
                    <tr>
                                        <td class="highlight"><div class="danger"></div> <a href="javascript:;"><a target="_blank" href="https://dev.stockbangladesh.com/company-details/160">ISLAMICFIN</a></a></td>
                                        <td> <div class="btn-group">
                     <button class="btn green btn-sm dropdown-toggle" type="button" data-toggle="dropdown" aria-expanded="false"> Go To
                         <i class="fa fa-angle-down"></i>
                     </button>
                     <ul class="dropdown-menu" role="menu">
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/ta-chart?instrumentCode=ISLAMICFIN"> TA Chart </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/advance-ta-chart?instrumentCode=ISLAMICFIN"> Advance TA Chart </a>
                         </li>
                                                  <li>
                                                      <a target="_blank" href="https://dev.stockbangladesh.com/minute-chart/160"> Minute Chart </a>
                                                  </li>

                                                  <li>
                                                      <a target="_blank" href="https://dev.stockbangladesh.com/news-chart/160"> News Chart </a>
                                                  </li>



                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/company-details/160"> Company Details </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/fundamental-details/160"> Fundamental Details </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/news/search?keyword=&amp;instrument_id=160&amp;from_date=&amp;to_date="> News</a>
                         </li>
                         <li class="divider"> </li>
                         <li>
                             <a href="javascript:;"> Separated link </a>
                         </li>
                     </ul>
                 </div>
                 </td>
                <td> 15.7 </td>
                <td> 16.3 </td>
                <td> 15.6 </td>
                <td> 15.8 </td>
                <td> 15.9 </td>
                <td class="font-red-haze"> -0.1 </td>
                <td class="font-red-haze"> -0.63% </td>
                <td> 61 </td>
                <td> 1.383 </td>
                <td> 87597 </td>
                <td> 17-May, 14:30 </td>
            </tr>
                    <tr>
            
                <td class="highlight"><div class="success"></div> <a href="javascript:;"><a target="_blank" href="https://dev.stockbangladesh.com/company-details/161">ISLAMIINS</a></a></td>
                                                    <td> <div class="btn-group">
                     <button class="btn green btn-sm dropdown-toggle" type="button" data-toggle="dropdown" aria-expanded="false"> Go To
                         <i class="fa fa-angle-down"></i>
                     </button>
                     <ul class="dropdown-menu" role="menu">
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/ta-chart?instrumentCode=ISLAMIINS"> TA Chart </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/advance-ta-chart?instrumentCode=ISLAMIINS"> Advance TA Chart </a>
                         </li>
                                                  <li>
                                                      <a target="_blank" href="https://dev.stockbangladesh.com/minute-chart/161"> Minute Chart </a>
                                                  </li>

                                                  <li>
                                                      <a target="_blank" href="https://dev.stockbangladesh.com/news-chart/161"> News Chart </a>
                                                  </li>



                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/company-details/161"> Company Details </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/fundamental-details/161"> Fundamental Details </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/news/search?keyword=&amp;instrument_id=161&amp;from_date=&amp;to_date="> News</a>
                         </li>
                         <li class="divider"> </li>
                         <li>
                             <a href="javascript:;"> Separated link </a>
                         </li>
                     </ul>
                 </div>
                 </td>
                <td> 28.1 </td>
                <td> 28.2 </td>
                <td> 27.5 </td>
                <td> 28 </td>
                <td> 28 </td>
                <td class="font-green-jungle"> 0 </td>
                <td class="font-green-jungle"> 0% </td>
                <td> 79 </td>
                <td> 1.604 </td>
                <td> 57227 </td>
                <td> 17-May, 14:30 </td>
            </tr>
                    <tr>
                                        <td class="highlight"><div class="danger"></div> <a href="javascript:;"><a target="_blank" href="https://dev.stockbangladesh.com/company-details/162">ISNLTD</a></a></td>
                                        <td> <div class="btn-group">
                     <button class="btn green btn-sm dropdown-toggle" type="button" data-toggle="dropdown" aria-expanded="false"> Go To
                         <i class="fa fa-angle-down"></i>
                     </button>
                     <ul class="dropdown-menu" role="menu">
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/ta-chart?instrumentCode=ISNLTD"> TA Chart </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/advance-ta-chart?instrumentCode=ISNLTD"> Advance TA Chart </a>
                         </li>
                                                  <li>
                                                      <a target="_blank" href="https://dev.stockbangladesh.com/minute-chart/162"> Minute Chart </a>
                                                  </li>

                                                  <li>
                                                      <a target="_blank" href="https://dev.stockbangladesh.com/news-chart/162"> News Chart </a>
                                                  </li>



                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/company-details/162"> Company Details </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/fundamental-details/162"> Fundamental Details </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/news/search?keyword=&amp;instrument_id=162&amp;from_date=&amp;to_date="> News</a>
                         </li>
                         <li class="divider"> </li>
                         <li>
                             <a href="javascript:;"> Separated link </a>
                         </li>
                     </ul>
                 </div>
                 </td>
                <td> 21.2 </td>
                <td> 21.5 </td>
                <td> 20.8 </td>
                <td> 21 </td>
                <td> 21.3 </td>
                <td class="font-red-haze"> -0.3 </td>
                <td class="font-red-haze"> -1.41% </td>
                <td> 103 </td>
                <td> 0.296 </td>
                <td> 13957 </td>
                <td> 17-May, 14:30 </td>
            </tr>
                    <tr>
                                        <td class="highlight"><div class="danger"></div> <a href="javascript:;"><a target="_blank" href="https://dev.stockbangladesh.com/company-details/30018">ITC</a></a></td>
                                        <td> <div class="btn-group">
                     <button class="btn green btn-sm dropdown-toggle" type="button" data-toggle="dropdown" aria-expanded="false"> Go To
                         <i class="fa fa-angle-down"></i>
                     </button>
                     <ul class="dropdown-menu" role="menu">
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/ta-chart?instrumentCode=ITC"> TA Chart </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/advance-ta-chart?instrumentCode=ITC"> Advance TA Chart </a>
                         </li>
                                                  <li>
                                                      <a target="_blank" href="https://dev.stockbangladesh.com/minute-chart/30018"> Minute Chart </a>
                                                  </li>

                                                  <li>
                                                      <a target="_blank" href="https://dev.stockbangladesh.com/news-chart/30018"> News Chart </a>
                                                  </li>



                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/company-details/30018"> Company Details </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/fundamental-details/30018"> Fundamental Details </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/news/search?keyword=&amp;instrument_id=30018&amp;from_date=&amp;to_date="> News</a>
                         </li>
                         <li class="divider"> </li>
                         <li>
                             <a href="javascript:;"> Separated link </a>
                         </li>
                     </ul>
                 </div>
                 </td>
                <td> 33.9 </td>
                <td> 35.6 </td>
                <td> 33.6 </td>
                <td> 33.8 </td>
                <td> 34.6 </td>
                <td class="font-red-haze"> -0.8 </td>
                <td class="font-red-haze"> -2.31% </td>
                <td> 412 </td>
                <td> 7.885 </td>
                <td> 229805 </td>
                <td> 17-May, 14:30 </td>
            </tr>
                    <tr>
                                        <td class="highlight"><div class="danger"></div> <a href="javascript:;"><a target="_blank" href="https://dev.stockbangladesh.com/company-details/163">JAMUNABANK</a></a></td>
                                        <td> <div class="btn-group">
                     <button class="btn green btn-sm dropdown-toggle" type="button" data-toggle="dropdown" aria-expanded="false"> Go To
                         <i class="fa fa-angle-down"></i>
                     </button>
                     <ul class="dropdown-menu" role="menu">
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/ta-chart?instrumentCode=JAMUNABANK"> TA Chart </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/advance-ta-chart?instrumentCode=JAMUNABANK"> Advance TA Chart </a>
                         </li>
                                                  <li>
                                                      <a target="_blank" href="https://dev.stockbangladesh.com/minute-chart/163"> Minute Chart </a>
                                                  </li>

                                                  <li>
                                                      <a target="_blank" href="https://dev.stockbangladesh.com/news-chart/163"> News Chart </a>
                                                  </li>



                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/company-details/163"> Company Details </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/fundamental-details/163"> Fundamental Details </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/news/search?keyword=&amp;instrument_id=163&amp;from_date=&amp;to_date="> News</a>
                         </li>
                         <li class="divider"> </li>
                         <li>
                             <a href="javascript:;"> Separated link </a>
                         </li>
                     </ul>
                 </div>
                 </td>
                <td> 19.6 </td>
                <td> 20.3 </td>
                <td> 19.3 </td>
                <td> 19.5 </td>
                <td> 20.1 </td>
                <td class="font-red-haze"> -0.6 </td>
                <td class="font-red-haze"> -2.99% </td>
                <td> 334 </td>
                <td> 12.123 </td>
                <td> 614778 </td>
                <td> 17-May, 14:30 </td>
            </tr>
                    <tr>
                                        <td class="highlight"><div class="danger"></div> <a href="javascript:;"><a target="_blank" href="https://dev.stockbangladesh.com/company-details/164">JAMUNAOIL</a></a></td>
                                        <td> <div class="btn-group">
                     <button class="btn green btn-sm dropdown-toggle" type="button" data-toggle="dropdown" aria-expanded="false"> Go To
                         <i class="fa fa-angle-down"></i>
                     </button>
                     <ul class="dropdown-menu" role="menu">
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/ta-chart?instrumentCode=JAMUNAOIL"> TA Chart </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/advance-ta-chart?instrumentCode=JAMUNAOIL"> Advance TA Chart </a>
                         </li>
                                                  <li>
                                                      <a target="_blank" href="https://dev.stockbangladesh.com/minute-chart/164"> Minute Chart </a>
                                                  </li>

                                                  <li>
                                                      <a target="_blank" href="https://dev.stockbangladesh.com/news-chart/164"> News Chart </a>
                                                  </li>



                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/company-details/164"> Company Details </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/fundamental-details/164"> Fundamental Details </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/news/search?keyword=&amp;instrument_id=164&amp;from_date=&amp;to_date="> News</a>
                         </li>
                         <li class="divider"> </li>
                         <li>
                             <a href="javascript:;"> Separated link </a>
                         </li>
                     </ul>
                 </div>
                 </td>
                <td> 182.9 </td>
                <td> 184 </td>
                <td> 182.9 </td>
                <td> 183 </td>
                <td> 183.3 </td>
                <td class="font-red-haze"> -0.3 </td>
                <td class="font-red-haze"> -0.16% </td>
                <td> 66 </td>
                <td> 3.401 </td>
                <td> 18578 </td>
                <td> 17-May, 14:30 </td>
            </tr>
                    <tr>
            
                <td class="highlight"><div class="success"></div> <a href="javascript:;"><a target="_blank" href="https://dev.stockbangladesh.com/company-details/165">JANATAINS</a></a></td>
                                                    <td> <div class="btn-group">
                     <button class="btn green btn-sm dropdown-toggle" type="button" data-toggle="dropdown" aria-expanded="false"> Go To
                         <i class="fa fa-angle-down"></i>
                     </button>
                     <ul class="dropdown-menu" role="menu">
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/ta-chart?instrumentCode=JANATAINS"> TA Chart </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/advance-ta-chart?instrumentCode=JANATAINS"> Advance TA Chart </a>
                         </li>
                                                  <li>
                                                      <a target="_blank" href="https://dev.stockbangladesh.com/minute-chart/165"> Minute Chart </a>
                                                  </li>

                                                  <li>
                                                      <a target="_blank" href="https://dev.stockbangladesh.com/news-chart/165"> News Chart </a>
                                                  </li>



                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/company-details/165"> Company Details </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/fundamental-details/165"> Fundamental Details </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/news/search?keyword=&amp;instrument_id=165&amp;from_date=&amp;to_date="> News</a>
                         </li>
                         <li class="divider"> </li>
                         <li>
                             <a href="javascript:;"> Separated link </a>
                         </li>
                     </ul>
                 </div>
                 </td>
                <td> 15.5 </td>
                <td> 15.5 </td>
                <td> 15 </td>
                <td> 15 </td>
                <td> 15 </td>
                <td class="font-green-jungle"> 0 </td>
                <td class="font-green-jungle"> 0% </td>
                <td> 6 </td>
                <td> 0.007 </td>
                <td> 441 </td>
                <td> 17-May, 14:30 </td>
            </tr>
                    <tr>
                                        <td class="highlight"><div class="danger"></div> <a href="javascript:;"><a target="_blank" href="https://dev.stockbangladesh.com/company-details/525">JMISMDL</a></a></td>
                                        <td> <div class="btn-group">
                     <button class="btn green btn-sm dropdown-toggle" type="button" data-toggle="dropdown" aria-expanded="false"> Go To
                         <i class="fa fa-angle-down"></i>
                     </button>
                     <ul class="dropdown-menu" role="menu">
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/ta-chart?instrumentCode=JMISMDL"> TA Chart </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/advance-ta-chart?instrumentCode=JMISMDL"> Advance TA Chart </a>
                         </li>
                                                  <li>
                                                      <a target="_blank" href="https://dev.stockbangladesh.com/minute-chart/525"> Minute Chart </a>
                                                  </li>

                                                  <li>
                                                      <a target="_blank" href="https://dev.stockbangladesh.com/news-chart/525"> News Chart </a>
                                                  </li>



                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/company-details/525"> Company Details </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/fundamental-details/525"> Fundamental Details </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/news/search?keyword=&amp;instrument_id=525&amp;from_date=&amp;to_date="> News</a>
                         </li>
                         <li class="divider"> </li>
                         <li>
                             <a href="javascript:;"> Separated link </a>
                         </li>
                     </ul>
                 </div>
                 </td>
                <td> 182.1 </td>
                <td> 187.5 </td>
                <td> 180.2 </td>
                <td> 181.4 </td>
                <td> 184.8 </td>
                <td class="font-red-haze"> -3.4 </td>
                <td class="font-red-haze"> -1.84% </td>
                <td> 537 </td>
                <td> 10.885 </td>
                <td> 59582 </td>
                <td> 17-May, 14:30 </td>
            </tr>
                    <tr>
                                        <td class="highlight"><div class="danger"></div> <a href="javascript:;"><a target="_blank" href="https://dev.stockbangladesh.com/company-details/166">JUTESPINN</a></a></td>
                                        <td> <div class="btn-group">
                     <button class="btn green btn-sm dropdown-toggle" type="button" data-toggle="dropdown" aria-expanded="false"> Go To
                         <i class="fa fa-angle-down"></i>
                     </button>
                     <ul class="dropdown-menu" role="menu">
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/ta-chart?instrumentCode=JUTESPINN"> TA Chart </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/advance-ta-chart?instrumentCode=JUTESPINN"> Advance TA Chart </a>
                         </li>
                                                  <li>
                                                      <a target="_blank" href="https://dev.stockbangladesh.com/minute-chart/166"> Minute Chart </a>
                                                  </li>

                                                  <li>
                                                      <a target="_blank" href="https://dev.stockbangladesh.com/news-chart/166"> News Chart </a>
                                                  </li>



                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/company-details/166"> Company Details </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/fundamental-details/166"> Fundamental Details </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/news/search?keyword=&amp;instrument_id=166&amp;from_date=&amp;to_date="> News</a>
                         </li>
                         <li class="divider"> </li>
                         <li>
                             <a href="javascript:;"> Separated link </a>
                         </li>
                     </ul>
                 </div>
                 </td>
                <td> 144.5 </td>
                <td> 158.3 </td>
                <td> 144.5 </td>
                <td> 150.5 </td>
                <td> 160.2 </td>
                <td class="font-red-haze"> -9.7 </td>
                <td class="font-red-haze"> -6.05% </td>
                <td> 143 </td>
                <td> 0.657 </td>
                <td> 4287 </td>
                <td> 17-May, 14:30 </td>
            </tr>
                    <tr>
                                        <td class="highlight"><div class="danger"></div> <a href="javascript:;"><a target="_blank" href="https://dev.stockbangladesh.com/company-details/167">KARNAPHULI</a></a></td>
                                        <td> <div class="btn-group">
                     <button class="btn green btn-sm dropdown-toggle" type="button" data-toggle="dropdown" aria-expanded="false"> Go To
                         <i class="fa fa-angle-down"></i>
                     </button>
                     <ul class="dropdown-menu" role="menu">
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/ta-chart?instrumentCode=KARNAPHULI"> TA Chart </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/advance-ta-chart?instrumentCode=KARNAPHULI"> Advance TA Chart </a>
                         </li>
                                                  <li>
                                                      <a target="_blank" href="https://dev.stockbangladesh.com/minute-chart/167"> Minute Chart </a>
                                                  </li>

                                                  <li>
                                                      <a target="_blank" href="https://dev.stockbangladesh.com/news-chart/167"> News Chart </a>
                                                  </li>



                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/company-details/167"> Company Details </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/fundamental-details/167"> Fundamental Details </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/news/search?keyword=&amp;instrument_id=167&amp;from_date=&amp;to_date="> News</a>
                         </li>
                         <li class="divider"> </li>
                         <li>
                             <a href="javascript:;"> Separated link </a>
                         </li>
                     </ul>
                 </div>
                 </td>
                <td> 0 </td>
                <td> 15.9 </td>
                <td> 15.5 </td>
                <td> 15.7 </td>
                <td> 15.8 </td>
                <td class="font-red-haze"> -0.1 </td>
                <td class="font-red-haze"> -0.63% </td>
                <td> 30 </td>
                <td> 0.23 </td>
                <td> 14649 </td>
                <td> 17-May, 14:30 </td>
            </tr>
                    <tr>
                                        <td class="highlight"><div class="danger"></div> <a href="javascript:;"><a target="_blank" href="https://dev.stockbangladesh.com/company-details/168">KAY&amp;QUE</a></a></td>
                                        <td> <div class="btn-group">
                     <button class="btn green btn-sm dropdown-toggle" type="button" data-toggle="dropdown" aria-expanded="false"> Go To
                         <i class="fa fa-angle-down"></i>
                     </button>
                     <ul class="dropdown-menu" role="menu">
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/ta-chart?instrumentCode=KAY&amp;QUE"> TA Chart </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/advance-ta-chart?instrumentCode=KAY&amp;QUE"> Advance TA Chart </a>
                         </li>
                                                  <li>
                                                      <a target="_blank" href="https://dev.stockbangladesh.com/minute-chart/168"> Minute Chart </a>
                                                  </li>

                                                  <li>
                                                      <a target="_blank" href="https://dev.stockbangladesh.com/news-chart/168"> News Chart </a>
                                                  </li>



                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/company-details/168"> Company Details </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/fundamental-details/168"> Fundamental Details </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/news/search?keyword=&amp;instrument_id=168&amp;from_date=&amp;to_date="> News</a>
                         </li>
                         <li class="divider"> </li>
                         <li>
                             <a href="javascript:;"> Separated link </a>
                         </li>
                     </ul>
                 </div>
                 </td>
                <td> 171.8 </td>
                <td> 181.8 </td>
                <td> 171.5 </td>
                <td> 172 </td>
                <td> 178.5 </td>
                <td class="font-red-haze"> -6.5 </td>
                <td class="font-red-haze"> -3.64% </td>
                <td> 105 </td>
                <td> 0.991 </td>
                <td> 5669 </td>
                <td> 17-May, 14:30 </td>
            </tr>
                    <tr>
                                        <td class="highlight"><div class="danger"></div> <a href="javascript:;"><a target="_blank" href="https://dev.stockbangladesh.com/company-details/546">KBPPWBIL</a></a></td>
                                        <td> <div class="btn-group">
                     <button class="btn green btn-sm dropdown-toggle" type="button" data-toggle="dropdown" aria-expanded="false"> Go To
                         <i class="fa fa-angle-down"></i>
                     </button>
                     <ul class="dropdown-menu" role="menu">
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/ta-chart?instrumentCode=KBPPWBIL"> TA Chart </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/advance-ta-chart?instrumentCode=KBPPWBIL"> Advance TA Chart </a>
                         </li>
                                                  <li>
                                                      <a target="_blank" href="https://dev.stockbangladesh.com/minute-chart/546"> Minute Chart </a>
                                                  </li>

                                                  <li>
                                                      <a target="_blank" href="https://dev.stockbangladesh.com/news-chart/546"> News Chart </a>
                                                  </li>



                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/company-details/546"> Company Details </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/fundamental-details/546"> Fundamental Details </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/news/search?keyword=&amp;instrument_id=546&amp;from_date=&amp;to_date="> News</a>
                         </li>
                         <li class="divider"> </li>
                         <li>
                             <a href="javascript:;"> Separated link </a>
                         </li>
                     </ul>
                 </div>
                 </td>
                <td> 16.1 </td>
                <td> 16.4 </td>
                <td> 15.9 </td>
                <td> 16 </td>
                <td> 16.2 </td>
                <td class="font-red-haze"> -0.2 </td>
                <td class="font-red-haze"> -1.23% </td>
                <td> 216 </td>
                <td> 4.674 </td>
                <td> 290144 </td>
                <td> 17-May, 14:30 </td>
            </tr>
                    <tr>
                                        <td class="highlight"><div class="danger"></div> <a href="javascript:;"><a target="_blank" href="https://dev.stockbangladesh.com/company-details/30015">KDSALTD</a></a></td>
                                        <td> <div class="btn-group">
                     <button class="btn green btn-sm dropdown-toggle" type="button" data-toggle="dropdown" aria-expanded="false"> Go To
                         <i class="fa fa-angle-down"></i>
                     </button>
                     <ul class="dropdown-menu" role="menu">
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/ta-chart?instrumentCode=KDSALTD"> TA Chart </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/advance-ta-chart?instrumentCode=KDSALTD"> Advance TA Chart </a>
                         </li>
                                                  <li>
                                                      <a target="_blank" href="https://dev.stockbangladesh.com/minute-chart/30015"> Minute Chart </a>
                                                  </li>

                                                  <li>
                                                      <a target="_blank" href="https://dev.stockbangladesh.com/news-chart/30015"> News Chart </a>
                                                  </li>



                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/company-details/30015"> Company Details </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/fundamental-details/30015"> Fundamental Details </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/news/search?keyword=&amp;instrument_id=30015&amp;from_date=&amp;to_date="> News</a>
                         </li>
                         <li class="divider"> </li>
                         <li>
                             <a href="javascript:;"> Separated link </a>
                         </li>
                     </ul>
                 </div>
                 </td>
                <td> 58.8 </td>
                <td> 59.1 </td>
                <td> 58 </td>
                <td> 58.6 </td>
                <td> 59.1 </td>
                <td class="font-red-haze"> -0.5 </td>
                <td class="font-red-haze"> -0.85% </td>
                <td> 110 </td>
                <td> 1.596 </td>
                <td> 27200 </td>
                <td> 17-May, 14:30 </td>
            </tr>
                    <tr>
                                        <td class="highlight"><div class="danger"></div> <a href="javascript:;"><a target="_blank" href="https://dev.stockbangladesh.com/company-details/169">KEYACOSMET</a></a></td>
                                        <td> <div class="btn-group">
                     <button class="btn green btn-sm dropdown-toggle" type="button" data-toggle="dropdown" aria-expanded="false"> Go To
                         <i class="fa fa-angle-down"></i>
                     </button>
                     <ul class="dropdown-menu" role="menu">
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/ta-chart?instrumentCode=KEYACOSMET"> TA Chart </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/advance-ta-chart?instrumentCode=KEYACOSMET"> Advance TA Chart </a>
                         </li>
                                                  <li>
                                                      <a target="_blank" href="https://dev.stockbangladesh.com/minute-chart/169"> Minute Chart </a>
                                                  </li>

                                                  <li>
                                                      <a target="_blank" href="https://dev.stockbangladesh.com/news-chart/169"> News Chart </a>
                                                  </li>



                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/company-details/169"> Company Details </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/fundamental-details/169"> Fundamental Details </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/news/search?keyword=&amp;instrument_id=169&amp;from_date=&amp;to_date="> News</a>
                         </li>
                         <li class="divider"> </li>
                         <li>
                             <a href="javascript:;"> Separated link </a>
                         </li>
                     </ul>
                 </div>
                 </td>
                <td> 9.7 </td>
                <td> 9.9 </td>
                <td> 9.7 </td>
                <td> 9.8 </td>
                <td> 9.9 </td>
                <td class="font-red-haze"> -0.1 </td>
                <td class="font-red-haze"> -1.01% </td>
                <td> 805 </td>
                <td> 26.361 </td>
                <td> 2689707 </td>
                <td> 17-May, 14:30 </td>
            </tr>
                    <tr>
                                        <td class="highlight"><div class="danger"></div> <a href="javascript:;"><a target="_blank" href="https://dev.stockbangladesh.com/company-details/170">KOHINOOR</a></a></td>
                                        <td> <div class="btn-group">
                     <button class="btn green btn-sm dropdown-toggle" type="button" data-toggle="dropdown" aria-expanded="false"> Go To
                         <i class="fa fa-angle-down"></i>
                     </button>
                     <ul class="dropdown-menu" role="menu">
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/ta-chart?instrumentCode=KOHINOOR"> TA Chart </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/advance-ta-chart?instrumentCode=KOHINOOR"> Advance TA Chart </a>
                         </li>
                                                  <li>
                                                      <a target="_blank" href="https://dev.stockbangladesh.com/minute-chart/170"> Minute Chart </a>
                                                  </li>

                                                  <li>
                                                      <a target="_blank" href="https://dev.stockbangladesh.com/news-chart/170"> News Chart </a>
                                                  </li>



                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/company-details/170"> Company Details </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/fundamental-details/170"> Fundamental Details </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/news/search?keyword=&amp;instrument_id=170&amp;from_date=&amp;to_date="> News</a>
                         </li>
                         <li class="divider"> </li>
                         <li>
                             <a href="javascript:;"> Separated link </a>
                         </li>
                     </ul>
                 </div>
                 </td>
                <td> 376 </td>
                <td> 379.2 </td>
                <td> 375.2 </td>
                <td> 376 </td>
                <td> 380.4 </td>
                <td class="font-red-haze"> -4.4 </td>
                <td class="font-red-haze"> -1.16% </td>
                <td> 99 </td>
                <td> 1.39 </td>
                <td> 3685 </td>
                <td> 17-May, 14:30 </td>
            </tr>
                    <tr>
            
                <td class="highlight"><div class="success"></div> <a href="javascript:;"><a target="_blank" href="https://dev.stockbangladesh.com/company-details/171">KPCL</a></a></td>
                                                    <td> <div class="btn-group">
                     <button class="btn green btn-sm dropdown-toggle" type="button" data-toggle="dropdown" aria-expanded="false"> Go To
                         <i class="fa fa-angle-down"></i>
                     </button>
                     <ul class="dropdown-menu" role="menu">
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/ta-chart?instrumentCode=KPCL"> TA Chart </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/advance-ta-chart?instrumentCode=KPCL"> Advance TA Chart </a>
                         </li>
                                                  <li>
                                                      <a target="_blank" href="https://dev.stockbangladesh.com/minute-chart/171"> Minute Chart </a>
                                                  </li>

                                                  <li>
                                                      <a target="_blank" href="https://dev.stockbangladesh.com/news-chart/171"> News Chart </a>
                                                  </li>



                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/company-details/171"> Company Details </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/fundamental-details/171"> Fundamental Details </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/news/search?keyword=&amp;instrument_id=171&amp;from_date=&amp;to_date="> News</a>
                         </li>
                         <li class="divider"> </li>
                         <li>
                             <a href="javascript:;"> Separated link </a>
                         </li>
                     </ul>
                 </div>
                 </td>
                <td> 55.2 </td>
                <td> 55.6 </td>
                <td> 53.9 </td>
                <td> 55.2 </td>
                <td> 54 </td>
                <td class="font-green-jungle"> 1.2 </td>
                <td class="font-green-jungle"> 2.22% </td>
                <td> 473 </td>
                <td> 25.652 </td>
                <td> 466547 </td>
                <td> 17-May, 14:30 </td>
            </tr>
                    <tr>
                                        <td class="highlight"><div class="danger"></div> <a href="javascript:;"><a target="_blank" href="https://dev.stockbangladesh.com/company-details/539">KPPL</a></a></td>
                                        <td> <div class="btn-group">
                     <button class="btn green btn-sm dropdown-toggle" type="button" data-toggle="dropdown" aria-expanded="false"> Go To
                         <i class="fa fa-angle-down"></i>
                     </button>
                     <ul class="dropdown-menu" role="menu">
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/ta-chart?instrumentCode=KPPL"> TA Chart </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/advance-ta-chart?instrumentCode=KPPL"> Advance TA Chart </a>
                         </li>
                                                  <li>
                                                      <a target="_blank" href="https://dev.stockbangladesh.com/minute-chart/539"> Minute Chart </a>
                                                  </li>

                                                  <li>
                                                      <a target="_blank" href="https://dev.stockbangladesh.com/news-chart/539"> News Chart </a>
                                                  </li>



                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/company-details/539"> Company Details </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/fundamental-details/539"> Fundamental Details </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/news/search?keyword=&amp;instrument_id=539&amp;from_date=&amp;to_date="> News</a>
                         </li>
                         <li class="divider"> </li>
                         <li>
                             <a href="javascript:;"> Separated link </a>
                         </li>
                     </ul>
                 </div>
                 </td>
                <td> 9.6 </td>
                <td> 9.9 </td>
                <td> 9.5 </td>
                <td> 9.6 </td>
                <td> 9.7 </td>
                <td class="font-red-haze"> -0.1 </td>
                <td class="font-red-haze"> -1.03% </td>
                <td> 56 </td>
                <td> 0.478 </td>
                <td> 49219 </td>
                <td> 17-May, 14:30 </td>
            </tr>
                    <tr>
                                        <td class="highlight"><div class="danger"></div> <a href="javascript:;"><a target="_blank" href="https://dev.stockbangladesh.com/company-details/173">LANKABAFIN</a></a></td>
                                        <td> <div class="btn-group">
                     <button class="btn green btn-sm dropdown-toggle" type="button" data-toggle="dropdown" aria-expanded="false"> Go To
                         <i class="fa fa-angle-down"></i>
                     </button>
                     <ul class="dropdown-menu" role="menu">
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/ta-chart?instrumentCode=LANKABAFIN"> TA Chart </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/advance-ta-chart?instrumentCode=LANKABAFIN"> Advance TA Chart </a>
                         </li>
                                                  <li>
                                                      <a target="_blank" href="https://dev.stockbangladesh.com/minute-chart/173"> Minute Chart </a>
                                                  </li>

                                                  <li>
                                                      <a target="_blank" href="https://dev.stockbangladesh.com/news-chart/173"> News Chart </a>
                                                  </li>



                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/company-details/173"> Company Details </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/fundamental-details/173"> Fundamental Details </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/news/search?keyword=&amp;instrument_id=173&amp;from_date=&amp;to_date="> News</a>
                         </li>
                         <li class="divider"> </li>
                         <li>
                             <a href="javascript:;"> Separated link </a>
                         </li>
                     </ul>
                 </div>
                 </td>
                <td> 26 </td>
                <td> 26.5 </td>
                <td> 25.9 </td>
                <td> 26 </td>
                <td> 26.3 </td>
                <td class="font-red-haze"> -0.3 </td>
                <td class="font-red-haze"> -1.14% </td>
                <td> 845 </td>
                <td> 32.172 </td>
                <td> 1232407 </td>
                <td> 17-May, 14:30 </td>
            </tr>
                    <tr>
                                        <td class="highlight"><div class="danger"></div> <a href="javascript:;"><a target="_blank" href="https://dev.stockbangladesh.com/company-details/174">LEGACYFOOT</a></a></td>
                                        <td> <div class="btn-group">
                     <button class="btn green btn-sm dropdown-toggle" type="button" data-toggle="dropdown" aria-expanded="false"> Go To
                         <i class="fa fa-angle-down"></i>
                     </button>
                     <ul class="dropdown-menu" role="menu">
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/ta-chart?instrumentCode=LEGACYFOOT"> TA Chart </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/advance-ta-chart?instrumentCode=LEGACYFOOT"> Advance TA Chart </a>
                         </li>
                                                  <li>
                                                      <a target="_blank" href="https://dev.stockbangladesh.com/minute-chart/174"> Minute Chart </a>
                                                  </li>

                                                  <li>
                                                      <a target="_blank" href="https://dev.stockbangladesh.com/news-chart/174"> News Chart </a>
                                                  </li>



                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/company-details/174"> Company Details </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/fundamental-details/174"> Fundamental Details </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/news/search?keyword=&amp;instrument_id=174&amp;from_date=&amp;to_date="> News</a>
                         </li>
                         <li class="divider"> </li>
                         <li>
                             <a href="javascript:;"> Separated link </a>
                         </li>
                     </ul>
                 </div>
                 </td>
                <td> 64.5 </td>
                <td> 66.1 </td>
                <td> 63.6 </td>
                <td> 64.6 </td>
                <td> 64.8 </td>
                <td class="font-red-haze"> -0.2 </td>
                <td class="font-red-haze"> -0.31% </td>
                <td> 1676 </td>
                <td> 59.586 </td>
                <td> 917297 </td>
                <td> 17-May, 14:30 </td>
            </tr>
                    <tr>
                                        <td class="highlight"><div class="danger"></div> <a href="javascript:;"><a target="_blank" href="https://dev.stockbangladesh.com/company-details/172">LHBL</a></a></td>
                                        <td> <div class="btn-group">
                     <button class="btn green btn-sm dropdown-toggle" type="button" data-toggle="dropdown" aria-expanded="false"> Go To
                         <i class="fa fa-angle-down"></i>
                     </button>
                     <ul class="dropdown-menu" role="menu">
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/ta-chart?instrumentCode=LHBL"> TA Chart </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/advance-ta-chart?instrumentCode=LHBL"> Advance TA Chart </a>
                         </li>
                                                  <li>
                                                      <a target="_blank" href="https://dev.stockbangladesh.com/minute-chart/172"> Minute Chart </a>
                                                  </li>

                                                  <li>
                                                      <a target="_blank" href="https://dev.stockbangladesh.com/news-chart/172"> News Chart </a>
                                                  </li>



                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/company-details/172"> Company Details </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/fundamental-details/172"> Fundamental Details </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/news/search?keyword=&amp;instrument_id=172&amp;from_date=&amp;to_date="> News</a>
                         </li>
                         <li class="divider"> </li>
                         <li>
                             <a href="javascript:;"> Separated link </a>
                         </li>
                     </ul>
                 </div>
                 </td>
                <td> 55.9 </td>
                <td> 56.8 </td>
                <td> 55.8 </td>
                <td> 56 </td>
                <td> 56.4 </td>
                <td class="font-red-haze"> -0.4 </td>
                <td class="font-red-haze"> -0.71% </td>
                <td> 585 </td>
                <td> 24.056 </td>
                <td> 428604 </td>
                <td> 17-May, 14:30 </td>
            </tr>
                    <tr>
                                        <td class="highlight"><div class="danger"></div> <a href="javascript:;"><a target="_blank" href="https://dev.stockbangladesh.com/company-details/122">LIBRAINFU</a></a></td>
                                        <td> <div class="btn-group">
                     <button class="btn green btn-sm dropdown-toggle" type="button" data-toggle="dropdown" aria-expanded="false"> Go To
                         <i class="fa fa-angle-down"></i>
                     </button>
                     <ul class="dropdown-menu" role="menu">
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/ta-chart?instrumentCode=LIBRAINFU"> TA Chart </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/advance-ta-chart?instrumentCode=LIBRAINFU"> Advance TA Chart </a>
                         </li>
                                                  <li>
                                                      <a target="_blank" href="https://dev.stockbangladesh.com/minute-chart/122"> Minute Chart </a>
                                                  </li>

                                                  <li>
                                                      <a target="_blank" href="https://dev.stockbangladesh.com/news-chart/122"> News Chart </a>
                                                  </li>



                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/company-details/122"> Company Details </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/fundamental-details/122"> Fundamental Details </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/news/search?keyword=&amp;instrument_id=122&amp;from_date=&amp;to_date="> News</a>
                         </li>
                         <li class="divider"> </li>
                         <li>
                             <a href="javascript:;"> Separated link </a>
                         </li>
                     </ul>
                 </div>
                 </td>
                <td> 520.8 </td>
                <td> 545 </td>
                <td> 520 </td>
                <td> 523.1 </td>
                <td> 541.3 </td>
                <td class="font-red-haze"> -18.2 </td>
                <td class="font-red-haze"> -3.36% </td>
                <td> 291 </td>
                <td> 5.574 </td>
                <td> 10484 </td>
                <td> 17-May, 14:30 </td>
            </tr>
                    <tr>
                                        <td class="highlight"><div class="danger"></div> <a href="javascript:;"><a target="_blank" href="https://dev.stockbangladesh.com/company-details/49">LINDEBD</a></a></td>
                                        <td> <div class="btn-group">
                     <button class="btn green btn-sm dropdown-toggle" type="button" data-toggle="dropdown" aria-expanded="false"> Go To
                         <i class="fa fa-angle-down"></i>
                     </button>
                     <ul class="dropdown-menu" role="menu">
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/ta-chart?instrumentCode=LINDEBD"> TA Chart </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/advance-ta-chart?instrumentCode=LINDEBD"> Advance TA Chart </a>
                         </li>
                                                  <li>
                                                      <a target="_blank" href="https://dev.stockbangladesh.com/minute-chart/49"> Minute Chart </a>
                                                  </li>

                                                  <li>
                                                      <a target="_blank" href="https://dev.stockbangladesh.com/news-chart/49"> News Chart </a>
                                                  </li>



                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/company-details/49"> Company Details </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/fundamental-details/49"> Fundamental Details </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/news/search?keyword=&amp;instrument_id=49&amp;from_date=&amp;to_date="> News</a>
                         </li>
                         <li class="divider"> </li>
                         <li>
                             <a href="javascript:;"> Separated link </a>
                         </li>
                     </ul>
                 </div>
                 </td>
                <td> 1254 </td>
                <td> 1259.4 </td>
                <td> 1245.1 </td>
                <td> 1248.1 </td>
                <td> 1255.5 </td>
                <td class="font-red-haze"> -7.4 </td>
                <td class="font-red-haze"> -0.59% </td>
                <td> 145 </td>
                <td> 10.108 </td>
                <td> 8086 </td>
                <td> 17-May, 14:30 </td>
            </tr>
                    <tr>
                                                    <td class="highlight"><div class="info"></div> <a href="javascript:;"><a target="_blank" href="https://dev.stockbangladesh.com/company-details/467">LRGLOBMF1</a></a></td>
                            <td> <div class="btn-group">
                     <button class="btn green btn-sm dropdown-toggle" type="button" data-toggle="dropdown" aria-expanded="false"> Go To
                         <i class="fa fa-angle-down"></i>
                     </button>
                     <ul class="dropdown-menu" role="menu">
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/ta-chart?instrumentCode=LRGLOBMF1"> TA Chart </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/advance-ta-chart?instrumentCode=LRGLOBMF1"> Advance TA Chart </a>
                         </li>
                                                  <li>
                                                      <a target="_blank" href="https://dev.stockbangladesh.com/minute-chart/467"> Minute Chart </a>
                                                  </li>

                                                  <li>
                                                      <a target="_blank" href="https://dev.stockbangladesh.com/news-chart/467"> News Chart </a>
                                                  </li>



                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/company-details/467"> Company Details </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/fundamental-details/467"> Fundamental Details </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/news/search?keyword=&amp;instrument_id=467&amp;from_date=&amp;to_date="> News</a>
                         </li>
                         <li class="divider"> </li>
                         <li>
                             <a href="javascript:;"> Separated link </a>
                         </li>
                     </ul>
                 </div>
                 </td>
                <td> 8 </td>
                <td> 8 </td>
                <td> 8 </td>
                <td> 8 </td>
                <td> 8 </td>
                <td class="font-green-jungle"> 0 </td>
                <td class="font-green-jungle"> 0% </td>
                <td> 13 </td>
                <td> 1.953 </td>
                <td> 244115 </td>
                <td> 17-May, 14:30 </td>
            </tr>
                    <tr>
                                        <td class="highlight"><div class="danger"></div> <a href="javascript:;"><a target="_blank" href="https://dev.stockbangladesh.com/company-details/123">MAKSONSPIN</a></a></td>
                                        <td> <div class="btn-group">
                     <button class="btn green btn-sm dropdown-toggle" type="button" data-toggle="dropdown" aria-expanded="false"> Go To
                         <i class="fa fa-angle-down"></i>
                     </button>
                     <ul class="dropdown-menu" role="menu">
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/ta-chart?instrumentCode=MAKSONSPIN"> TA Chart </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/advance-ta-chart?instrumentCode=MAKSONSPIN"> Advance TA Chart </a>
                         </li>
                                                  <li>
                                                      <a target="_blank" href="https://dev.stockbangladesh.com/minute-chart/123"> Minute Chart </a>
                                                  </li>

                                                  <li>
                                                      <a target="_blank" href="https://dev.stockbangladesh.com/news-chart/123"> News Chart </a>
                                                  </li>



                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/company-details/123"> Company Details </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/fundamental-details/123"> Fundamental Details </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/news/search?keyword=&amp;instrument_id=123&amp;from_date=&amp;to_date="> News</a>
                         </li>
                         <li class="divider"> </li>
                         <li>
                             <a href="javascript:;"> Separated link </a>
                         </li>
                     </ul>
                 </div>
                 </td>
                <td> 9.4 </td>
                <td> 9.8 </td>
                <td> 9.3 </td>
                <td> 9.4 </td>
                <td> 9.6 </td>
                <td class="font-red-haze"> -0.2 </td>
                <td class="font-red-haze"> -2.08% </td>
                <td> 264 </td>
                <td> 9.247 </td>
                <td> 975805 </td>
                <td> 17-May, 14:30 </td>
            </tr>
                    <tr>
            
                <td class="highlight"><div class="success"></div> <a href="javascript:;"><a target="_blank" href="https://dev.stockbangladesh.com/company-details/124">MALEKSPIN</a></a></td>
                                                    <td> <div class="btn-group">
                     <button class="btn green btn-sm dropdown-toggle" type="button" data-toggle="dropdown" aria-expanded="false"> Go To
                         <i class="fa fa-angle-down"></i>
                     </button>
                     <ul class="dropdown-menu" role="menu">
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/ta-chart?instrumentCode=MALEKSPIN"> TA Chart </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/advance-ta-chart?instrumentCode=MALEKSPIN"> Advance TA Chart </a>
                         </li>
                                                  <li>
                                                      <a target="_blank" href="https://dev.stockbangladesh.com/minute-chart/124"> Minute Chart </a>
                                                  </li>

                                                  <li>
                                                      <a target="_blank" href="https://dev.stockbangladesh.com/news-chart/124"> News Chart </a>
                                                  </li>



                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/company-details/124"> Company Details </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/fundamental-details/124"> Fundamental Details </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/news/search?keyword=&amp;instrument_id=124&amp;from_date=&amp;to_date="> News</a>
                         </li>
                         <li class="divider"> </li>
                         <li>
                             <a href="javascript:;"> Separated link </a>
                         </li>
                     </ul>
                 </div>
                 </td>
                <td> 18.5 </td>
                <td> 18.5 </td>
                <td> 17.8 </td>
                <td> 18.2 </td>
                <td> 18.3 </td>
                <td class="font-red-haze"> -0.1 </td>
                <td class="font-red-haze"> -0.55% </td>
                <td> 47 </td>
                <td> 0.913 </td>
                <td> 50619 </td>
                <td> 17-May, 14:30 </td>
            </tr>
                    <tr>
                                        <td class="highlight"><div class="danger"></div> <a href="javascript:;"><a target="_blank" href="https://dev.stockbangladesh.com/company-details/125">MARICO</a></a></td>
                                        <td> <div class="btn-group">
                     <button class="btn green btn-sm dropdown-toggle" type="button" data-toggle="dropdown" aria-expanded="false"> Go To
                         <i class="fa fa-angle-down"></i>
                     </button>
                     <ul class="dropdown-menu" role="menu">
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/ta-chart?instrumentCode=MARICO"> TA Chart </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/advance-ta-chart?instrumentCode=MARICO"> Advance TA Chart </a>
                         </li>
                                                  <li>
                                                      <a target="_blank" href="https://dev.stockbangladesh.com/minute-chart/125"> Minute Chart </a>
                                                  </li>

                                                  <li>
                                                      <a target="_blank" href="https://dev.stockbangladesh.com/news-chart/125"> News Chart </a>
                                                  </li>



                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/company-details/125"> Company Details </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/fundamental-details/125"> Fundamental Details </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/news/search?keyword=&amp;instrument_id=125&amp;from_date=&amp;to_date="> News</a>
                         </li>
                         <li class="divider"> </li>
                         <li>
                             <a href="javascript:;"> Separated link </a>
                         </li>
                     </ul>
                 </div>
                 </td>
                <td> 1155.3 </td>
                <td> 1175.2 </td>
                <td> 1155.1 </td>
                <td> 1168.4 </td>
                <td> 1201 </td>
                <td class="font-red-haze"> -32.6 </td>
                <td class="font-red-haze"> -2.71% </td>
                <td> 16 </td>
                <td> 0.109 </td>
                <td> 93 </td>
                <td> 17-May, 14:30 </td>
            </tr>
                    <tr>
                                        <td class="highlight"><div class="danger"></div> <a href="javascript:;"><a target="_blank" href="https://dev.stockbangladesh.com/company-details/533">MATINSPINN</a></a></td>
                                        <td> <div class="btn-group">
                     <button class="btn green btn-sm dropdown-toggle" type="button" data-toggle="dropdown" aria-expanded="false"> Go To
                         <i class="fa fa-angle-down"></i>
                     </button>
                     <ul class="dropdown-menu" role="menu">
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/ta-chart?instrumentCode=MATINSPINN"> TA Chart </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/advance-ta-chart?instrumentCode=MATINSPINN"> Advance TA Chart </a>
                         </li>
                                                  <li>
                                                      <a target="_blank" href="https://dev.stockbangladesh.com/minute-chart/533"> Minute Chart </a>
                                                  </li>

                                                  <li>
                                                      <a target="_blank" href="https://dev.stockbangladesh.com/news-chart/533"> News Chart </a>
                                                  </li>



                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/company-details/533"> Company Details </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/fundamental-details/533"> Fundamental Details </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/news/search?keyword=&amp;instrument_id=533&amp;from_date=&amp;to_date="> News</a>
                         </li>
                         <li class="divider"> </li>
                         <li>
                             <a href="javascript:;"> Separated link </a>
                         </li>
                     </ul>
                 </div>
                 </td>
                <td> 38.3 </td>
                <td> 38.5 </td>
                <td> 38.2 </td>
                <td> 38.3 </td>
                <td> 38.4 </td>
                <td class="font-red-haze"> -0.1 </td>
                <td class="font-red-haze"> -0.26% </td>
                <td> 38 </td>
                <td> 0.763 </td>
                <td> 19925 </td>
                <td> 17-May, 14:30 </td>
            </tr>
                    <tr>
            
                <td class="highlight"><div class="success"></div> <a href="javascript:;"><a target="_blank" href="https://dev.stockbangladesh.com/company-details/126">MBL1STMF</a></a></td>
                                                    <td> <div class="btn-group">
                     <button class="btn green btn-sm dropdown-toggle" type="button" data-toggle="dropdown" aria-expanded="false"> Go To
                         <i class="fa fa-angle-down"></i>
                     </button>
                     <ul class="dropdown-menu" role="menu">
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/ta-chart?instrumentCode=MBL1STMF"> TA Chart </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/advance-ta-chart?instrumentCode=MBL1STMF"> Advance TA Chart </a>
                         </li>
                                                  <li>
                                                      <a target="_blank" href="https://dev.stockbangladesh.com/minute-chart/126"> Minute Chart </a>
                                                  </li>

                                                  <li>
                                                      <a target="_blank" href="https://dev.stockbangladesh.com/news-chart/126"> News Chart </a>
                                                  </li>



                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/company-details/126"> Company Details </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/fundamental-details/126"> Fundamental Details </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/news/search?keyword=&amp;instrument_id=126&amp;from_date=&amp;to_date="> News</a>
                         </li>
                         <li class="divider"> </li>
                         <li>
                             <a href="javascript:;"> Separated link </a>
                         </li>
                     </ul>
                 </div>
                 </td>
                <td> 9 </td>
                <td> 9 </td>
                <td> 9 </td>
                <td> 9 </td>
                <td> 8.7 </td>
                <td class="font-green-jungle"> 0.3 </td>
                <td class="font-green-jungle"> 3.45% </td>
                <td> 2 </td>
                <td> 0.01 </td>
                <td> 1117 </td>
                <td> 17-May, 14:30 </td>
            </tr>
                    <tr>
                                                    <td class="highlight"><div class="info"></div> <a href="javascript:;"><a target="_blank" href="https://dev.stockbangladesh.com/company-details/127">MEGCONMILK</a></a></td>
                            <td> <div class="btn-group">
                     <button class="btn green btn-sm dropdown-toggle" type="button" data-toggle="dropdown" aria-expanded="false"> Go To
                         <i class="fa fa-angle-down"></i>
                     </button>
                     <ul class="dropdown-menu" role="menu">
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/ta-chart?instrumentCode=MEGCONMILK"> TA Chart </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/advance-ta-chart?instrumentCode=MEGCONMILK"> Advance TA Chart </a>
                         </li>
                                                  <li>
                                                      <a target="_blank" href="https://dev.stockbangladesh.com/minute-chart/127"> Minute Chart </a>
                                                  </li>

                                                  <li>
                                                      <a target="_blank" href="https://dev.stockbangladesh.com/news-chart/127"> News Chart </a>
                                                  </li>



                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/company-details/127"> Company Details </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/fundamental-details/127"> Fundamental Details </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/news/search?keyword=&amp;instrument_id=127&amp;from_date=&amp;to_date="> News</a>
                         </li>
                         <li class="divider"> </li>
                         <li>
                             <a href="javascript:;"> Separated link </a>
                         </li>
                     </ul>
                 </div>
                 </td>
                <td> 29.4 </td>
                <td> 30.5 </td>
                <td> 29 </td>
                <td> 29.1 </td>
                <td> 29.4 </td>
                <td class="font-red-haze"> -0.3 </td>
                <td class="font-red-haze"> -1.02% </td>
                <td> 76 </td>
                <td> 0.576 </td>
                <td> 19534 </td>
                <td> 17-May, 14:30 </td>
            </tr>
                    <tr>
                                        <td class="highlight"><div class="danger"></div> <a href="javascript:;"><a target="_blank" href="https://dev.stockbangladesh.com/company-details/128">MEGHNACEM</a></a></td>
                                        <td> <div class="btn-group">
                     <button class="btn green btn-sm dropdown-toggle" type="button" data-toggle="dropdown" aria-expanded="false"> Go To
                         <i class="fa fa-angle-down"></i>
                     </button>
                     <ul class="dropdown-menu" role="menu">
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/ta-chart?instrumentCode=MEGHNACEM"> TA Chart </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/advance-ta-chart?instrumentCode=MEGHNACEM"> Advance TA Chart </a>
                         </li>
                                                  <li>
                                                      <a target="_blank" href="https://dev.stockbangladesh.com/minute-chart/128"> Minute Chart </a>
                                                  </li>

                                                  <li>
                                                      <a target="_blank" href="https://dev.stockbangladesh.com/news-chart/128"> News Chart </a>
                                                  </li>



                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/company-details/128"> Company Details </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/fundamental-details/128"> Fundamental Details </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/news/search?keyword=&amp;instrument_id=128&amp;from_date=&amp;to_date="> News</a>
                         </li>
                         <li class="divider"> </li>
                         <li>
                             <a href="javascript:;"> Separated link </a>
                         </li>
                     </ul>
                 </div>
                 </td>
                <td> 93.5 </td>
                <td> 95.4 </td>
                <td> 93.5 </td>
                <td> 93.9 </td>
                <td> 94.8 </td>
                <td class="font-red-haze"> -0.9 </td>
                <td class="font-red-haze"> -0.95% </td>
                <td> 52 </td>
                <td> 0.423 </td>
                <td> 4501 </td>
                <td> 17-May, 14:30 </td>
            </tr>
                    <tr>
            
                <td class="highlight"><div class="success"></div> <a href="javascript:;"><a target="_blank" href="https://dev.stockbangladesh.com/company-details/129">MEGHNALIFE</a></a></td>
                                                    <td> <div class="btn-group">
                     <button class="btn green btn-sm dropdown-toggle" type="button" data-toggle="dropdown" aria-expanded="false"> Go To
                         <i class="fa fa-angle-down"></i>
                     </button>
                     <ul class="dropdown-menu" role="menu">
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/ta-chart?instrumentCode=MEGHNALIFE"> TA Chart </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/advance-ta-chart?instrumentCode=MEGHNALIFE"> Advance TA Chart </a>
                         </li>
                                                  <li>
                                                      <a target="_blank" href="https://dev.stockbangladesh.com/minute-chart/129"> Minute Chart </a>
                                                  </li>

                                                  <li>
                                                      <a target="_blank" href="https://dev.stockbangladesh.com/news-chart/129"> News Chart </a>
                                                  </li>



                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/company-details/129"> Company Details </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/fundamental-details/129"> Fundamental Details </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/news/search?keyword=&amp;instrument_id=129&amp;from_date=&amp;to_date="> News</a>
                         </li>
                         <li class="divider"> </li>
                         <li>
                             <a href="javascript:;"> Separated link </a>
                         </li>
                     </ul>
                 </div>
                 </td>
                <td> 58 </td>
                <td> 58 </td>
                <td> 57.2 </td>
                <td> 57.3 </td>
                <td> 57.8 </td>
                <td class="font-red-haze"> -0.5 </td>
                <td class="font-red-haze"> -0.87% </td>
                <td> 45 </td>
                <td> 1.498 </td>
                <td> 26144 </td>
                <td> 17-May, 14:30 </td>
            </tr>
                    <tr>
            
                <td class="highlight"><div class="success"></div> <a href="javascript:;"><a target="_blank" href="https://dev.stockbangladesh.com/company-details/130">MEGHNAPET</a></a></td>
                                                    <td> <div class="btn-group">
                     <button class="btn green btn-sm dropdown-toggle" type="button" data-toggle="dropdown" aria-expanded="false"> Go To
                         <i class="fa fa-angle-down"></i>
                     </button>
                     <ul class="dropdown-menu" role="menu">
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/ta-chart?instrumentCode=MEGHNAPET"> TA Chart </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/advance-ta-chart?instrumentCode=MEGHNAPET"> Advance TA Chart </a>
                         </li>
                                                  <li>
                                                      <a target="_blank" href="https://dev.stockbangladesh.com/minute-chart/130"> Minute Chart </a>
                                                  </li>

                                                  <li>
                                                      <a target="_blank" href="https://dev.stockbangladesh.com/news-chart/130"> News Chart </a>
                                                  </li>



                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/company-details/130"> Company Details </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/fundamental-details/130"> Fundamental Details </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/news/search?keyword=&amp;instrument_id=130&amp;from_date=&amp;to_date="> News</a>
                         </li>
                         <li class="divider"> </li>
                         <li>
                             <a href="javascript:;"> Separated link </a>
                         </li>
                     </ul>
                 </div>
                 </td>
                <td> 24.9 </td>
                <td> 25.5 </td>
                <td> 24.6 </td>
                <td> 24.7 </td>
                <td> 24.5 </td>
                <td class="font-green-jungle"> 0.2 </td>
                <td class="font-green-jungle"> 0.82% </td>
                <td> 41 </td>
                <td> 0.214 </td>
                <td> 8670 </td>
                <td> 17-May, 14:30 </td>
            </tr>
                    <tr>
                                        <td class="highlight"><div class="danger"></div> <a href="javascript:;"><a target="_blank" href="https://dev.stockbangladesh.com/company-details/131">MERCANBANK</a></a></td>
                                        <td> <div class="btn-group">
                     <button class="btn green btn-sm dropdown-toggle" type="button" data-toggle="dropdown" aria-expanded="false"> Go To
                         <i class="fa fa-angle-down"></i>
                     </button>
                     <ul class="dropdown-menu" role="menu">
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/ta-chart?instrumentCode=MERCANBANK"> TA Chart </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/advance-ta-chart?instrumentCode=MERCANBANK"> Advance TA Chart </a>
                         </li>
                                                  <li>
                                                      <a target="_blank" href="https://dev.stockbangladesh.com/minute-chart/131"> Minute Chart </a>
                                                  </li>

                                                  <li>
                                                      <a target="_blank" href="https://dev.stockbangladesh.com/news-chart/131"> News Chart </a>
                                                  </li>



                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/company-details/131"> Company Details </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/fundamental-details/131"> Fundamental Details </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/news/search?keyword=&amp;instrument_id=131&amp;from_date=&amp;to_date="> News</a>
                         </li>
                         <li class="divider"> </li>
                         <li>
                             <a href="javascript:;"> Separated link </a>
                         </li>
                     </ul>
                 </div>
                 </td>
                <td> 16.9 </td>
                <td> 17.2 </td>
                <td> 16.7 </td>
                <td> 16.8 </td>
                <td> 17.1 </td>
                <td class="font-red-haze"> -0.3 </td>
                <td class="font-red-haze"> -1.75% </td>
                <td> 353 </td>
                <td> 15.521 </td>
                <td> 919126 </td>
                <td> 17-May, 14:30 </td>
            </tr>
                    <tr>
            
                <td class="highlight"><div class="success"></div> <a href="javascript:;"><a target="_blank" href="https://dev.stockbangladesh.com/company-details/132">MERCINS</a></a></td>
                                                    <td> <div class="btn-group">
                     <button class="btn green btn-sm dropdown-toggle" type="button" data-toggle="dropdown" aria-expanded="false"> Go To
                         <i class="fa fa-angle-down"></i>
                     </button>
                     <ul class="dropdown-menu" role="menu">
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/ta-chart?instrumentCode=MERCINS"> TA Chart </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/advance-ta-chart?instrumentCode=MERCINS"> Advance TA Chart </a>
                         </li>
                                                  <li>
                                                      <a target="_blank" href="https://dev.stockbangladesh.com/minute-chart/132"> Minute Chart </a>
                                                  </li>

                                                  <li>
                                                      <a target="_blank" href="https://dev.stockbangladesh.com/news-chart/132"> News Chart </a>
                                                  </li>



                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/company-details/132"> Company Details </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/fundamental-details/132"> Fundamental Details </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/news/search?keyword=&amp;instrument_id=132&amp;from_date=&amp;to_date="> News</a>
                         </li>
                         <li class="divider"> </li>
                         <li>
                             <a href="javascript:;"> Separated link </a>
                         </li>
                     </ul>
                 </div>
                 </td>
                <td> 26.6 </td>
                <td> 26.9 </td>
                <td> 25.7 </td>
                <td> 26.6 </td>
                <td> 26.2 </td>
                <td class="font-green-jungle"> 0.4 </td>
                <td class="font-green-jungle"> 1.53% </td>
                <td> 217 </td>
                <td> 10.294 </td>
                <td> 388767 </td>
                <td> 17-May, 14:30 </td>
            </tr>
                    <tr>
                                        <td class="highlight"><div class="danger"></div> <a href="javascript:;"><a target="_blank" href="https://dev.stockbangladesh.com/company-details/133">METROSPIN</a></a></td>
                                        <td> <div class="btn-group">
                     <button class="btn green btn-sm dropdown-toggle" type="button" data-toggle="dropdown" aria-expanded="false"> Go To
                         <i class="fa fa-angle-down"></i>
                     </button>
                     <ul class="dropdown-menu" role="menu">
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/ta-chart?instrumentCode=METROSPIN"> TA Chart </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/advance-ta-chart?instrumentCode=METROSPIN"> Advance TA Chart </a>
                         </li>
                                                  <li>
                                                      <a target="_blank" href="https://dev.stockbangladesh.com/minute-chart/133"> Minute Chart </a>
                                                  </li>

                                                  <li>
                                                      <a target="_blank" href="https://dev.stockbangladesh.com/news-chart/133"> News Chart </a>
                                                  </li>



                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/company-details/133"> Company Details </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/fundamental-details/133"> Fundamental Details </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/news/search?keyword=&amp;instrument_id=133&amp;from_date=&amp;to_date="> News</a>
                         </li>
                         <li class="divider"> </li>
                         <li>
                             <a href="javascript:;"> Separated link </a>
                         </li>
                     </ul>
                 </div>
                 </td>
                <td> 11 </td>
                <td> 11.4 </td>
                <td> 11 </td>
                <td> 11.1 </td>
                <td> 11.3 </td>
                <td class="font-red-haze"> -0.2 </td>
                <td class="font-red-haze"> -1.77% </td>
                <td> 216 </td>
                <td> 6.626 </td>
                <td> 594620 </td>
                <td> 17-May, 14:30 </td>
            </tr>
                    <tr>
                                        <td class="highlight"><div class="danger"></div> <a href="javascript:;"><a target="_blank" href="https://dev.stockbangladesh.com/company-details/530">MHSML</a></a></td>
                                        <td> <div class="btn-group">
                     <button class="btn green btn-sm dropdown-toggle" type="button" data-toggle="dropdown" aria-expanded="false"> Go To
                         <i class="fa fa-angle-down"></i>
                     </button>
                     <ul class="dropdown-menu" role="menu">
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/ta-chart?instrumentCode=MHSML"> TA Chart </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/advance-ta-chart?instrumentCode=MHSML"> Advance TA Chart </a>
                         </li>
                                                  <li>
                                                      <a target="_blank" href="https://dev.stockbangladesh.com/minute-chart/530"> Minute Chart </a>
                                                  </li>

                                                  <li>
                                                      <a target="_blank" href="https://dev.stockbangladesh.com/news-chart/530"> News Chart </a>
                                                  </li>



                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/company-details/530"> Company Details </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/fundamental-details/530"> Fundamental Details </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/news/search?keyword=&amp;instrument_id=530&amp;from_date=&amp;to_date="> News</a>
                         </li>
                         <li class="divider"> </li>
                         <li>
                             <a href="javascript:;"> Separated link </a>
                         </li>
                     </ul>
                 </div>
                 </td>
                <td> 15.3 </td>
                <td> 15.6 </td>
                <td> 14.7 </td>
                <td> 15 </td>
                <td> 15.4 </td>
                <td class="font-red-haze"> -0.4 </td>
                <td class="font-red-haze"> -2.6% </td>
                <td> 156 </td>
                <td> 2.477 </td>
                <td> 165091 </td>
                <td> 17-May, 14:30 </td>
            </tr>
                    <tr>
                                        <td class="highlight"><div class="danger"></div> <a href="javascript:;"><a target="_blank" href="https://dev.stockbangladesh.com/company-details/134">MICEMENT</a></a></td>
                                        <td> <div class="btn-group">
                     <button class="btn green btn-sm dropdown-toggle" type="button" data-toggle="dropdown" aria-expanded="false"> Go To
                         <i class="fa fa-angle-down"></i>
                     </button>
                     <ul class="dropdown-menu" role="menu">
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/ta-chart?instrumentCode=MICEMENT"> TA Chart </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/advance-ta-chart?instrumentCode=MICEMENT"> Advance TA Chart </a>
                         </li>
                                                  <li>
                                                      <a target="_blank" href="https://dev.stockbangladesh.com/minute-chart/134"> Minute Chart </a>
                                                  </li>

                                                  <li>
                                                      <a target="_blank" href="https://dev.stockbangladesh.com/news-chart/134"> News Chart </a>
                                                  </li>



                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/company-details/134"> Company Details </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/fundamental-details/134"> Fundamental Details </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/news/search?keyword=&amp;instrument_id=134&amp;from_date=&amp;to_date="> News</a>
                         </li>
                         <li class="divider"> </li>
                         <li>
                             <a href="javascript:;"> Separated link </a>
                         </li>
                     </ul>
                 </div>
                 </td>
                <td> 80 </td>
                <td> 80 </td>
                <td> 78.4 </td>
                <td> 80 </td>
                <td> 80.8 </td>
                <td class="font-red-haze"> -0.8 </td>
                <td class="font-red-haze"> -0.99% </td>
                <td> 43 </td>
                <td> 0.598 </td>
                <td> 7491 </td>
                <td> 17-May, 14:30 </td>
            </tr>
                    <tr>
                                        <td class="highlight"><div class="danger"></div> <a href="javascript:;"><a target="_blank" href="https://dev.stockbangladesh.com/company-details/135">MIDASFIN</a></a></td>
                                        <td> <div class="btn-group">
                     <button class="btn green btn-sm dropdown-toggle" type="button" data-toggle="dropdown" aria-expanded="false"> Go To
                         <i class="fa fa-angle-down"></i>
                     </button>
                     <ul class="dropdown-menu" role="menu">
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/ta-chart?instrumentCode=MIDASFIN"> TA Chart </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/advance-ta-chart?instrumentCode=MIDASFIN"> Advance TA Chart </a>
                         </li>
                                                  <li>
                                                      <a target="_blank" href="https://dev.stockbangladesh.com/minute-chart/135"> Minute Chart </a>
                                                  </li>

                                                  <li>
                                                      <a target="_blank" href="https://dev.stockbangladesh.com/news-chart/135"> News Chart </a>
                                                  </li>



                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/company-details/135"> Company Details </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/fundamental-details/135"> Fundamental Details </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/news/search?keyword=&amp;instrument_id=135&amp;from_date=&amp;to_date="> News</a>
                         </li>
                         <li class="divider"> </li>
                         <li>
                             <a href="javascript:;"> Separated link </a>
                         </li>
                     </ul>
                 </div>
                 </td>
                <td> 27.1 </td>
                <td> 27.9 </td>
                <td> 26.5 </td>
                <td> 26.5 </td>
                <td> 27.3 </td>
                <td class="font-red-haze"> -0.8 </td>
                <td class="font-red-haze"> -2.93% </td>
                <td> 33 </td>
                <td> 0.268 </td>
                <td> 10108 </td>
                <td> 17-May, 14:30 </td>
            </tr>
                    <tr>
                                        <td class="highlight"><div class="danger"></div> <a href="javascript:;"><a target="_blank" href="https://dev.stockbangladesh.com/company-details/136">MIRACLEIND</a></a></td>
                                        <td> <div class="btn-group">
                     <button class="btn green btn-sm dropdown-toggle" type="button" data-toggle="dropdown" aria-expanded="false"> Go To
                         <i class="fa fa-angle-down"></i>
                     </button>
                     <ul class="dropdown-menu" role="menu">
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/ta-chart?instrumentCode=MIRACLEIND"> TA Chart </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/advance-ta-chart?instrumentCode=MIRACLEIND"> Advance TA Chart </a>
                         </li>
                                                  <li>
                                                      <a target="_blank" href="https://dev.stockbangladesh.com/minute-chart/136"> Minute Chart </a>
                                                  </li>

                                                  <li>
                                                      <a target="_blank" href="https://dev.stockbangladesh.com/news-chart/136"> News Chart </a>
                                                  </li>



                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/company-details/136"> Company Details </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/fundamental-details/136"> Fundamental Details </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/news/search?keyword=&amp;instrument_id=136&amp;from_date=&amp;to_date="> News</a>
                         </li>
                         <li class="divider"> </li>
                         <li>
                             <a href="javascript:;"> Separated link </a>
                         </li>
                     </ul>
                 </div>
                 </td>
                <td> 41.6 </td>
                <td> 43.1 </td>
                <td> 41.3 </td>
                <td> 41.6 </td>
                <td> 42.6 </td>
                <td class="font-red-haze"> -1 </td>
                <td class="font-red-haze"> -2.35% </td>
                <td> 1236 </td>
                <td> 42.133 </td>
                <td> 999213 </td>
                <td> 17-May, 14:30 </td>
            </tr>
                    <tr>
                                                    <td class="highlight"><div class="info"></div> <a href="javascript:;"><a target="_blank" href="https://dev.stockbangladesh.com/company-details/137">MITHUNKNIT</a></a></td>
                            <td> <div class="btn-group">
                     <button class="btn green btn-sm dropdown-toggle" type="button" data-toggle="dropdown" aria-expanded="false"> Go To
                         <i class="fa fa-angle-down"></i>
                     </button>
                     <ul class="dropdown-menu" role="menu">
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/ta-chart?instrumentCode=MITHUNKNIT"> TA Chart </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/advance-ta-chart?instrumentCode=MITHUNKNIT"> Advance TA Chart </a>
                         </li>
                                                  <li>
                                                      <a target="_blank" href="https://dev.stockbangladesh.com/minute-chart/137"> Minute Chart </a>
                                                  </li>

                                                  <li>
                                                      <a target="_blank" href="https://dev.stockbangladesh.com/news-chart/137"> News Chart </a>
                                                  </li>



                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/company-details/137"> Company Details </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/fundamental-details/137"> Fundamental Details </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/news/search?keyword=&amp;instrument_id=137&amp;from_date=&amp;to_date="> News</a>
                         </li>
                         <li class="divider"> </li>
                         <li>
                             <a href="javascript:;"> Separated link </a>
                         </li>
                     </ul>
                 </div>
                 </td>
                <td> 23.2 </td>
                <td> 23.4 </td>
                <td> 23.1 </td>
                <td> 23.1 </td>
                <td> 23.2 </td>
                <td class="font-red-haze"> -0.1 </td>
                <td class="font-red-haze"> -0.43% </td>
                <td> 40 </td>
                <td> 0.451 </td>
                <td> 19460 </td>
                <td> 17-May, 14:30 </td>
            </tr>
                    <tr>
                                        <td class="highlight"><div class="danger"></div> <a href="javascript:;"><a target="_blank" href="https://dev.stockbangladesh.com/company-details/474">MJLBD</a></a></td>
                                        <td> <div class="btn-group">
                     <button class="btn green btn-sm dropdown-toggle" type="button" data-toggle="dropdown" aria-expanded="false"> Go To
                         <i class="fa fa-angle-down"></i>
                     </button>
                     <ul class="dropdown-menu" role="menu">
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/ta-chart?instrumentCode=MJLBD"> TA Chart </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/advance-ta-chart?instrumentCode=MJLBD"> Advance TA Chart </a>
                         </li>
                                                  <li>
                                                      <a target="_blank" href="https://dev.stockbangladesh.com/minute-chart/474"> Minute Chart </a>
                                                  </li>

                                                  <li>
                                                      <a target="_blank" href="https://dev.stockbangladesh.com/news-chart/474"> News Chart </a>
                                                  </li>



                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/company-details/474"> Company Details </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/fundamental-details/474"> Fundamental Details </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/news/search?keyword=&amp;instrument_id=474&amp;from_date=&amp;to_date="> News</a>
                         </li>
                         <li class="divider"> </li>
                         <li>
                             <a href="javascript:;"> Separated link </a>
                         </li>
                     </ul>
                 </div>
                 </td>
                <td> 101.6 </td>
                <td> 104.3 </td>
                <td> 101.2 </td>
                <td> 101.7 </td>
                <td> 103.1 </td>
                <td class="font-red-haze"> -1.4 </td>
                <td class="font-red-haze"> -1.36% </td>
                <td> 538 </td>
                <td> 24.521 </td>
                <td> 238630 </td>
                <td> 17-May, 14:30 </td>
            </tr>
                    <tr>
                                        <td class="highlight"><div class="danger"></div> <a href="javascript:;"><a target="_blank" href="https://dev.stockbangladesh.com/company-details/138">MODERNDYE</a></a></td>
                                        <td> <div class="btn-group">
                     <button class="btn green btn-sm dropdown-toggle" type="button" data-toggle="dropdown" aria-expanded="false"> Go To
                         <i class="fa fa-angle-down"></i>
                     </button>
                     <ul class="dropdown-menu" role="menu">
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/ta-chart?instrumentCode=MODERNDYE"> TA Chart </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/advance-ta-chart?instrumentCode=MODERNDYE"> Advance TA Chart </a>
                         </li>
                                                  <li>
                                                      <a target="_blank" href="https://dev.stockbangladesh.com/minute-chart/138"> Minute Chart </a>
                                                  </li>

                                                  <li>
                                                      <a target="_blank" href="https://dev.stockbangladesh.com/news-chart/138"> News Chart </a>
                                                  </li>



                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/company-details/138"> Company Details </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/fundamental-details/138"> Fundamental Details </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/news/search?keyword=&amp;instrument_id=138&amp;from_date=&amp;to_date="> News</a>
                         </li>
                         <li class="divider"> </li>
                         <li>
                             <a href="javascript:;"> Separated link </a>
                         </li>
                     </ul>
                 </div>
                 </td>
                <td> 210 </td>
                <td> 210 </td>
                <td> 210 </td>
                <td> 210 </td>
                <td> 224 </td>
                <td class="font-red-haze"> -14 </td>
                <td class="font-red-haze"> -6.25% </td>
                <td> 2 </td>
                <td> 0.042 </td>
                <td> 200 </td>
                <td> 17-May, 14:30 </td>
            </tr>
                    <tr>
            
                <td class="highlight"><div class="success"></div> <a href="javascript:;"><a target="_blank" href="https://dev.stockbangladesh.com/company-details/139">MONNOCERA</a></a></td>
                                                    <td> <div class="btn-group">
                     <button class="btn green btn-sm dropdown-toggle" type="button" data-toggle="dropdown" aria-expanded="false"> Go To
                         <i class="fa fa-angle-down"></i>
                     </button>
                     <ul class="dropdown-menu" role="menu">
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/ta-chart?instrumentCode=MONNOCERA"> TA Chart </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/advance-ta-chart?instrumentCode=MONNOCERA"> Advance TA Chart </a>
                         </li>
                                                  <li>
                                                      <a target="_blank" href="https://dev.stockbangladesh.com/minute-chart/139"> Minute Chart </a>
                                                  </li>

                                                  <li>
                                                      <a target="_blank" href="https://dev.stockbangladesh.com/news-chart/139"> News Chart </a>
                                                  </li>



                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/company-details/139"> Company Details </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/fundamental-details/139"> Fundamental Details </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/news/search?keyword=&amp;instrument_id=139&amp;from_date=&amp;to_date="> News</a>
                         </li>
                         <li class="divider"> </li>
                         <li>
                             <a href="javascript:;"> Separated link </a>
                         </li>
                     </ul>
                 </div>
                 </td>
                <td> 143.4 </td>
                <td> 144.7 </td>
                <td> 141 </td>
                <td> 143.4 </td>
                <td> 140.5 </td>
                <td class="font-green-jungle"> 2.9 </td>
                <td class="font-green-jungle"> 2.06% </td>
                <td> 2984 </td>
                <td> 132.018 </td>
                <td> 920403 </td>
                <td> 17-May, 14:30 </td>
            </tr>
                    <tr>
            
                <td class="highlight"><div class="success"></div> <a href="javascript:;"><a target="_blank" href="https://dev.stockbangladesh.com/company-details/141">MONNOSTAF</a></a></td>
                                                    <td> <div class="btn-group">
                     <button class="btn green btn-sm dropdown-toggle" type="button" data-toggle="dropdown" aria-expanded="false"> Go To
                         <i class="fa fa-angle-down"></i>
                     </button>
                     <ul class="dropdown-menu" role="menu">
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/ta-chart?instrumentCode=MONNOSTAF"> TA Chart </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/advance-ta-chart?instrumentCode=MONNOSTAF"> Advance TA Chart </a>
                         </li>
                                                  <li>
                                                      <a target="_blank" href="https://dev.stockbangladesh.com/minute-chart/141"> Minute Chart </a>
                                                  </li>

                                                  <li>
                                                      <a target="_blank" href="https://dev.stockbangladesh.com/news-chart/141"> News Chart </a>
                                                  </li>



                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/company-details/141"> Company Details </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/fundamental-details/141"> Fundamental Details </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/news/search?keyword=&amp;instrument_id=141&amp;from_date=&amp;to_date="> News</a>
                         </li>
                         <li class="divider"> </li>
                         <li>
                             <a href="javascript:;"> Separated link </a>
                         </li>
                     </ul>
                 </div>
                 </td>
                <td> 1944 </td>
                <td> 1992.9 </td>
                <td> 1900 </td>
                <td> 1934.4 </td>
                <td> 1875.7 </td>
                <td class="font-green-jungle"> 58.7 </td>
                <td class="font-green-jungle"> 3.13% </td>
                <td> 768 </td>
                <td> 35.861 </td>
                <td> 18239 </td>
                <td> 17-May, 14:30 </td>
            </tr>
                    <tr>
                                        <td class="highlight"><div class="danger"></div> <a href="javascript:;"><a target="_blank" href="https://dev.stockbangladesh.com/company-details/142">MPETROLEUM</a></a></td>
                                        <td> <div class="btn-group">
                     <button class="btn green btn-sm dropdown-toggle" type="button" data-toggle="dropdown" aria-expanded="false"> Go To
                         <i class="fa fa-angle-down"></i>
                     </button>
                     <ul class="dropdown-menu" role="menu">
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/ta-chart?instrumentCode=MPETROLEUM"> TA Chart </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/advance-ta-chart?instrumentCode=MPETROLEUM"> Advance TA Chart </a>
                         </li>
                                                  <li>
                                                      <a target="_blank" href="https://dev.stockbangladesh.com/minute-chart/142"> Minute Chart </a>
                                                  </li>

                                                  <li>
                                                      <a target="_blank" href="https://dev.stockbangladesh.com/news-chart/142"> News Chart </a>
                                                  </li>



                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/company-details/142"> Company Details </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/fundamental-details/142"> Fundamental Details </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/news/search?keyword=&amp;instrument_id=142&amp;from_date=&amp;to_date="> News</a>
                         </li>
                         <li class="divider"> </li>
                         <li>
                             <a href="javascript:;"> Separated link </a>
                         </li>
                     </ul>
                 </div>
                 </td>
                <td> 182.1 </td>
                <td> 187 </td>
                <td> 182.1 </td>
                <td> 182.7 </td>
                <td> 186.2 </td>
                <td class="font-red-haze"> -3.5 </td>
                <td class="font-red-haze"> -1.88% </td>
                <td> 162 </td>
                <td> 7.362 </td>
                <td> 39769 </td>
                <td> 17-May, 14:30 </td>
            </tr>
                    <tr>
                                        <td class="highlight"><div class="danger"></div> <a href="javascript:;"><a target="_blank" href="https://dev.stockbangladesh.com/company-details/143">MTB</a></a></td>
                                        <td> <div class="btn-group">
                     <button class="btn green btn-sm dropdown-toggle" type="button" data-toggle="dropdown" aria-expanded="false"> Go To
                         <i class="fa fa-angle-down"></i>
                     </button>
                     <ul class="dropdown-menu" role="menu">
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/ta-chart?instrumentCode=MTB"> TA Chart </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/advance-ta-chart?instrumentCode=MTB"> Advance TA Chart </a>
                         </li>
                                                  <li>
                                                      <a target="_blank" href="https://dev.stockbangladesh.com/minute-chart/143"> Minute Chart </a>
                                                  </li>

                                                  <li>
                                                      <a target="_blank" href="https://dev.stockbangladesh.com/news-chart/143"> News Chart </a>
                                                  </li>



                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/company-details/143"> Company Details </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/fundamental-details/143"> Fundamental Details </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/news/search?keyword=&amp;instrument_id=143&amp;from_date=&amp;to_date="> News</a>
                         </li>
                         <li class="divider"> </li>
                         <li>
                             <a href="javascript:;"> Separated link </a>
                         </li>
                     </ul>
                 </div>
                 </td>
                <td> 26.6 </td>
                <td> 28.5 </td>
                <td> 26.5 </td>
                <td> 26.8 </td>
                <td> 26.8 </td>
                <td class="font-green-jungle"> 0 </td>
                <td class="font-green-jungle"> 0% </td>
                <td> 30 </td>
                <td> 1.392 </td>
                <td> 51850 </td>
                <td> 17-May, 14:30 </td>
            </tr>
                    <tr>
                                        <td class="highlight"><div class="danger"></div> <a href="javascript:;"><a target="_blank" href="https://dev.stockbangladesh.com/company-details/30190">NAHEEACP</a></a></td>
                                        <td> <div class="btn-group">
                     <button class="btn green btn-sm dropdown-toggle" type="button" data-toggle="dropdown" aria-expanded="false"> Go To
                         <i class="fa fa-angle-down"></i>
                     </button>
                     <ul class="dropdown-menu" role="menu">
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/ta-chart?instrumentCode=NAHEEACP"> TA Chart </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/advance-ta-chart?instrumentCode=NAHEEACP"> Advance TA Chart </a>
                         </li>
                                                  <li>
                                                      <a target="_blank" href="https://dev.stockbangladesh.com/minute-chart/30190"> Minute Chart </a>
                                                  </li>

                                                  <li>
                                                      <a target="_blank" href="https://dev.stockbangladesh.com/news-chart/30190"> News Chart </a>
                                                  </li>



                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/company-details/30190"> Company Details </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/fundamental-details/30190"> Fundamental Details </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/news/search?keyword=&amp;instrument_id=30190&amp;from_date=&amp;to_date="> News</a>
                         </li>
                         <li class="divider"> </li>
                         <li>
                             <a href="javascript:;"> Separated link </a>
                         </li>
                     </ul>
                 </div>
                 </td>
                <td> 45.7 </td>
                <td> 47.4 </td>
                <td> 45 </td>
                <td> 45.5 </td>
                <td> 46.8 </td>
                <td class="font-red-haze"> -1.3 </td>
                <td class="font-red-haze"> -2.78% </td>
                <td> 924 </td>
                <td> 28.935 </td>
                <td> 625671 </td>
                <td> 17-May, 14:30 </td>
            </tr>
                    <tr>
                                        <td class="highlight"><div class="danger"></div> <a href="javascript:;"><a target="_blank" href="https://dev.stockbangladesh.com/company-details/144">NATLIFEINS</a></a></td>
                                        <td> <div class="btn-group">
                     <button class="btn green btn-sm dropdown-toggle" type="button" data-toggle="dropdown" aria-expanded="false"> Go To
                         <i class="fa fa-angle-down"></i>
                     </button>
                     <ul class="dropdown-menu" role="menu">
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/ta-chart?instrumentCode=NATLIFEINS"> TA Chart </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/advance-ta-chart?instrumentCode=NATLIFEINS"> Advance TA Chart </a>
                         </li>
                                                  <li>
                                                      <a target="_blank" href="https://dev.stockbangladesh.com/minute-chart/144"> Minute Chart </a>
                                                  </li>

                                                  <li>
                                                      <a target="_blank" href="https://dev.stockbangladesh.com/news-chart/144"> News Chart </a>
                                                  </li>



                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/company-details/144"> Company Details </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/fundamental-details/144"> Fundamental Details </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/news/search?keyword=&amp;instrument_id=144&amp;from_date=&amp;to_date="> News</a>
                         </li>
                         <li class="divider"> </li>
                         <li>
                             <a href="javascript:;"> Separated link </a>
                         </li>
                     </ul>
                 </div>
                 </td>
                <td> 150 </td>
                <td> 150.2 </td>
                <td> 150 </td>
                <td> 150.1 </td>
                <td> 150.1 </td>
                <td class="font-green-jungle"> 0 </td>
                <td class="font-green-jungle"> 0% </td>
                <td> 9 </td>
                <td> 0.167 </td>
                <td> 1110 </td>
                <td> 17-May, 14:30 </td>
            </tr>
                    <tr>
            
                <td class="highlight"><div class="success"></div> <a href="javascript:;"><a target="_blank" href="https://dev.stockbangladesh.com/company-details/145">NAVANACNG</a></a></td>
                                                    <td> <div class="btn-group">
                     <button class="btn green btn-sm dropdown-toggle" type="button" data-toggle="dropdown" aria-expanded="false"> Go To
                         <i class="fa fa-angle-down"></i>
                     </button>
                     <ul class="dropdown-menu" role="menu">
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/ta-chart?instrumentCode=NAVANACNG"> TA Chart </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/advance-ta-chart?instrumentCode=NAVANACNG"> Advance TA Chart </a>
                         </li>
                                                  <li>
                                                      <a target="_blank" href="https://dev.stockbangladesh.com/minute-chart/145"> Minute Chart </a>
                                                  </li>

                                                  <li>
                                                      <a target="_blank" href="https://dev.stockbangladesh.com/news-chart/145"> News Chart </a>
                                                  </li>



                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/company-details/145"> Company Details </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/fundamental-details/145"> Fundamental Details </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/news/search?keyword=&amp;instrument_id=145&amp;from_date=&amp;to_date="> News</a>
                         </li>
                         <li class="divider"> </li>
                         <li>
                             <a href="javascript:;"> Separated link </a>
                         </li>
                     </ul>
                 </div>
                 </td>
                <td> 72.8 </td>
                <td> 73 </td>
                <td> 71.2 </td>
                <td> 72.6 </td>
                <td> 71.9 </td>
                <td class="font-green-jungle"> 0.7 </td>
                <td class="font-green-jungle"> 0.97% </td>
                <td> 623 </td>
                <td> 35.589 </td>
                <td> 494348 </td>
                <td> 17-May, 14:30 </td>
            </tr>
                    <tr>
                                                    <td class="highlight"><div class="info"></div> <a href="javascript:;"><a target="_blank" href="https://dev.stockbangladesh.com/company-details/146">NBL</a></a></td>
                            <td> <div class="btn-group">
                     <button class="btn green btn-sm dropdown-toggle" type="button" data-toggle="dropdown" aria-expanded="false"> Go To
                         <i class="fa fa-angle-down"></i>
                     </button>
                     <ul class="dropdown-menu" role="menu">
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/ta-chart?instrumentCode=NBL"> TA Chart </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/advance-ta-chart?instrumentCode=NBL"> Advance TA Chart </a>
                         </li>
                                                  <li>
                                                      <a target="_blank" href="https://dev.stockbangladesh.com/minute-chart/146"> Minute Chart </a>
                                                  </li>

                                                  <li>
                                                      <a target="_blank" href="https://dev.stockbangladesh.com/news-chart/146"> News Chart </a>
                                                  </li>



                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/company-details/146"> Company Details </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/fundamental-details/146"> Fundamental Details </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/news/search?keyword=&amp;instrument_id=146&amp;from_date=&amp;to_date="> News</a>
                         </li>
                         <li class="divider"> </li>
                         <li>
                             <a href="javascript:;"> Separated link </a>
                         </li>
                     </ul>
                 </div>
                 </td>
                <td> 11 </td>
                <td> 11 </td>
                <td> 10.8 </td>
                <td> 10.9 </td>
                <td> 11 </td>
                <td class="font-red-haze"> -0.1 </td>
                <td class="font-red-haze"> -0.91% </td>
                <td> 496 </td>
                <td> 29.132 </td>
                <td> 2671339 </td>
                <td> 17-May, 14:30 </td>
            </tr>
                    <tr>
                                        <td class="highlight"><div class="danger"></div> <a href="javascript:;"><a target="_blank" href="https://dev.stockbangladesh.com/company-details/175">NCCBANK</a></a></td>
                                        <td> <div class="btn-group">
                     <button class="btn green btn-sm dropdown-toggle" type="button" data-toggle="dropdown" aria-expanded="false"> Go To
                         <i class="fa fa-angle-down"></i>
                     </button>
                     <ul class="dropdown-menu" role="menu">
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/ta-chart?instrumentCode=NCCBANK"> TA Chart </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/advance-ta-chart?instrumentCode=NCCBANK"> Advance TA Chart </a>
                         </li>
                                                  <li>
                                                      <a target="_blank" href="https://dev.stockbangladesh.com/minute-chart/175"> Minute Chart </a>
                                                  </li>

                                                  <li>
                                                      <a target="_blank" href="https://dev.stockbangladesh.com/news-chart/175"> News Chart </a>
                                                  </li>



                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/company-details/175"> Company Details </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/fundamental-details/175"> Fundamental Details </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/news/search?keyword=&amp;instrument_id=175&amp;from_date=&amp;to_date="> News</a>
                         </li>
                         <li class="divider"> </li>
                         <li>
                             <a href="javascript:;"> Separated link </a>
                         </li>
                     </ul>
                 </div>
                 </td>
                <td> 15.4 </td>
                <td> 15.6 </td>
                <td> 15.4 </td>
                <td> 15.5 </td>
                <td> 15.6 </td>
                <td class="font-red-haze"> -0.1 </td>
                <td class="font-red-haze"> -0.64% </td>
                <td> 97 </td>
                <td> 7.563 </td>
                <td> 487883 </td>
                <td> 17-May, 14:30 </td>
            </tr>
                    <tr>
                                        <td class="highlight"><div class="danger"></div> <a href="javascript:;"><a target="_blank" href="https://dev.stockbangladesh.com/company-details/508">NCCBLMF1</a></a></td>
                                        <td> <div class="btn-group">
                     <button class="btn green btn-sm dropdown-toggle" type="button" data-toggle="dropdown" aria-expanded="false"> Go To
                         <i class="fa fa-angle-down"></i>
                     </button>
                     <ul class="dropdown-menu" role="menu">
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/ta-chart?instrumentCode=NCCBLMF1"> TA Chart </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/advance-ta-chart?instrumentCode=NCCBLMF1"> Advance TA Chart </a>
                         </li>
                                                  <li>
                                                      <a target="_blank" href="https://dev.stockbangladesh.com/minute-chart/508"> Minute Chart </a>
                                                  </li>

                                                  <li>
                                                      <a target="_blank" href="https://dev.stockbangladesh.com/news-chart/508"> News Chart </a>
                                                  </li>



                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/company-details/508"> Company Details </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/fundamental-details/508"> Fundamental Details </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/news/search?keyword=&amp;instrument_id=508&amp;from_date=&amp;to_date="> News</a>
                         </li>
                         <li class="divider"> </li>
                         <li>
                             <a href="javascript:;"> Separated link </a>
                         </li>
                     </ul>
                 </div>
                 </td>
                <td> 7.5 </td>
                <td> 7.7 </td>
                <td> 7.5 </td>
                <td> 7.6 </td>
                <td> 7.6 </td>
                <td class="font-green-jungle"> 0 </td>
                <td class="font-green-jungle"> 0% </td>
                <td> 33 </td>
                <td> 0.583 </td>
                <td> 77261 </td>
                <td> 17-May, 14:30 </td>
            </tr>
                    <tr>
                                        <td class="highlight"><div class="danger"></div> <a href="javascript:;"><a target="_blank" href="https://dev.stockbangladesh.com/company-details/30003">NFML</a></a></td>
                                        <td> <div class="btn-group">
                     <button class="btn green btn-sm dropdown-toggle" type="button" data-toggle="dropdown" aria-expanded="false"> Go To
                         <i class="fa fa-angle-down"></i>
                     </button>
                     <ul class="dropdown-menu" role="menu">
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/ta-chart?instrumentCode=NFML"> TA Chart </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/advance-ta-chart?instrumentCode=NFML"> Advance TA Chart </a>
                         </li>
                                                  <li>
                                                      <a target="_blank" href="https://dev.stockbangladesh.com/minute-chart/30003"> Minute Chart </a>
                                                  </li>

                                                  <li>
                                                      <a target="_blank" href="https://dev.stockbangladesh.com/news-chart/30003"> News Chart </a>
                                                  </li>



                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/company-details/30003"> Company Details </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/fundamental-details/30003"> Fundamental Details </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/news/search?keyword=&amp;instrument_id=30003&amp;from_date=&amp;to_date="> News</a>
                         </li>
                         <li class="divider"> </li>
                         <li>
                             <a href="javascript:;"> Separated link </a>
                         </li>
                     </ul>
                 </div>
                 </td>
                <td> 14 </td>
                <td> 14.3 </td>
                <td> 14 </td>
                <td> 14 </td>
                <td> 14.1 </td>
                <td class="font-red-haze"> -0.1 </td>
                <td class="font-red-haze"> -0.71% </td>
                <td> 86 </td>
                <td> 1.18 </td>
                <td> 83951 </td>
                <td> 17-May, 14:30 </td>
            </tr>
                    <tr>
                                                    <td class="highlight"><div class="info"></div> <a href="javascript:;"><a target="_blank" href="https://dev.stockbangladesh.com/company-details/176">NHFIL</a></a></td>
                            <td> <div class="btn-group">
                     <button class="btn green btn-sm dropdown-toggle" type="button" data-toggle="dropdown" aria-expanded="false"> Go To
                         <i class="fa fa-angle-down"></i>
                     </button>
                     <ul class="dropdown-menu" role="menu">
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/ta-chart?instrumentCode=NHFIL"> TA Chart </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/advance-ta-chart?instrumentCode=NHFIL"> Advance TA Chart </a>
                         </li>
                                                  <li>
                                                      <a target="_blank" href="https://dev.stockbangladesh.com/minute-chart/176"> Minute Chart </a>
                                                  </li>

                                                  <li>
                                                      <a target="_blank" href="https://dev.stockbangladesh.com/news-chart/176"> News Chart </a>
                                                  </li>



                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/company-details/176"> Company Details </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/fundamental-details/176"> Fundamental Details </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/news/search?keyword=&amp;instrument_id=176&amp;from_date=&amp;to_date="> News</a>
                         </li>
                         <li class="divider"> </li>
                         <li>
                             <a href="javascript:;"> Separated link </a>
                         </li>
                     </ul>
                 </div>
                 </td>
                <td> 39 </td>
                <td> 39.2 </td>
                <td> 38.4 </td>
                <td> 39 </td>
                <td> 39 </td>
                <td class="font-green-jungle"> 0 </td>
                <td class="font-green-jungle"> 0% </td>
                <td> 64 </td>
                <td> 1.05 </td>
                <td> 26958 </td>
                <td> 17-May, 14:30 </td>
            </tr>
                    <tr>
            
                <td class="highlight"><div class="success"></div> <a href="javascript:;"><a target="_blank" href="https://dev.stockbangladesh.com/company-details/177">NITOLINS</a></a></td>
                                                    <td> <div class="btn-group">
                     <button class="btn green btn-sm dropdown-toggle" type="button" data-toggle="dropdown" aria-expanded="false"> Go To
                         <i class="fa fa-angle-down"></i>
                     </button>
                     <ul class="dropdown-menu" role="menu">
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/ta-chart?instrumentCode=NITOLINS"> TA Chart </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/advance-ta-chart?instrumentCode=NITOLINS"> Advance TA Chart </a>
                         </li>
                                                  <li>
                                                      <a target="_blank" href="https://dev.stockbangladesh.com/minute-chart/177"> Minute Chart </a>
                                                  </li>

                                                  <li>
                                                      <a target="_blank" href="https://dev.stockbangladesh.com/news-chart/177"> News Chart </a>
                                                  </li>



                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/company-details/177"> Company Details </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/fundamental-details/177"> Fundamental Details </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/news/search?keyword=&amp;instrument_id=177&amp;from_date=&amp;to_date="> News</a>
                         </li>
                         <li class="divider"> </li>
                         <li>
                             <a href="javascript:;"> Separated link </a>
                         </li>
                     </ul>
                 </div>
                 </td>
                <td> 29.5 </td>
                <td> 29.5 </td>
                <td> 29.5 </td>
                <td> 29.5 </td>
                <td> 29.4 </td>
                <td class="font-green-jungle"> 0.1 </td>
                <td class="font-green-jungle"> 0.34% </td>
                <td> 1 </td>
                <td> 0.015 </td>
                <td> 500 </td>
                <td> 17-May, 14:30 </td>
            </tr>
                    <tr>
                                        <td class="highlight"><div class="danger"></div> <a href="javascript:;"><a target="_blank" href="https://dev.stockbangladesh.com/company-details/503">NLI1STMF</a></a></td>
                                        <td> <div class="btn-group">
                     <button class="btn green btn-sm dropdown-toggle" type="button" data-toggle="dropdown" aria-expanded="false"> Go To
                         <i class="fa fa-angle-down"></i>
                     </button>
                     <ul class="dropdown-menu" role="menu">
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/ta-chart?instrumentCode=NLI1STMF"> TA Chart </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/advance-ta-chart?instrumentCode=NLI1STMF"> Advance TA Chart </a>
                         </li>
                                                  <li>
                                                      <a target="_blank" href="https://dev.stockbangladesh.com/minute-chart/503"> Minute Chart </a>
                                                  </li>

                                                  <li>
                                                      <a target="_blank" href="https://dev.stockbangladesh.com/news-chart/503"> News Chart </a>
                                                  </li>



                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/company-details/503"> Company Details </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/fundamental-details/503"> Fundamental Details </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/news/search?keyword=&amp;instrument_id=503&amp;from_date=&amp;to_date="> News</a>
                         </li>
                         <li class="divider"> </li>
                         <li>
                             <a href="javascript:;"> Separated link </a>
                         </li>
                     </ul>
                 </div>
                 </td>
                <td> 14.8 </td>
                <td> 14.9 </td>
                <td> 14.8 </td>
                <td> 14.9 </td>
                <td> 15 </td>
                <td class="font-red-haze"> -0.1 </td>
                <td class="font-red-haze"> -0.67% </td>
                <td> 12 </td>
                <td> 1.361 </td>
                <td> 91655 </td>
                <td> 17-May, 14:30 </td>
            </tr>
                    <tr>
                                        <td class="highlight"><div class="danger"></div> <a href="javascript:;"><a target="_blank" href="https://dev.stockbangladesh.com/company-details/178">NORTHERN</a></a></td>
                                        <td> <div class="btn-group">
                     <button class="btn green btn-sm dropdown-toggle" type="button" data-toggle="dropdown" aria-expanded="false"> Go To
                         <i class="fa fa-angle-down"></i>
                     </button>
                     <ul class="dropdown-menu" role="menu">
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/ta-chart?instrumentCode=NORTHERN"> TA Chart </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/advance-ta-chart?instrumentCode=NORTHERN"> Advance TA Chart </a>
                         </li>
                                                  <li>
                                                      <a target="_blank" href="https://dev.stockbangladesh.com/minute-chart/178"> Minute Chart </a>
                                                  </li>

                                                  <li>
                                                      <a target="_blank" href="https://dev.stockbangladesh.com/news-chart/178"> News Chart </a>
                                                  </li>



                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/company-details/178"> Company Details </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/fundamental-details/178"> Fundamental Details </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/news/search?keyword=&amp;instrument_id=178&amp;from_date=&amp;to_date="> News</a>
                         </li>
                         <li class="divider"> </li>
                         <li>
                             <a href="javascript:;"> Separated link </a>
                         </li>
                     </ul>
                 </div>
                 </td>
                <td> 336.9 </td>
                <td> 357 </td>
                <td> 336 </td>
                <td> 337.1 </td>
                <td> 351.1 </td>
                <td class="font-red-haze"> -14 </td>
                <td class="font-red-haze"> -3.99% </td>
                <td> 1045 </td>
                <td> 20.235 </td>
                <td> 58942 </td>
                <td> 17-May, 14:30 </td>
            </tr>
                    <tr>
                                        <td class="highlight"><div class="danger"></div> <a href="javascript:;"><a target="_blank" href="https://dev.stockbangladesh.com/company-details/190">NORTHRNINS</a></a></td>
                                        <td> <div class="btn-group">
                     <button class="btn green btn-sm dropdown-toggle" type="button" data-toggle="dropdown" aria-expanded="false"> Go To
                         <i class="fa fa-angle-down"></i>
                     </button>
                     <ul class="dropdown-menu" role="menu">
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/ta-chart?instrumentCode=NORTHRNINS"> TA Chart </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/advance-ta-chart?instrumentCode=NORTHRNINS"> Advance TA Chart </a>
                         </li>
                                                  <li>
                                                      <a target="_blank" href="https://dev.stockbangladesh.com/minute-chart/190"> Minute Chart </a>
                                                  </li>

                                                  <li>
                                                      <a target="_blank" href="https://dev.stockbangladesh.com/news-chart/190"> News Chart </a>
                                                  </li>



                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/company-details/190"> Company Details </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/fundamental-details/190"> Fundamental Details </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/news/search?keyword=&amp;instrument_id=190&amp;from_date=&amp;to_date="> News</a>
                         </li>
                         <li class="divider"> </li>
                         <li>
                             <a href="javascript:;"> Separated link </a>
                         </li>
                     </ul>
                 </div>
                 </td>
                <td> 18.4 </td>
                <td> 18.6 </td>
                <td> 17.9 </td>
                <td> 18.2 </td>
                <td> 18.5 </td>
                <td class="font-red-haze"> -0.3 </td>
                <td class="font-red-haze"> -1.62% </td>
                <td> 48 </td>
                <td> 0.509 </td>
                <td> 27836 </td>
                <td> 17-May, 14:30 </td>
            </tr>
                    <tr>
                                        <td class="highlight"><div class="danger"></div> <a href="javascript:;"><a target="_blank" href="https://dev.stockbangladesh.com/company-details/191">NPOLYMAR</a></a></td>
                                        <td> <div class="btn-group">
                     <button class="btn green btn-sm dropdown-toggle" type="button" data-toggle="dropdown" aria-expanded="false"> Go To
                         <i class="fa fa-angle-down"></i>
                     </button>
                     <ul class="dropdown-menu" role="menu">
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/ta-chart?instrumentCode=NPOLYMAR"> TA Chart </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/advance-ta-chart?instrumentCode=NPOLYMAR"> Advance TA Chart </a>
                         </li>
                                                  <li>
                                                      <a target="_blank" href="https://dev.stockbangladesh.com/minute-chart/191"> Minute Chart </a>
                                                  </li>

                                                  <li>
                                                      <a target="_blank" href="https://dev.stockbangladesh.com/news-chart/191"> News Chart </a>
                                                  </li>



                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/company-details/191"> Company Details </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/fundamental-details/191"> Fundamental Details </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/news/search?keyword=&amp;instrument_id=191&amp;from_date=&amp;to_date="> News</a>
                         </li>
                         <li class="divider"> </li>
                         <li>
                             <a href="javascript:;"> Separated link </a>
                         </li>
                     </ul>
                 </div>
                 </td>
                <td> 79 </td>
                <td> 82.5 </td>
                <td> 79 </td>
                <td> 80 </td>
                <td> 80.3 </td>
                <td class="font-red-haze"> -0.3 </td>
                <td class="font-red-haze"> -0.37% </td>
                <td> 209 </td>
                <td> 5.268 </td>
                <td> 65160 </td>
                <td> 17-May, 14:30 </td>
            </tr>
                    <tr>
                                        <td class="highlight"><div class="danger"></div> <a href="javascript:;"><a target="_blank" href="https://dev.stockbangladesh.com/company-details/192">NTC</a></a></td>
                                        <td> <div class="btn-group">
                     <button class="btn green btn-sm dropdown-toggle" type="button" data-toggle="dropdown" aria-expanded="false"> Go To
                         <i class="fa fa-angle-down"></i>
                     </button>
                     <ul class="dropdown-menu" role="menu">
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/ta-chart?instrumentCode=NTC"> TA Chart </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/advance-ta-chart?instrumentCode=NTC"> Advance TA Chart </a>
                         </li>
                                                  <li>
                                                      <a target="_blank" href="https://dev.stockbangladesh.com/minute-chart/192"> Minute Chart </a>
                                                  </li>

                                                  <li>
                                                      <a target="_blank" href="https://dev.stockbangladesh.com/news-chart/192"> News Chart </a>
                                                  </li>



                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/company-details/192"> Company Details </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/fundamental-details/192"> Fundamental Details </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/news/search?keyword=&amp;instrument_id=192&amp;from_date=&amp;to_date="> News</a>
                         </li>
                         <li class="divider"> </li>
                         <li>
                             <a href="javascript:;"> Separated link </a>
                         </li>
                     </ul>
                 </div>
                 </td>
                <td> 607.6 </td>
                <td> 615 </td>
                <td> 605 </td>
                <td> 607.8 </td>
                <td> 614 </td>
                <td class="font-red-haze"> -6.2 </td>
                <td class="font-red-haze"> -1.01% </td>
                <td> 337 </td>
                <td> 19.705 </td>
                <td> 32421 </td>
                <td> 17-May, 14:30 </td>
            </tr>
                    <tr>
                                        <td class="highlight"><div class="danger"></div> <a href="javascript:;"><a target="_blank" href="https://dev.stockbangladesh.com/company-details/193">NTLTUBES</a></a></td>
                                        <td> <div class="btn-group">
                     <button class="btn green btn-sm dropdown-toggle" type="button" data-toggle="dropdown" aria-expanded="false"> Go To
                         <i class="fa fa-angle-down"></i>
                     </button>
                     <ul class="dropdown-menu" role="menu">
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/ta-chart?instrumentCode=NTLTUBES"> TA Chart </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/advance-ta-chart?instrumentCode=NTLTUBES"> Advance TA Chart </a>
                         </li>
                                                  <li>
                                                      <a target="_blank" href="https://dev.stockbangladesh.com/minute-chart/193"> Minute Chart </a>
                                                  </li>

                                                  <li>
                                                      <a target="_blank" href="https://dev.stockbangladesh.com/news-chart/193"> News Chart </a>
                                                  </li>



                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/company-details/193"> Company Details </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/fundamental-details/193"> Fundamental Details </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/news/search?keyword=&amp;instrument_id=193&amp;from_date=&amp;to_date="> News</a>
                         </li>
                         <li class="divider"> </li>
                         <li>
                             <a href="javascript:;"> Separated link </a>
                         </li>
                     </ul>
                 </div>
                 </td>
                <td> 110.9 </td>
                <td> 113.3 </td>
                <td> 109.8 </td>
                <td> 110.1 </td>
                <td> 112.5 </td>
                <td class="font-red-haze"> -2.4 </td>
                <td class="font-red-haze"> -2.13% </td>
                <td> 824 </td>
                <td> 15.914 </td>
                <td> 143218 </td>
                <td> 17-May, 14:30 </td>
            </tr>
                    <tr>
                                        <td class="highlight"><div class="danger"></div> <a href="javascript:;"><a target="_blank" href="https://dev.stockbangladesh.com/company-details/30033">NURANI</a></a></td>
                                        <td> <div class="btn-group">
                     <button class="btn green btn-sm dropdown-toggle" type="button" data-toggle="dropdown" aria-expanded="false"> Go To
                         <i class="fa fa-angle-down"></i>
                     </button>
                     <ul class="dropdown-menu" role="menu">
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/ta-chart?instrumentCode=NURANI"> TA Chart </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/advance-ta-chart?instrumentCode=NURANI"> Advance TA Chart </a>
                         </li>
                                                  <li>
                                                      <a target="_blank" href="https://dev.stockbangladesh.com/minute-chart/30033"> Minute Chart </a>
                                                  </li>

                                                  <li>
                                                      <a target="_blank" href="https://dev.stockbangladesh.com/news-chart/30033"> News Chart </a>
                                                  </li>



                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/company-details/30033"> Company Details </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/fundamental-details/30033"> Fundamental Details </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/news/search?keyword=&amp;instrument_id=30033&amp;from_date=&amp;to_date="> News</a>
                         </li>
                         <li class="divider"> </li>
                         <li>
                             <a href="javascript:;"> Separated link </a>
                         </li>
                     </ul>
                 </div>
                 </td>
                <td> 15.3 </td>
                <td> 15.7 </td>
                <td> 15.2 </td>
                <td> 15.3 </td>
                <td> 15.6 </td>
                <td class="font-red-haze"> -0.3 </td>
                <td class="font-red-haze"> -1.92% </td>
                <td> 338 </td>
                <td> 7.517 </td>
                <td> 487991 </td>
                <td> 17-May, 14:30 </td>
            </tr>
                    <tr>
                                        <td class="highlight"><div class="danger"></div> <a href="javascript:;"><a target="_blank" href="https://dev.stockbangladesh.com/company-details/30013">OAL</a></a></td>
                                        <td> <div class="btn-group">
                     <button class="btn green btn-sm dropdown-toggle" type="button" data-toggle="dropdown" aria-expanded="false"> Go To
                         <i class="fa fa-angle-down"></i>
                     </button>
                     <ul class="dropdown-menu" role="menu">
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/ta-chart?instrumentCode=OAL"> TA Chart </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/advance-ta-chart?instrumentCode=OAL"> Advance TA Chart </a>
                         </li>
                                                  <li>
                                                      <a target="_blank" href="https://dev.stockbangladesh.com/minute-chart/30013"> Minute Chart </a>
                                                  </li>

                                                  <li>
                                                      <a target="_blank" href="https://dev.stockbangladesh.com/news-chart/30013"> News Chart </a>
                                                  </li>



                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/company-details/30013"> Company Details </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/fundamental-details/30013"> Fundamental Details </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/news/search?keyword=&amp;instrument_id=30013&amp;from_date=&amp;to_date="> News</a>
                         </li>
                         <li class="divider"> </li>
                         <li>
                             <a href="javascript:;"> Separated link </a>
                         </li>
                     </ul>
                 </div>
                 </td>
                <td> 15.5 </td>
                <td> 15.8 </td>
                <td> 15.4 </td>
                <td> 15.4 </td>
                <td> 15.7 </td>
                <td class="font-red-haze"> -0.3 </td>
                <td class="font-red-haze"> -1.91% </td>
                <td> 184 </td>
                <td> 3.494 </td>
                <td> 225051 </td>
                <td> 17-May, 14:30 </td>
            </tr>
                    <tr>
                                        <td class="highlight"><div class="danger"></div> <a href="javascript:;"><a target="_blank" href="https://dev.stockbangladesh.com/company-details/30037">OIMEX</a></a></td>
                                        <td> <div class="btn-group">
                     <button class="btn green btn-sm dropdown-toggle" type="button" data-toggle="dropdown" aria-expanded="false"> Go To
                         <i class="fa fa-angle-down"></i>
                     </button>
                     <ul class="dropdown-menu" role="menu">
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/ta-chart?instrumentCode=OIMEX"> TA Chart </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/advance-ta-chart?instrumentCode=OIMEX"> Advance TA Chart </a>
                         </li>
                                                  <li>
                                                      <a target="_blank" href="https://dev.stockbangladesh.com/minute-chart/30037"> Minute Chart </a>
                                                  </li>

                                                  <li>
                                                      <a target="_blank" href="https://dev.stockbangladesh.com/news-chart/30037"> News Chart </a>
                                                  </li>



                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/company-details/30037"> Company Details </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/fundamental-details/30037"> Fundamental Details </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/news/search?keyword=&amp;instrument_id=30037&amp;from_date=&amp;to_date="> News</a>
                         </li>
                         <li class="divider"> </li>
                         <li>
                             <a href="javascript:;"> Separated link </a>
                         </li>
                     </ul>
                 </div>
                 </td>
                <td> 41.2 </td>
                <td> 41.8 </td>
                <td> 40.7 </td>
                <td> 40.9 </td>
                <td> 41.9 </td>
                <td class="font-red-haze"> -1 </td>
                <td class="font-red-haze"> -2.39% </td>
                <td> 477 </td>
                <td> 12.642 </td>
                <td> 307640 </td>
                <td> 17-May, 14:30 </td>
            </tr>
                    <tr>
            
                <td class="highlight"><div class="success"></div> <a href="javascript:;"><a target="_blank" href="https://dev.stockbangladesh.com/company-details/195">OLYMPIC</a></a></td>
                                                    <td> <div class="btn-group">
                     <button class="btn green btn-sm dropdown-toggle" type="button" data-toggle="dropdown" aria-expanded="false"> Go To
                         <i class="fa fa-angle-down"></i>
                     </button>
                     <ul class="dropdown-menu" role="menu">
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/ta-chart?instrumentCode=OLYMPIC"> TA Chart </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/advance-ta-chart?instrumentCode=OLYMPIC"> Advance TA Chart </a>
                         </li>
                                                  <li>
                                                      <a target="_blank" href="https://dev.stockbangladesh.com/minute-chart/195"> Minute Chart </a>
                                                  </li>

                                                  <li>
                                                      <a target="_blank" href="https://dev.stockbangladesh.com/news-chart/195"> News Chart </a>
                                                  </li>



                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/company-details/195"> Company Details </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/fundamental-details/195"> Fundamental Details </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/news/search?keyword=&amp;instrument_id=195&amp;from_date=&amp;to_date="> News</a>
                         </li>
                         <li class="divider"> </li>
                         <li>
                             <a href="javascript:;"> Separated link </a>
                         </li>
                     </ul>
                 </div>
                 </td>
                <td> 252 </td>
                <td> 255.3 </td>
                <td> 250.4 </td>
                <td> 250.8 </td>
                <td> 251.8 </td>
                <td class="font-red-haze"> -1 </td>
                <td class="font-red-haze"> -0.4% </td>
                <td> 148 </td>
                <td> 4.334 </td>
                <td> 17267 </td>
                <td> 17-May, 14:30 </td>
            </tr>
                    <tr>
                                        <td class="highlight"><div class="danger"></div> <a href="javascript:;"><a target="_blank" href="https://dev.stockbangladesh.com/company-details/196">ONEBANKLTD</a></a></td>
                                        <td> <div class="btn-group">
                     <button class="btn green btn-sm dropdown-toggle" type="button" data-toggle="dropdown" aria-expanded="false"> Go To
                         <i class="fa fa-angle-down"></i>
                     </button>
                     <ul class="dropdown-menu" role="menu">
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/ta-chart?instrumentCode=ONEBANKLTD"> TA Chart </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/advance-ta-chart?instrumentCode=ONEBANKLTD"> Advance TA Chart </a>
                         </li>
                                                  <li>
                                                      <a target="_blank" href="https://dev.stockbangladesh.com/minute-chart/196"> Minute Chart </a>
                                                  </li>

                                                  <li>
                                                      <a target="_blank" href="https://dev.stockbangladesh.com/news-chart/196"> News Chart </a>
                                                  </li>



                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/company-details/196"> Company Details </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/fundamental-details/196"> Fundamental Details </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/news/search?keyword=&amp;instrument_id=196&amp;from_date=&amp;to_date="> News</a>
                         </li>
                         <li class="divider"> </li>
                         <li>
                             <a href="javascript:;"> Separated link </a>
                         </li>
                     </ul>
                 </div>
                 </td>
                <td> 16.4 </td>
                <td> 16.9 </td>
                <td> 16.1 </td>
                <td> 16.3 </td>
                <td> 16.8 </td>
                <td class="font-red-haze"> -0.5 </td>
                <td class="font-red-haze"> -2.98% </td>
                <td> 233 </td>
                <td> 6.979 </td>
                <td> 424939 </td>
                <td> 17-May, 14:30 </td>
            </tr>
                    <tr>
                                        <td class="highlight"><div class="danger"></div> <a href="javascript:;"><a target="_blank" href="https://dev.stockbangladesh.com/company-details/197">ORIONINFU</a></a></td>
                                        <td> <div class="btn-group">
                     <button class="btn green btn-sm dropdown-toggle" type="button" data-toggle="dropdown" aria-expanded="false"> Go To
                         <i class="fa fa-angle-down"></i>
                     </button>
                     <ul class="dropdown-menu" role="menu">
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/ta-chart?instrumentCode=ORIONINFU"> TA Chart </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/advance-ta-chart?instrumentCode=ORIONINFU"> Advance TA Chart </a>
                         </li>
                                                  <li>
                                                      <a target="_blank" href="https://dev.stockbangladesh.com/minute-chart/197"> Minute Chart </a>
                                                  </li>

                                                  <li>
                                                      <a target="_blank" href="https://dev.stockbangladesh.com/news-chart/197"> News Chart </a>
                                                  </li>



                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/company-details/197"> Company Details </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/fundamental-details/197"> Fundamental Details </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/news/search?keyword=&amp;instrument_id=197&amp;from_date=&amp;to_date="> News</a>
                         </li>
                         <li class="divider"> </li>
                         <li>
                             <a href="javascript:;"> Separated link </a>
                         </li>
                     </ul>
                 </div>
                 </td>
                <td> 49.8 </td>
                <td> 50.4 </td>
                <td> 49.7 </td>
                <td> 49.8 </td>
                <td> 50.2 </td>
                <td class="font-red-haze"> -0.4 </td>
                <td class="font-red-haze"> -0.8% </td>
                <td> 165 </td>
                <td> 2.015 </td>
                <td> 40270 </td>
                <td> 17-May, 14:30 </td>
            </tr>
                    <tr>
                                        <td class="highlight"><div class="danger"></div> <a href="javascript:;"><a target="_blank" href="https://dev.stockbangladesh.com/company-details/521">ORIONPHARM</a></a></td>
                                        <td> <div class="btn-group">
                     <button class="btn green btn-sm dropdown-toggle" type="button" data-toggle="dropdown" aria-expanded="false"> Go To
                         <i class="fa fa-angle-down"></i>
                     </button>
                     <ul class="dropdown-menu" role="menu">
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/ta-chart?instrumentCode=ORIONPHARM"> TA Chart </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/advance-ta-chart?instrumentCode=ORIONPHARM"> Advance TA Chart </a>
                         </li>
                                                  <li>
                                                      <a target="_blank" href="https://dev.stockbangladesh.com/minute-chart/521"> Minute Chart </a>
                                                  </li>

                                                  <li>
                                                      <a target="_blank" href="https://dev.stockbangladesh.com/news-chart/521"> News Chart </a>
                                                  </li>



                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/company-details/521"> Company Details </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/fundamental-details/521"> Fundamental Details </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/news/search?keyword=&amp;instrument_id=521&amp;from_date=&amp;to_date="> News</a>
                         </li>
                         <li class="divider"> </li>
                         <li>
                             <a href="javascript:;"> Separated link </a>
                         </li>
                     </ul>
                 </div>
                 </td>
                <td> 42.7 </td>
                <td> 43 </td>
                <td> 42.5 </td>
                <td> 42.5 </td>
                <td> 43 </td>
                <td class="font-red-haze"> -0.5 </td>
                <td class="font-red-haze"> -1.16% </td>
                <td> 117 </td>
                <td> 2.318 </td>
                <td> 54262 </td>
                <td> 17-May, 14:30 </td>
            </tr>
                    <tr>
                                        <td class="highlight"><div class="danger"></div> <a href="javascript:;"><a target="_blank" href="https://dev.stockbangladesh.com/company-details/507">PADMALIFE</a></a></td>
                                        <td> <div class="btn-group">
                     <button class="btn green btn-sm dropdown-toggle" type="button" data-toggle="dropdown" aria-expanded="false"> Go To
                         <i class="fa fa-angle-down"></i>
                     </button>
                     <ul class="dropdown-menu" role="menu">
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/ta-chart?instrumentCode=PADMALIFE"> TA Chart </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/advance-ta-chart?instrumentCode=PADMALIFE"> Advance TA Chart </a>
                         </li>
                                                  <li>
                                                      <a target="_blank" href="https://dev.stockbangladesh.com/minute-chart/507"> Minute Chart </a>
                                                  </li>

                                                  <li>
                                                      <a target="_blank" href="https://dev.stockbangladesh.com/news-chart/507"> News Chart </a>
                                                  </li>



                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/company-details/507"> Company Details </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/fundamental-details/507"> Fundamental Details </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/news/search?keyword=&amp;instrument_id=507&amp;from_date=&amp;to_date="> News</a>
                         </li>
                         <li class="divider"> </li>
                         <li>
                             <a href="javascript:;"> Separated link </a>
                         </li>
                     </ul>
                 </div>
                 </td>
                <td> 36.1 </td>
                <td> 37.1 </td>
                <td> 35.4 </td>
                <td> 36.1 </td>
                <td> 37 </td>
                <td class="font-red-haze"> -0.9 </td>
                <td class="font-red-haze"> -2.43% </td>
                <td> 275 </td>
                <td> 7.331 </td>
                <td> 203739 </td>
                <td> 17-May, 14:30 </td>
            </tr>
                    <tr>
            
                <td class="highlight"><div class="success"></div> <a href="javascript:;"><a target="_blank" href="https://dev.stockbangladesh.com/company-details/198">PADMAOIL</a></a></td>
                                                    <td> <div class="btn-group">
                     <button class="btn green btn-sm dropdown-toggle" type="button" data-toggle="dropdown" aria-expanded="false"> Go To
                         <i class="fa fa-angle-down"></i>
                     </button>
                     <ul class="dropdown-menu" role="menu">
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/ta-chart?instrumentCode=PADMAOIL"> TA Chart </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/advance-ta-chart?instrumentCode=PADMAOIL"> Advance TA Chart </a>
                         </li>
                                                  <li>
                                                      <a target="_blank" href="https://dev.stockbangladesh.com/minute-chart/198"> Minute Chart </a>
                                                  </li>

                                                  <li>
                                                      <a target="_blank" href="https://dev.stockbangladesh.com/news-chart/198"> News Chart </a>
                                                  </li>



                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/company-details/198"> Company Details </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/fundamental-details/198"> Fundamental Details </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/news/search?keyword=&amp;instrument_id=198&amp;from_date=&amp;to_date="> News</a>
                         </li>
                         <li class="divider"> </li>
                         <li>
                             <a href="javascript:;"> Separated link </a>
                         </li>
                     </ul>
                 </div>
                 </td>
                <td> 229.9 </td>
                <td> 230 </td>
                <td> 229.3 </td>
                <td> 229.5 </td>
                <td> 229.6 </td>
                <td class="font-red-haze"> -0.1 </td>
                <td class="font-red-haze"> -0.04% </td>
                <td> 89 </td>
                <td> 3.623 </td>
                <td> 15780 </td>
                <td> 17-May, 14:30 </td>
            </tr>
                    <tr>
                                                    <td class="highlight"><div class="info"></div> <a href="javascript:;"><a target="_blank" href="https://dev.stockbangladesh.com/company-details/199">PARAMOUNT</a></a></td>
                            <td> <div class="btn-group">
                     <button class="btn green btn-sm dropdown-toggle" type="button" data-toggle="dropdown" aria-expanded="false"> Go To
                         <i class="fa fa-angle-down"></i>
                     </button>
                     <ul class="dropdown-menu" role="menu">
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/ta-chart?instrumentCode=PARAMOUNT"> TA Chart </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/advance-ta-chart?instrumentCode=PARAMOUNT"> Advance TA Chart </a>
                         </li>
                                                  <li>
                                                      <a target="_blank" href="https://dev.stockbangladesh.com/minute-chart/199"> Minute Chart </a>
                                                  </li>

                                                  <li>
                                                      <a target="_blank" href="https://dev.stockbangladesh.com/news-chart/199"> News Chart </a>
                                                  </li>



                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/company-details/199"> Company Details </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/fundamental-details/199"> Fundamental Details </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/news/search?keyword=&amp;instrument_id=199&amp;from_date=&amp;to_date="> News</a>
                         </li>
                         <li class="divider"> </li>
                         <li>
                             <a href="javascript:;"> Separated link </a>
                         </li>
                     </ul>
                 </div>
                 </td>
                <td> 15 </td>
                <td> 15.1 </td>
                <td> 15 </td>
                <td> 15 </td>
                <td> 15 </td>
                <td class="font-green-jungle"> 0 </td>
                <td class="font-green-jungle"> 0% </td>
                <td> 38 </td>
                <td> 0.668 </td>
                <td> 44500 </td>
                <td> 17-May, 14:30 </td>
            </tr>
                    <tr>
                                        <td class="highlight"><div class="danger"></div> <a href="javascript:;"><a target="_blank" href="https://dev.stockbangladesh.com/company-details/30030">PDL</a></a></td>
                                        <td> <div class="btn-group">
                     <button class="btn green btn-sm dropdown-toggle" type="button" data-toggle="dropdown" aria-expanded="false"> Go To
                         <i class="fa fa-angle-down"></i>
                     </button>
                     <ul class="dropdown-menu" role="menu">
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/ta-chart?instrumentCode=PDL"> TA Chart </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/advance-ta-chart?instrumentCode=PDL"> Advance TA Chart </a>
                         </li>
                                                  <li>
                                                      <a target="_blank" href="https://dev.stockbangladesh.com/minute-chart/30030"> Minute Chart </a>
                                                  </li>

                                                  <li>
                                                      <a target="_blank" href="https://dev.stockbangladesh.com/news-chart/30030"> News Chart </a>
                                                  </li>



                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/company-details/30030"> Company Details </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/fundamental-details/30030"> Fundamental Details </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/news/search?keyword=&amp;instrument_id=30030&amp;from_date=&amp;to_date="> News</a>
                         </li>
                         <li class="divider"> </li>
                         <li>
                             <a href="javascript:;"> Separated link </a>
                         </li>
                     </ul>
                 </div>
                 </td>
                <td> 17 </td>
                <td> 17.4 </td>
                <td> 16.7 </td>
                <td> 16.8 </td>
                <td> 17.2 </td>
                <td class="font-red-haze"> -0.4 </td>
                <td class="font-red-haze"> -2.33% </td>
                <td> 304 </td>
                <td> 7.489 </td>
                <td> 439968 </td>
                <td> 17-May, 14:30 </td>
            </tr>
                    <tr>
                                        <td class="highlight"><div class="danger"></div> <a href="javascript:;"><a target="_blank" href="https://dev.stockbangladesh.com/company-details/536">PENINSULA</a></a></td>
                                        <td> <div class="btn-group">
                     <button class="btn green btn-sm dropdown-toggle" type="button" data-toggle="dropdown" aria-expanded="false"> Go To
                         <i class="fa fa-angle-down"></i>
                     </button>
                     <ul class="dropdown-menu" role="menu">
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/ta-chart?instrumentCode=PENINSULA"> TA Chart </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/advance-ta-chart?instrumentCode=PENINSULA"> Advance TA Chart </a>
                         </li>
                                                  <li>
                                                      <a target="_blank" href="https://dev.stockbangladesh.com/minute-chart/536"> Minute Chart </a>
                                                  </li>

                                                  <li>
                                                      <a target="_blank" href="https://dev.stockbangladesh.com/news-chart/536"> News Chart </a>
                                                  </li>



                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/company-details/536"> Company Details </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/fundamental-details/536"> Fundamental Details </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/news/search?keyword=&amp;instrument_id=536&amp;from_date=&amp;to_date="> News</a>
                         </li>
                         <li class="divider"> </li>
                         <li>
                             <a href="javascript:;"> Separated link </a>
                         </li>
                     </ul>
                 </div>
                 </td>
                <td> 23.7 </td>
                <td> 25 </td>
                <td> 23.7 </td>
                <td> 23.8 </td>
                <td> 24.8 </td>
                <td class="font-red-haze"> -1 </td>
                <td class="font-red-haze"> -4.03% </td>
                <td> 557 </td>
                <td> 28.541 </td>
                <td> 1183980 </td>
                <td> 17-May, 14:30 </td>
            </tr>
                    <tr>
                                        <td class="highlight"><div class="danger"></div> <a href="javascript:;"><a target="_blank" href="https://dev.stockbangladesh.com/company-details/200">PEOPLESINS</a></a></td>
                                        <td> <div class="btn-group">
                     <button class="btn green btn-sm dropdown-toggle" type="button" data-toggle="dropdown" aria-expanded="false"> Go To
                         <i class="fa fa-angle-down"></i>
                     </button>
                     <ul class="dropdown-menu" role="menu">
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/ta-chart?instrumentCode=PEOPLESINS"> TA Chart </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/advance-ta-chart?instrumentCode=PEOPLESINS"> Advance TA Chart </a>
                         </li>
                                                  <li>
                                                      <a target="_blank" href="https://dev.stockbangladesh.com/minute-chart/200"> Minute Chart </a>
                                                  </li>

                                                  <li>
                                                      <a target="_blank" href="https://dev.stockbangladesh.com/news-chart/200"> News Chart </a>
                                                  </li>



                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/company-details/200"> Company Details </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/fundamental-details/200"> Fundamental Details </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/news/search?keyword=&amp;instrument_id=200&amp;from_date=&amp;to_date="> News</a>
                         </li>
                         <li class="divider"> </li>
                         <li>
                             <a href="javascript:;"> Separated link </a>
                         </li>
                     </ul>
                 </div>
                 </td>
                <td> 19 </td>
                <td> 20.8 </td>
                <td> 19 </td>
                <td> 19 </td>
                <td> 20.2 </td>
                <td class="font-red-haze"> -1.2 </td>
                <td class="font-red-haze"> -5.94% </td>
                <td> 94 </td>
                <td> 1.11 </td>
                <td> 58035 </td>
                <td> 17-May, 14:30 </td>
            </tr>
                    <tr>
                                                    <td class="highlight"><div class="info"></div> <a href="javascript:;"><a target="_blank" href="https://dev.stockbangladesh.com/company-details/201">PF1STMF</a></a></td>
                            <td> <div class="btn-group">
                     <button class="btn green btn-sm dropdown-toggle" type="button" data-toggle="dropdown" aria-expanded="false"> Go To
                         <i class="fa fa-angle-down"></i>
                     </button>
                     <ul class="dropdown-menu" role="menu">
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/ta-chart?instrumentCode=PF1STMF"> TA Chart </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/advance-ta-chart?instrumentCode=PF1STMF"> Advance TA Chart </a>
                         </li>
                                                  <li>
                                                      <a target="_blank" href="https://dev.stockbangladesh.com/minute-chart/201"> Minute Chart </a>
                                                  </li>

                                                  <li>
                                                      <a target="_blank" href="https://dev.stockbangladesh.com/news-chart/201"> News Chart </a>
                                                  </li>



                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/company-details/201"> Company Details </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/fundamental-details/201"> Fundamental Details </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/news/search?keyword=&amp;instrument_id=201&amp;from_date=&amp;to_date="> News</a>
                         </li>
                         <li class="divider"> </li>
                         <li>
                             <a href="javascript:;"> Separated link </a>
                         </li>
                     </ul>
                 </div>
                 </td>
                <td> 6.8 </td>
                <td> 6.9 </td>
                <td> 6.8 </td>
                <td> 6.9 </td>
                <td> 6.8 </td>
                <td class="font-green-jungle"> 0.1 </td>
                <td class="font-green-jungle"> 1.47% </td>
                <td> 16 </td>
                <td> 0.246 </td>
                <td> 35783 </td>
                <td> 17-May, 14:30 </td>
            </tr>
                    <tr>
                                        <td class="highlight"><div class="danger"></div> <a href="javascript:;"><a target="_blank" href="https://dev.stockbangladesh.com/company-details/202">PHARMAID</a></a></td>
                                        <td> <div class="btn-group">
                     <button class="btn green btn-sm dropdown-toggle" type="button" data-toggle="dropdown" aria-expanded="false"> Go To
                         <i class="fa fa-angle-down"></i>
                     </button>
                     <ul class="dropdown-menu" role="menu">
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/ta-chart?instrumentCode=PHARMAID"> TA Chart </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/advance-ta-chart?instrumentCode=PHARMAID"> Advance TA Chart </a>
                         </li>
                                                  <li>
                                                      <a target="_blank" href="https://dev.stockbangladesh.com/minute-chart/202"> Minute Chart </a>
                                                  </li>

                                                  <li>
                                                      <a target="_blank" href="https://dev.stockbangladesh.com/news-chart/202"> News Chart </a>
                                                  </li>



                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/company-details/202"> Company Details </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/fundamental-details/202"> Fundamental Details </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/news/search?keyword=&amp;instrument_id=202&amp;from_date=&amp;to_date="> News</a>
                         </li>
                         <li class="divider"> </li>
                         <li>
                             <a href="javascript:;"> Separated link </a>
                         </li>
                     </ul>
                 </div>
                 </td>
                <td> 468.9 </td>
                <td> 474.7 </td>
                <td> 463.1 </td>
                <td> 465.1 </td>
                <td> 469.5 </td>
                <td class="font-red-haze"> -4.4 </td>
                <td class="font-red-haze"> -0.94% </td>
                <td> 558 </td>
                <td> 14.854 </td>
                <td> 31807 </td>
                <td> 17-May, 14:30 </td>
            </tr>
                    <tr>
                                        <td class="highlight"><div class="danger"></div> <a href="javascript:;"><a target="_blank" href="https://dev.stockbangladesh.com/company-details/203">PHENIXINS</a></a></td>
                                        <td> <div class="btn-group">
                     <button class="btn green btn-sm dropdown-toggle" type="button" data-toggle="dropdown" aria-expanded="false"> Go To
                         <i class="fa fa-angle-down"></i>
                     </button>
                     <ul class="dropdown-menu" role="menu">
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/ta-chart?instrumentCode=PHENIXINS"> TA Chart </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/advance-ta-chart?instrumentCode=PHENIXINS"> Advance TA Chart </a>
                         </li>
                                                  <li>
                                                      <a target="_blank" href="https://dev.stockbangladesh.com/minute-chart/203"> Minute Chart </a>
                                                  </li>

                                                  <li>
                                                      <a target="_blank" href="https://dev.stockbangladesh.com/news-chart/203"> News Chart </a>
                                                  </li>



                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/company-details/203"> Company Details </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/fundamental-details/203"> Fundamental Details </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/news/search?keyword=&amp;instrument_id=203&amp;from_date=&amp;to_date="> News</a>
                         </li>
                         <li class="divider"> </li>
                         <li>
                             <a href="javascript:;"> Separated link </a>
                         </li>
                     </ul>
                 </div>
                 </td>
                <td> 25.6 </td>
                <td> 26.2 </td>
                <td> 25.5 </td>
                <td> 25.9 </td>
                <td> 25.7 </td>
                <td class="font-green-jungle"> 0.2 </td>
                <td class="font-green-jungle"> 0.78% </td>
                <td> 22 </td>
                <td> 0.493 </td>
                <td> 19090 </td>
                <td> 17-May, 14:30 </td>
            </tr>
                    <tr>
                                                    <td class="highlight"><div class="info"></div> <a href="javascript:;"><a target="_blank" href="https://dev.stockbangladesh.com/company-details/204">PHOENIXFIN</a></a></td>
                            <td> <div class="btn-group">
                     <button class="btn green btn-sm dropdown-toggle" type="button" data-toggle="dropdown" aria-expanded="false"> Go To
                         <i class="fa fa-angle-down"></i>
                     </button>
                     <ul class="dropdown-menu" role="menu">
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/ta-chart?instrumentCode=PHOENIXFIN"> TA Chart </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/advance-ta-chart?instrumentCode=PHOENIXFIN"> Advance TA Chart </a>
                         </li>
                                                  <li>
                                                      <a target="_blank" href="https://dev.stockbangladesh.com/minute-chart/204"> Minute Chart </a>
                                                  </li>

                                                  <li>
                                                      <a target="_blank" href="https://dev.stockbangladesh.com/news-chart/204"> News Chart </a>
                                                  </li>



                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/company-details/204"> Company Details </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/fundamental-details/204"> Fundamental Details </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/news/search?keyword=&amp;instrument_id=204&amp;from_date=&amp;to_date="> News</a>
                         </li>
                         <li class="divider"> </li>
                         <li>
                             <a href="javascript:;"> Separated link </a>
                         </li>
                     </ul>
                 </div>
                 </td>
                <td> 32.4 </td>
                <td> 32.6 </td>
                <td> 32.1 </td>
                <td> 32.1 </td>
                <td> 32.4 </td>
                <td class="font-red-haze"> -0.3 </td>
                <td class="font-red-haze"> -0.93% </td>
                <td> 112 </td>
                <td> 0.452 </td>
                <td> 14064 </td>
                <td> 17-May, 14:30 </td>
            </tr>
                    <tr>
                                        <td class="highlight"><div class="danger"></div> <a href="javascript:;"><a target="_blank" href="https://dev.stockbangladesh.com/company-details/205">PHPMF1</a></a></td>
                                        <td> <div class="btn-group">
                     <button class="btn green btn-sm dropdown-toggle" type="button" data-toggle="dropdown" aria-expanded="false"> Go To
                         <i class="fa fa-angle-down"></i>
                     </button>
                     <ul class="dropdown-menu" role="menu">
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/ta-chart?instrumentCode=PHPMF1"> TA Chart </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/advance-ta-chart?instrumentCode=PHPMF1"> Advance TA Chart </a>
                         </li>
                                                  <li>
                                                      <a target="_blank" href="https://dev.stockbangladesh.com/minute-chart/205"> Minute Chart </a>
                                                  </li>

                                                  <li>
                                                      <a target="_blank" href="https://dev.stockbangladesh.com/news-chart/205"> News Chart </a>
                                                  </li>



                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/company-details/205"> Company Details </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/fundamental-details/205"> Fundamental Details </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/news/search?keyword=&amp;instrument_id=205&amp;from_date=&amp;to_date="> News</a>
                         </li>
                         <li class="divider"> </li>
                         <li>
                             <a href="javascript:;"> Separated link </a>
                         </li>
                     </ul>
                 </div>
                 </td>
                <td> 6.1 </td>
                <td> 6.2 </td>
                <td> 6.1 </td>
                <td> 6.2 </td>
                <td> 6.2 </td>
                <td class="font-green-jungle"> 0 </td>
                <td class="font-green-jungle"> 0% </td>
                <td> 41 </td>
                <td> 0.666 </td>
                <td> 107552 </td>
                <td> 17-May, 14:30 </td>
            </tr>
                    <tr>
                                        <td class="highlight"><div class="danger"></div> <a href="javascript:;"><a target="_blank" href="https://dev.stockbangladesh.com/company-details/206">PIONEERINS</a></a></td>
                                        <td> <div class="btn-group">
                     <button class="btn green btn-sm dropdown-toggle" type="button" data-toggle="dropdown" aria-expanded="false"> Go To
                         <i class="fa fa-angle-down"></i>
                     </button>
                     <ul class="dropdown-menu" role="menu">
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/ta-chart?instrumentCode=PIONEERINS"> TA Chart </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/advance-ta-chart?instrumentCode=PIONEERINS"> Advance TA Chart </a>
                         </li>
                                                  <li>
                                                      <a target="_blank" href="https://dev.stockbangladesh.com/minute-chart/206"> Minute Chart </a>
                                                  </li>

                                                  <li>
                                                      <a target="_blank" href="https://dev.stockbangladesh.com/news-chart/206"> News Chart </a>
                                                  </li>



                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/company-details/206"> Company Details </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/fundamental-details/206"> Fundamental Details </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/news/search?keyword=&amp;instrument_id=206&amp;from_date=&amp;to_date="> News</a>
                         </li>
                         <li class="divider"> </li>
                         <li>
                             <a href="javascript:;"> Separated link </a>
                         </li>
                     </ul>
                 </div>
                 </td>
                <td> 27.5 </td>
                <td> 28.9 </td>
                <td> 27.5 </td>
                <td> 27.9 </td>
                <td> 28.4 </td>
                <td class="font-red-haze"> -0.5 </td>
                <td class="font-red-haze"> -1.76% </td>
                <td> 96 </td>
                <td> 2.343 </td>
                <td> 82969 </td>
                <td> 17-May, 14:30 </td>
            </tr>
                    <tr>
            
                <td class="highlight"><div class="success"></div> <a href="javascript:;"><a target="_blank" href="https://dev.stockbangladesh.com/company-details/207">PLFSL</a></a></td>
                                                    <td> <div class="btn-group">
                     <button class="btn green btn-sm dropdown-toggle" type="button" data-toggle="dropdown" aria-expanded="false"> Go To
                         <i class="fa fa-angle-down"></i>
                     </button>
                     <ul class="dropdown-menu" role="menu">
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/ta-chart?instrumentCode=PLFSL"> TA Chart </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/advance-ta-chart?instrumentCode=PLFSL"> Advance TA Chart </a>
                         </li>
                                                  <li>
                                                      <a target="_blank" href="https://dev.stockbangladesh.com/minute-chart/207"> Minute Chart </a>
                                                  </li>

                                                  <li>
                                                      <a target="_blank" href="https://dev.stockbangladesh.com/news-chart/207"> News Chart </a>
                                                  </li>



                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/company-details/207"> Company Details </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/fundamental-details/207"> Fundamental Details </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/news/search?keyword=&amp;instrument_id=207&amp;from_date=&amp;to_date="> News</a>
                         </li>
                         <li class="divider"> </li>
                         <li>
                             <a href="javascript:;"> Separated link </a>
                         </li>
                     </ul>
                 </div>
                 </td>
                <td> 10.1 </td>
                <td> 10.2 </td>
                <td> 10 </td>
                <td> 10 </td>
                <td> 10 </td>
                <td class="font-green-jungle"> 0 </td>
                <td class="font-green-jungle"> 0% </td>
                <td> 56 </td>
                <td> 0.726 </td>
                <td> 72261 </td>
                <td> 17-May, 14:30 </td>
            </tr>
                    <tr>
                                                    <td class="highlight"><div class="info"></div> <a href="javascript:;"><a target="_blank" href="https://dev.stockbangladesh.com/company-details/208">POPULAR1MF</a></a></td>
                            <td> <div class="btn-group">
                     <button class="btn green btn-sm dropdown-toggle" type="button" data-toggle="dropdown" aria-expanded="false"> Go To
                         <i class="fa fa-angle-down"></i>
                     </button>
                     <ul class="dropdown-menu" role="menu">
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/ta-chart?instrumentCode=POPULAR1MF"> TA Chart </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/advance-ta-chart?instrumentCode=POPULAR1MF"> Advance TA Chart </a>
                         </li>
                                                  <li>
                                                      <a target="_blank" href="https://dev.stockbangladesh.com/minute-chart/208"> Minute Chart </a>
                                                  </li>

                                                  <li>
                                                      <a target="_blank" href="https://dev.stockbangladesh.com/news-chart/208"> News Chart </a>
                                                  </li>



                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/company-details/208"> Company Details </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/fundamental-details/208"> Fundamental Details </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/news/search?keyword=&amp;instrument_id=208&amp;from_date=&amp;to_date="> News</a>
                         </li>
                         <li class="divider"> </li>
                         <li>
                             <a href="javascript:;"> Separated link </a>
                         </li>
                     </ul>
                 </div>
                 </td>
                <td> 5.9 </td>
                <td> 6 </td>
                <td> 5.9 </td>
                <td> 5.9 </td>
                <td> 5.9 </td>
                <td class="font-green-jungle"> 0 </td>
                <td class="font-green-jungle"> 0% </td>
                <td> 66 </td>
                <td> 2.645 </td>
                <td> 448109 </td>
                <td> 17-May, 14:30 </td>
            </tr>
                    <tr>
                                        <td class="highlight"><div class="danger"></div> <a href="javascript:;"><a target="_blank" href="https://dev.stockbangladesh.com/company-details/209">POPULARLIF</a></a></td>
                                        <td> <div class="btn-group">
                     <button class="btn green btn-sm dropdown-toggle" type="button" data-toggle="dropdown" aria-expanded="false"> Go To
                         <i class="fa fa-angle-down"></i>
                     </button>
                     <ul class="dropdown-menu" role="menu">
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/ta-chart?instrumentCode=POPULARLIF"> TA Chart </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/advance-ta-chart?instrumentCode=POPULARLIF"> Advance TA Chart </a>
                         </li>
                                                  <li>
                                                      <a target="_blank" href="https://dev.stockbangladesh.com/minute-chart/209"> Minute Chart </a>
                                                  </li>

                                                  <li>
                                                      <a target="_blank" href="https://dev.stockbangladesh.com/news-chart/209"> News Chart </a>
                                                  </li>



                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/company-details/209"> Company Details </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/fundamental-details/209"> Fundamental Details </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/news/search?keyword=&amp;instrument_id=209&amp;from_date=&amp;to_date="> News</a>
                         </li>
                         <li class="divider"> </li>
                         <li>
                             <a href="javascript:;"> Separated link </a>
                         </li>
                     </ul>
                 </div>
                 </td>
                <td> 92 </td>
                <td> 95 </td>
                <td> 91.2 </td>
                <td> 91.7 </td>
                <td> 94.1 </td>
                <td class="font-red-haze"> -2.4 </td>
                <td class="font-red-haze"> -2.55% </td>
                <td> 155 </td>
                <td> 2.509 </td>
                <td> 27223 </td>
                <td> 17-May, 14:30 </td>
            </tr>
                    <tr>
                                        <td class="highlight"><div class="danger"></div> <a href="javascript:;"><a target="_blank" href="https://dev.stockbangladesh.com/company-details/210">POWERGRID</a></a></td>
                                        <td> <div class="btn-group">
                     <button class="btn green btn-sm dropdown-toggle" type="button" data-toggle="dropdown" aria-expanded="false"> Go To
                         <i class="fa fa-angle-down"></i>
                     </button>
                     <ul class="dropdown-menu" role="menu">
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/ta-chart?instrumentCode=POWERGRID"> TA Chart </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/advance-ta-chart?instrumentCode=POWERGRID"> Advance TA Chart </a>
                         </li>
                                                  <li>
                                                      <a target="_blank" href="https://dev.stockbangladesh.com/minute-chart/210"> Minute Chart </a>
                                                  </li>

                                                  <li>
                                                      <a target="_blank" href="https://dev.stockbangladesh.com/news-chart/210"> News Chart </a>
                                                  </li>



                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/company-details/210"> Company Details </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/fundamental-details/210"> Fundamental Details </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/news/search?keyword=&amp;instrument_id=210&amp;from_date=&amp;to_date="> News</a>
                         </li>
                         <li class="divider"> </li>
                         <li>
                             <a href="javascript:;"> Separated link </a>
                         </li>
                     </ul>
                 </div>
                 </td>
                <td> 46.6 </td>
                <td> 47 </td>
                <td> 46.5 </td>
                <td> 46.7 </td>
                <td> 46.8 </td>
                <td class="font-red-haze"> -0.1 </td>
                <td class="font-red-haze"> -0.21% </td>
                <td> 66 </td>
                <td> 1.348 </td>
                <td> 28847 </td>
                <td> 17-May, 14:30 </td>
            </tr>
                    <tr>
                                        <td class="highlight"><div class="danger"></div> <a href="javascript:;"><a target="_blank" href="https://dev.stockbangladesh.com/company-details/179">PRAGATIINS</a></a></td>
                                        <td> <div class="btn-group">
                     <button class="btn green btn-sm dropdown-toggle" type="button" data-toggle="dropdown" aria-expanded="false"> Go To
                         <i class="fa fa-angle-down"></i>
                     </button>
                     <ul class="dropdown-menu" role="menu">
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/ta-chart?instrumentCode=PRAGATIINS"> TA Chart </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/advance-ta-chart?instrumentCode=PRAGATIINS"> Advance TA Chart </a>
                         </li>
                                                  <li>
                                                      <a target="_blank" href="https://dev.stockbangladesh.com/minute-chart/179"> Minute Chart </a>
                                                  </li>

                                                  <li>
                                                      <a target="_blank" href="https://dev.stockbangladesh.com/news-chart/179"> News Chart </a>
                                                  </li>



                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/company-details/179"> Company Details </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/fundamental-details/179"> Fundamental Details </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/news/search?keyword=&amp;instrument_id=179&amp;from_date=&amp;to_date="> News</a>
                         </li>
                         <li class="divider"> </li>
                         <li>
                             <a href="javascript:;"> Separated link </a>
                         </li>
                     </ul>
                 </div>
                 </td>
                <td> 25.1 </td>
                <td> 25.5 </td>
                <td> 24.8 </td>
                <td> 24.9 </td>
                <td> 25.3 </td>
                <td class="font-red-haze"> -0.4 </td>
                <td class="font-red-haze"> -1.58% </td>
                <td> 40 </td>
                <td> 0.653 </td>
                <td> 25948 </td>
                <td> 17-May, 14:30 </td>
            </tr>
                    <tr>
                                        <td class="highlight"><div class="danger"></div> <a href="javascript:;"><a target="_blank" href="https://dev.stockbangladesh.com/company-details/180">PRAGATILIF</a></a></td>
                                        <td> <div class="btn-group">
                     <button class="btn green btn-sm dropdown-toggle" type="button" data-toggle="dropdown" aria-expanded="false"> Go To
                         <i class="fa fa-angle-down"></i>
                     </button>
                     <ul class="dropdown-menu" role="menu">
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/ta-chart?instrumentCode=PRAGATILIF"> TA Chart </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/advance-ta-chart?instrumentCode=PRAGATILIF"> Advance TA Chart </a>
                         </li>
                                                  <li>
                                                      <a target="_blank" href="https://dev.stockbangladesh.com/minute-chart/180"> Minute Chart </a>
                                                  </li>

                                                  <li>
                                                      <a target="_blank" href="https://dev.stockbangladesh.com/news-chart/180"> News Chart </a>
                                                  </li>



                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/company-details/180"> Company Details </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/fundamental-details/180"> Fundamental Details </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/news/search?keyword=&amp;instrument_id=180&amp;from_date=&amp;to_date="> News</a>
                         </li>
                         <li class="divider"> </li>
                         <li>
                             <a href="javascript:;"> Separated link </a>
                         </li>
                     </ul>
                 </div>
                 </td>
                <td> 96.2 </td>
                <td> 101.7 </td>
                <td> 96 </td>
                <td> 96.5 </td>
                <td> 100.3 </td>
                <td class="font-red-haze"> -3.8 </td>
                <td class="font-red-haze"> -3.79% </td>
                <td> 114 </td>
                <td> 2.091 </td>
                <td> 21555 </td>
                <td> 17-May, 14:30 </td>
            </tr>
                    <tr>
                                        <td class="highlight"><div class="danger"></div> <a href="javascript:;"><a target="_blank" href="https://dev.stockbangladesh.com/company-details/181">PREMIERBAN</a></a></td>
                                        <td> <div class="btn-group">
                     <button class="btn green btn-sm dropdown-toggle" type="button" data-toggle="dropdown" aria-expanded="false"> Go To
                         <i class="fa fa-angle-down"></i>
                     </button>
                     <ul class="dropdown-menu" role="menu">
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/ta-chart?instrumentCode=PREMIERBAN"> TA Chart </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/advance-ta-chart?instrumentCode=PREMIERBAN"> Advance TA Chart </a>
                         </li>
                                                  <li>
                                                      <a target="_blank" href="https://dev.stockbangladesh.com/minute-chart/181"> Minute Chart </a>
                                                  </li>

                                                  <li>
                                                      <a target="_blank" href="https://dev.stockbangladesh.com/news-chart/181"> News Chart </a>
                                                  </li>



                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/company-details/181"> Company Details </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/fundamental-details/181"> Fundamental Details </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/news/search?keyword=&amp;instrument_id=181&amp;from_date=&amp;to_date="> News</a>
                         </li>
                         <li class="divider"> </li>
                         <li>
                             <a href="javascript:;"> Separated link </a>
                         </li>
                     </ul>
                 </div>
                 </td>
                <td> 11.4 </td>
                <td> 11.7 </td>
                <td> 11 </td>
                <td> 11.3 </td>
                <td> 11.6 </td>
                <td class="font-red-haze"> -0.3 </td>
                <td class="font-red-haze"> -2.59% </td>
                <td> 311 </td>
                <td> 11.191 </td>
                <td> 990956 </td>
                <td> 17-May, 14:30 </td>
            </tr>
                    <tr>
            
                <td class="highlight"><div class="success"></div> <a href="javascript:;"><a target="_blank" href="https://dev.stockbangladesh.com/company-details/518">PREMIERCEM</a></a></td>
                                                    <td> <div class="btn-group">
                     <button class="btn green btn-sm dropdown-toggle" type="button" data-toggle="dropdown" aria-expanded="false"> Go To
                         <i class="fa fa-angle-down"></i>
                     </button>
                     <ul class="dropdown-menu" role="menu">
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/ta-chart?instrumentCode=PREMIERCEM"> TA Chart </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/advance-ta-chart?instrumentCode=PREMIERCEM"> Advance TA Chart </a>
                         </li>
                                                  <li>
                                                      <a target="_blank" href="https://dev.stockbangladesh.com/minute-chart/518"> Minute Chart </a>
                                                  </li>

                                                  <li>
                                                      <a target="_blank" href="https://dev.stockbangladesh.com/news-chart/518"> News Chart </a>
                                                  </li>



                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/company-details/518"> Company Details </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/fundamental-details/518"> Fundamental Details </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/news/search?keyword=&amp;instrument_id=518&amp;from_date=&amp;to_date="> News</a>
                         </li>
                         <li class="divider"> </li>
                         <li>
                             <a href="javascript:;"> Separated link </a>
                         </li>
                     </ul>
                 </div>
                 </td>
                <td> 80.5 </td>
                <td> 80.5 </td>
                <td> 80.2 </td>
                <td> 80.3 </td>
                <td> 78.1 </td>
                <td class="font-green-jungle"> 2.2 </td>
                <td class="font-green-jungle"> 2.82% </td>
                <td> 4 </td>
                <td> 0.021 </td>
                <td> 260 </td>
                <td> 17-May, 14:30 </td>
            </tr>
                    <tr>
                                        <td class="highlight"><div class="danger"></div> <a href="javascript:;"><a target="_blank" href="https://dev.stockbangladesh.com/company-details/182">PREMIERLEA</a></a></td>
                                        <td> <div class="btn-group">
                     <button class="btn green btn-sm dropdown-toggle" type="button" data-toggle="dropdown" aria-expanded="false"> Go To
                         <i class="fa fa-angle-down"></i>
                     </button>
                     <ul class="dropdown-menu" role="menu">
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/ta-chart?instrumentCode=PREMIERLEA"> TA Chart </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/advance-ta-chart?instrumentCode=PREMIERLEA"> Advance TA Chart </a>
                         </li>
                                                  <li>
                                                      <a target="_blank" href="https://dev.stockbangladesh.com/minute-chart/182"> Minute Chart </a>
                                                  </li>

                                                  <li>
                                                      <a target="_blank" href="https://dev.stockbangladesh.com/news-chart/182"> News Chart </a>
                                                  </li>



                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/company-details/182"> Company Details </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/fundamental-details/182"> Fundamental Details </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/news/search?keyword=&amp;instrument_id=182&amp;from_date=&amp;to_date="> News</a>
                         </li>
                         <li class="divider"> </li>
                         <li>
                             <a href="javascript:;"> Separated link </a>
                         </li>
                     </ul>
                 </div>
                 </td>
                <td> 11.2 </td>
                <td> 11.7 </td>
                <td> 11 </td>
                <td> 11.2 </td>
                <td> 11.7 </td>
                <td class="font-red-haze"> -0.5 </td>
                <td class="font-red-haze"> -4.27% </td>
                <td> 67 </td>
                <td> 1.555 </td>
                <td> 138255 </td>
                <td> 17-May, 14:30 </td>
            </tr>
                    <tr>
                                                    <td class="highlight"><div class="info"></div> <a href="javascript:;"><a target="_blank" href="https://dev.stockbangladesh.com/company-details/183">PRIME1ICBA</a></a></td>
                            <td> <div class="btn-group">
                     <button class="btn green btn-sm dropdown-toggle" type="button" data-toggle="dropdown" aria-expanded="false"> Go To
                         <i class="fa fa-angle-down"></i>
                     </button>
                     <ul class="dropdown-menu" role="menu">
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/ta-chart?instrumentCode=PRIME1ICBA"> TA Chart </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/advance-ta-chart?instrumentCode=PRIME1ICBA"> Advance TA Chart </a>
                         </li>
                                                  <li>
                                                      <a target="_blank" href="https://dev.stockbangladesh.com/minute-chart/183"> Minute Chart </a>
                                                  </li>

                                                  <li>
                                                      <a target="_blank" href="https://dev.stockbangladesh.com/news-chart/183"> News Chart </a>
                                                  </li>



                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/company-details/183"> Company Details </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/fundamental-details/183"> Fundamental Details </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/news/search?keyword=&amp;instrument_id=183&amp;from_date=&amp;to_date="> News</a>
                         </li>
                         <li class="divider"> </li>
                         <li>
                             <a href="javascript:;"> Separated link </a>
                         </li>
                     </ul>
                 </div>
                 </td>
                <td> 6.9 </td>
                <td> 6.9 </td>
                <td> 6.8 </td>
                <td> 6.9 </td>
                <td> 6.9 </td>
                <td class="font-green-jungle"> 0 </td>
                <td class="font-green-jungle"> 0% </td>
                <td> 11 </td>
                <td> 0.034 </td>
                <td> 4988 </td>
                <td> 17-May, 14:30 </td>
            </tr>
                    <tr>
                                        <td class="highlight"><div class="danger"></div> <a href="javascript:;"><a target="_blank" href="https://dev.stockbangladesh.com/company-details/184">PRIMEBANK</a></a></td>
                                        <td> <div class="btn-group">
                     <button class="btn green btn-sm dropdown-toggle" type="button" data-toggle="dropdown" aria-expanded="false"> Go To
                         <i class="fa fa-angle-down"></i>
                     </button>
                     <ul class="dropdown-menu" role="menu">
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/ta-chart?instrumentCode=PRIMEBANK"> TA Chart </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/advance-ta-chart?instrumentCode=PRIMEBANK"> Advance TA Chart </a>
                         </li>
                                                  <li>
                                                      <a target="_blank" href="https://dev.stockbangladesh.com/minute-chart/184"> Minute Chart </a>
                                                  </li>

                                                  <li>
                                                      <a target="_blank" href="https://dev.stockbangladesh.com/news-chart/184"> News Chart </a>
                                                  </li>



                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/company-details/184"> Company Details </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/fundamental-details/184"> Fundamental Details </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/news/search?keyword=&amp;instrument_id=184&amp;from_date=&amp;to_date="> News</a>
                         </li>
                         <li class="divider"> </li>
                         <li>
                             <a href="javascript:;"> Separated link </a>
                         </li>
                     </ul>
                 </div>
                 </td>
                <td> 17.8 </td>
                <td> 18.1 </td>
                <td> 17.8 </td>
                <td> 17.8 </td>
                <td> 17.9 </td>
                <td class="font-red-haze"> -0.1 </td>
                <td class="font-red-haze"> -0.56% </td>
                <td> 39 </td>
                <td> 1.813 </td>
                <td> 101829 </td>
                <td> 17-May, 14:30 </td>
            </tr>
                    <tr>
                                        <td class="highlight"><div class="danger"></div> <a href="javascript:;"><a target="_blank" href="https://dev.stockbangladesh.com/company-details/185">PRIMEFIN</a></a></td>
                                        <td> <div class="btn-group">
                     <button class="btn green btn-sm dropdown-toggle" type="button" data-toggle="dropdown" aria-expanded="false"> Go To
                         <i class="fa fa-angle-down"></i>
                     </button>
                     <ul class="dropdown-menu" role="menu">
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/ta-chart?instrumentCode=PRIMEFIN"> TA Chart </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/advance-ta-chart?instrumentCode=PRIMEFIN"> Advance TA Chart </a>
                         </li>
                                                  <li>
                                                      <a target="_blank" href="https://dev.stockbangladesh.com/minute-chart/185"> Minute Chart </a>
                                                  </li>

                                                  <li>
                                                      <a target="_blank" href="https://dev.stockbangladesh.com/news-chart/185"> News Chart </a>
                                                  </li>



                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/company-details/185"> Company Details </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/fundamental-details/185"> Fundamental Details </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/news/search?keyword=&amp;instrument_id=185&amp;from_date=&amp;to_date="> News</a>
                         </li>
                         <li class="divider"> </li>
                         <li>
                             <a href="javascript:;"> Separated link </a>
                         </li>
                     </ul>
                 </div>
                 </td>
                <td> 9.1 </td>
                <td> 9.3 </td>
                <td> 9.1 </td>
                <td> 9.2 </td>
                <td> 9.2 </td>
                <td class="font-green-jungle"> 0 </td>
                <td class="font-green-jungle"> 0% </td>
                <td> 69 </td>
                <td> 1.22 </td>
                <td> 133658 </td>
                <td> 17-May, 14:30 </td>
            </tr>
                    <tr>
                                        <td class="highlight"><div class="danger"></div> <a href="javascript:;"><a target="_blank" href="https://dev.stockbangladesh.com/company-details/186">PRIMEINSUR</a></a></td>
                                        <td> <div class="btn-group">
                     <button class="btn green btn-sm dropdown-toggle" type="button" data-toggle="dropdown" aria-expanded="false"> Go To
                         <i class="fa fa-angle-down"></i>
                     </button>
                     <ul class="dropdown-menu" role="menu">
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/ta-chart?instrumentCode=PRIMEINSUR"> TA Chart </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/advance-ta-chart?instrumentCode=PRIMEINSUR"> Advance TA Chart </a>
                         </li>
                                                  <li>
                                                      <a target="_blank" href="https://dev.stockbangladesh.com/minute-chart/186"> Minute Chart </a>
                                                  </li>

                                                  <li>
                                                      <a target="_blank" href="https://dev.stockbangladesh.com/news-chart/186"> News Chart </a>
                                                  </li>



                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/company-details/186"> Company Details </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/fundamental-details/186"> Fundamental Details </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/news/search?keyword=&amp;instrument_id=186&amp;from_date=&amp;to_date="> News</a>
                         </li>
                         <li class="divider"> </li>
                         <li>
                             <a href="javascript:;"> Separated link </a>
                         </li>
                     </ul>
                 </div>
                 </td>
                <td> 16.5 </td>
                <td> 17 </td>
                <td> 16.5 </td>
                <td> 16.5 </td>
                <td> 17 </td>
                <td class="font-red-haze"> -0.5 </td>
                <td class="font-red-haze"> -2.94% </td>
                <td> 33 </td>
                <td> 0.47 </td>
                <td> 28289 </td>
                <td> 17-May, 14:30 </td>
            </tr>
                    <tr>
                                        <td class="highlight"><div class="danger"></div> <a href="javascript:;"><a target="_blank" href="https://dev.stockbangladesh.com/company-details/187">PRIMELIFE</a></a></td>
                                        <td> <div class="btn-group">
                     <button class="btn green btn-sm dropdown-toggle" type="button" data-toggle="dropdown" aria-expanded="false"> Go To
                         <i class="fa fa-angle-down"></i>
                     </button>
                     <ul class="dropdown-menu" role="menu">
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/ta-chart?instrumentCode=PRIMELIFE"> TA Chart </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/advance-ta-chart?instrumentCode=PRIMELIFE"> Advance TA Chart </a>
                         </li>
                                                  <li>
                                                      <a target="_blank" href="https://dev.stockbangladesh.com/minute-chart/187"> Minute Chart </a>
                                                  </li>

                                                  <li>
                                                      <a target="_blank" href="https://dev.stockbangladesh.com/news-chart/187"> News Chart </a>
                                                  </li>



                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/company-details/187"> Company Details </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/fundamental-details/187"> Fundamental Details </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/news/search?keyword=&amp;instrument_id=187&amp;from_date=&amp;to_date="> News</a>
                         </li>
                         <li class="divider"> </li>
                         <li>
                             <a href="javascript:;"> Separated link </a>
                         </li>
                     </ul>
                 </div>
                 </td>
                <td> 47.1 </td>
                <td> 50.1 </td>
                <td> 46.5 </td>
                <td> 47.1 </td>
                <td> 50.3 </td>
                <td class="font-red-haze"> -3.2 </td>
                <td class="font-red-haze"> -6.36% </td>
                <td> 113 </td>
                <td> 5.526 </td>
                <td> 113855 </td>
                <td> 17-May, 14:30 </td>
            </tr>
                    <tr>
                                        <td class="highlight"><div class="danger"></div> <a href="javascript:;"><a target="_blank" href="https://dev.stockbangladesh.com/company-details/188">PRIMETEX</a></a></td>
                                        <td> <div class="btn-group">
                     <button class="btn green btn-sm dropdown-toggle" type="button" data-toggle="dropdown" aria-expanded="false"> Go To
                         <i class="fa fa-angle-down"></i>
                     </button>
                     <ul class="dropdown-menu" role="menu">
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/ta-chart?instrumentCode=PRIMETEX"> TA Chart </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/advance-ta-chart?instrumentCode=PRIMETEX"> Advance TA Chart </a>
                         </li>
                                                  <li>
                                                      <a target="_blank" href="https://dev.stockbangladesh.com/minute-chart/188"> Minute Chart </a>
                                                  </li>

                                                  <li>
                                                      <a target="_blank" href="https://dev.stockbangladesh.com/news-chart/188"> News Chart </a>
                                                  </li>



                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/company-details/188"> Company Details </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/fundamental-details/188"> Fundamental Details </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/news/search?keyword=&amp;instrument_id=188&amp;from_date=&amp;to_date="> News</a>
                         </li>
                         <li class="divider"> </li>
                         <li>
                             <a href="javascript:;"> Separated link </a>
                         </li>
                     </ul>
                 </div>
                 </td>
                <td> 24.9 </td>
                <td> 26.2 </td>
                <td> 24.5 </td>
                <td> 24.6 </td>
                <td> 25.6 </td>
                <td class="font-red-haze"> -1 </td>
                <td class="font-red-haze"> -3.91% </td>
                <td> 339 </td>
                <td> 7.088 </td>
                <td> 283524 </td>
                <td> 17-May, 14:30 </td>
            </tr>
                    <tr>
                                        <td class="highlight"><div class="danger"></div> <a href="javascript:;"><a target="_blank" href="https://dev.stockbangladesh.com/company-details/189">PROGRESLIF</a></a></td>
                                        <td> <div class="btn-group">
                     <button class="btn green btn-sm dropdown-toggle" type="button" data-toggle="dropdown" aria-expanded="false"> Go To
                         <i class="fa fa-angle-down"></i>
                     </button>
                     <ul class="dropdown-menu" role="menu">
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/ta-chart?instrumentCode=PROGRESLIF"> TA Chart </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/advance-ta-chart?instrumentCode=PROGRESLIF"> Advance TA Chart </a>
                         </li>
                                                  <li>
                                                      <a target="_blank" href="https://dev.stockbangladesh.com/minute-chart/189"> Minute Chart </a>
                                                  </li>

                                                  <li>
                                                      <a target="_blank" href="https://dev.stockbangladesh.com/news-chart/189"> News Chart </a>
                                                  </li>



                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/company-details/189"> Company Details </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/fundamental-details/189"> Fundamental Details </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/news/search?keyword=&amp;instrument_id=189&amp;from_date=&amp;to_date="> News</a>
                         </li>
                         <li class="divider"> </li>
                         <li>
                             <a href="javascript:;"> Separated link </a>
                         </li>
                     </ul>
                 </div>
                 </td>
                <td> 54.2 </td>
                <td> 55.5 </td>
                <td> 51 </td>
                <td> 52.8 </td>
                <td> 56.3 </td>
                <td class="font-red-haze"> -3.5 </td>
                <td class="font-red-haze"> -6.22% </td>
                <td> 22 </td>
                <td> 0.135 </td>
                <td> 2541 </td>
                <td> 17-May, 14:30 </td>
            </tr>
                    <tr>
                                                    <td class="highlight"><div class="info"></div> <a href="javascript:;"><a target="_blank" href="https://dev.stockbangladesh.com/company-details/211">PROVATIINS</a></a></td>
                            <td> <div class="btn-group">
                     <button class="btn green btn-sm dropdown-toggle" type="button" data-toggle="dropdown" aria-expanded="false"> Go To
                         <i class="fa fa-angle-down"></i>
                     </button>
                     <ul class="dropdown-menu" role="menu">
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/ta-chart?instrumentCode=PROVATIINS"> TA Chart </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/advance-ta-chart?instrumentCode=PROVATIINS"> Advance TA Chart </a>
                         </li>
                                                  <li>
                                                      <a target="_blank" href="https://dev.stockbangladesh.com/minute-chart/211"> Minute Chart </a>
                                                  </li>

                                                  <li>
                                                      <a target="_blank" href="https://dev.stockbangladesh.com/news-chart/211"> News Chart </a>
                                                  </li>



                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/company-details/211"> Company Details </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/fundamental-details/211"> Fundamental Details </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/news/search?keyword=&amp;instrument_id=211&amp;from_date=&amp;to_date="> News</a>
                         </li>
                         <li class="divider"> </li>
                         <li>
                             <a href="javascript:;"> Separated link </a>
                         </li>
                     </ul>
                 </div>
                 </td>
                <td> 16.6 </td>
                <td> 16.7 </td>
                <td> 16.3 </td>
                <td> 16.3 </td>
                <td> 16.6 </td>
                <td class="font-red-haze"> -0.3 </td>
                <td class="font-red-haze"> -1.81% </td>
                <td> 58 </td>
                <td> 1.869 </td>
                <td> 113845 </td>
                <td> 17-May, 14:30 </td>
            </tr>
                    <tr>
            
                <td class="highlight"><div class="success"></div> <a href="javascript:;"><a target="_blank" href="https://dev.stockbangladesh.com/company-details/2">PTL</a></a></td>
                                                    <td> <div class="btn-group">
                     <button class="btn green btn-sm dropdown-toggle" type="button" data-toggle="dropdown" aria-expanded="false"> Go To
                         <i class="fa fa-angle-down"></i>
                     </button>
                     <ul class="dropdown-menu" role="menu">
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/ta-chart?instrumentCode=PTL"> TA Chart </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/advance-ta-chart?instrumentCode=PTL"> Advance TA Chart </a>
                         </li>
                                                  <li>
                                                      <a target="_blank" href="https://dev.stockbangladesh.com/minute-chart/2"> Minute Chart </a>
                                                  </li>

                                                  <li>
                                                      <a target="_blank" href="https://dev.stockbangladesh.com/news-chart/2"> News Chart </a>
                                                  </li>



                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/company-details/2"> Company Details </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/fundamental-details/2"> Fundamental Details </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/news/search?keyword=&amp;instrument_id=2&amp;from_date=&amp;to_date="> News</a>
                         </li>
                         <li class="divider"> </li>
                         <li>
                             <a href="javascript:;"> Separated link </a>
                         </li>
                     </ul>
                 </div>
                 </td>
                <td> 43.2 </td>
                <td> 43.4 </td>
                <td> 42.2 </td>
                <td> 42.8 </td>
                <td> 42.6 </td>
                <td class="font-green-jungle"> 0.2 </td>
                <td class="font-green-jungle"> 0.47% </td>
                <td> 333 </td>
                <td> 16.915 </td>
                <td> 396340 </td>
                <td> 17-May, 14:30 </td>
            </tr>
                    <tr>
            
                <td class="highlight"><div class="success"></div> <a href="javascript:;"><a target="_blank" href="https://dev.stockbangladesh.com/company-details/212">PUBALIBANK</a></a></td>
                                                    <td> <div class="btn-group">
                     <button class="btn green btn-sm dropdown-toggle" type="button" data-toggle="dropdown" aria-expanded="false"> Go To
                         <i class="fa fa-angle-down"></i>
                     </button>
                     <ul class="dropdown-menu" role="menu">
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/ta-chart?instrumentCode=PUBALIBANK"> TA Chart </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/advance-ta-chart?instrumentCode=PUBALIBANK"> Advance TA Chart </a>
                         </li>
                                                  <li>
                                                      <a target="_blank" href="https://dev.stockbangladesh.com/minute-chart/212"> Minute Chart </a>
                                                  </li>

                                                  <li>
                                                      <a target="_blank" href="https://dev.stockbangladesh.com/news-chart/212"> News Chart </a>
                                                  </li>



                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/company-details/212"> Company Details </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/fundamental-details/212"> Fundamental Details </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/news/search?keyword=&amp;instrument_id=212&amp;from_date=&amp;to_date="> News</a>
                         </li>
                         <li class="divider"> </li>
                         <li>
                             <a href="javascript:;"> Separated link </a>
                         </li>
                     </ul>
                 </div>
                 </td>
                <td> 22.3 </td>
                <td> 22.3 </td>
                <td> 21.9 </td>
                <td> 22.1 </td>
                <td> 22.1 </td>
                <td class="font-green-jungle"> 0 </td>
                <td class="font-green-jungle"> 0% </td>
                <td> 122 </td>
                <td> 3.41 </td>
                <td> 154665 </td>
                <td> 17-May, 14:30 </td>
            </tr>
                    <tr>
                                        <td class="highlight"><div class="danger"></div> <a href="javascript:;"><a target="_blank" href="https://dev.stockbangladesh.com/company-details/213">PURABIGEN</a></a></td>
                                        <td> <div class="btn-group">
                     <button class="btn green btn-sm dropdown-toggle" type="button" data-toggle="dropdown" aria-expanded="false"> Go To
                         <i class="fa fa-angle-down"></i>
                     </button>
                     <ul class="dropdown-menu" role="menu">
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/ta-chart?instrumentCode=PURABIGEN"> TA Chart </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/advance-ta-chart?instrumentCode=PURABIGEN"> Advance TA Chart </a>
                         </li>
                                                  <li>
                                                      <a target="_blank" href="https://dev.stockbangladesh.com/minute-chart/213"> Minute Chart </a>
                                                  </li>

                                                  <li>
                                                      <a target="_blank" href="https://dev.stockbangladesh.com/news-chart/213"> News Chart </a>
                                                  </li>



                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/company-details/213"> Company Details </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/fundamental-details/213"> Fundamental Details </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/news/search?keyword=&amp;instrument_id=213&amp;from_date=&amp;to_date="> News</a>
                         </li>
                         <li class="divider"> </li>
                         <li>
                             <a href="javascript:;"> Separated link </a>
                         </li>
                     </ul>
                 </div>
                 </td>
                <td> 14 </td>
                <td> 14.3 </td>
                <td> 13.9 </td>
                <td> 14 </td>
                <td> 14.1 </td>
                <td class="font-red-haze"> -0.1 </td>
                <td class="font-red-haze"> -0.71% </td>
                <td> 44 </td>
                <td> 0.397 </td>
                <td> 28355 </td>
                <td> 17-May, 14:30 </td>
            </tr>
                    <tr>
                                        <td class="highlight"><div class="danger"></div> <a href="javascript:;"><a target="_blank" href="https://dev.stockbangladesh.com/company-details/214">QUASEMIND</a></a></td>
                                        <td> <div class="btn-group">
                     <button class="btn green btn-sm dropdown-toggle" type="button" data-toggle="dropdown" aria-expanded="false"> Go To
                         <i class="fa fa-angle-down"></i>
                     </button>
                     <ul class="dropdown-menu" role="menu">
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/ta-chart?instrumentCode=QUASEMIND"> TA Chart </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/advance-ta-chart?instrumentCode=QUASEMIND"> Advance TA Chart </a>
                         </li>
                                                  <li>
                                                      <a target="_blank" href="https://dev.stockbangladesh.com/minute-chart/214"> Minute Chart </a>
                                                  </li>

                                                  <li>
                                                      <a target="_blank" href="https://dev.stockbangladesh.com/news-chart/214"> News Chart </a>
                                                  </li>



                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/company-details/214"> Company Details </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/fundamental-details/214"> Fundamental Details </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/news/search?keyword=&amp;instrument_id=214&amp;from_date=&amp;to_date="> News</a>
                         </li>
                         <li class="divider"> </li>
                         <li>
                             <a href="javascript:;"> Separated link </a>
                         </li>
                     </ul>
                 </div>
                 </td>
                <td> 63 </td>
                <td> 65 </td>
                <td> 62.9 </td>
                <td> 63.1 </td>
                <td> 64.8 </td>
                <td class="font-red-haze"> -1.7 </td>
                <td class="font-red-haze"> -2.62% </td>
                <td> 332 </td>
                <td> 6.497 </td>
                <td> 101865 </td>
                <td> 17-May, 14:30 </td>
            </tr>
                    <tr>
            
                <td class="highlight"><div class="success"></div> <a href="javascript:;"><a target="_blank" href="https://dev.stockbangladesh.com/company-details/30191">QUEENSOUTH</a></a></td>
                                                    <td> <div class="btn-group">
                     <button class="btn green btn-sm dropdown-toggle" type="button" data-toggle="dropdown" aria-expanded="false"> Go To
                         <i class="fa fa-angle-down"></i>
                     </button>
                     <ul class="dropdown-menu" role="menu">
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/ta-chart?instrumentCode=QUEENSOUTH"> TA Chart </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/advance-ta-chart?instrumentCode=QUEENSOUTH"> Advance TA Chart </a>
                         </li>
                                                  <li>
                                                      <a target="_blank" href="https://dev.stockbangladesh.com/minute-chart/30191"> Minute Chart </a>
                                                  </li>

                                                  <li>
                                                      <a target="_blank" href="https://dev.stockbangladesh.com/news-chart/30191"> News Chart </a>
                                                  </li>



                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/company-details/30191"> Company Details </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/fundamental-details/30191"> Fundamental Details </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/news/search?keyword=&amp;instrument_id=30191&amp;from_date=&amp;to_date="> News</a>
                         </li>
                         <li class="divider"> </li>
                         <li>
                             <a href="javascript:;"> Separated link </a>
                         </li>
                     </ul>
                 </div>
                 </td>
                <td> 50.4 </td>
                <td> 50.4 </td>
                <td> 46.1 </td>
                <td> 50.4 </td>
                <td> 45.9 </td>
                <td class="font-green-jungle"> 4.5 </td>
                <td class="font-green-jungle"> 9.8% </td>
                <td> 1572 </td>
                <td> 84.259 </td>
                <td> 1731246 </td>
                <td> 17-May, 14:30 </td>
            </tr>
                    <tr>
            
                <td class="highlight"><div class="success"></div> <a href="javascript:;"><a target="_blank" href="https://dev.stockbangladesh.com/company-details/215">RAHIMAFOOD</a></a></td>
                                                    <td> <div class="btn-group">
                     <button class="btn green btn-sm dropdown-toggle" type="button" data-toggle="dropdown" aria-expanded="false"> Go To
                         <i class="fa fa-angle-down"></i>
                     </button>
                     <ul class="dropdown-menu" role="menu">
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/ta-chart?instrumentCode=RAHIMAFOOD"> TA Chart </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/advance-ta-chart?instrumentCode=RAHIMAFOOD"> Advance TA Chart </a>
                         </li>
                                                  <li>
                                                      <a target="_blank" href="https://dev.stockbangladesh.com/minute-chart/215"> Minute Chart </a>
                                                  </li>

                                                  <li>
                                                      <a target="_blank" href="https://dev.stockbangladesh.com/news-chart/215"> News Chart </a>
                                                  </li>



                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/company-details/215"> Company Details </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/fundamental-details/215"> Fundamental Details </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/news/search?keyword=&amp;instrument_id=215&amp;from_date=&amp;to_date="> News</a>
                         </li>
                         <li class="divider"> </li>
                         <li>
                             <a href="javascript:;"> Separated link </a>
                         </li>
                     </ul>
                 </div>
                 </td>
                <td> 150.1 </td>
                <td> 155 </td>
                <td> 149.4 </td>
                <td> 150.1 </td>
                <td> 149.1 </td>
                <td class="font-green-jungle"> 1 </td>
                <td class="font-green-jungle"> 0.67% </td>
                <td> 224 </td>
                <td> 2.169 </td>
                <td> 14419 </td>
                <td> 17-May, 14:30 </td>
            </tr>
                    <tr>
                                        <td class="highlight"><div class="danger"></div> <a href="javascript:;"><a target="_blank" href="https://dev.stockbangladesh.com/company-details/216">RAHIMTEXT</a></a></td>
                                        <td> <div class="btn-group">
                     <button class="btn green btn-sm dropdown-toggle" type="button" data-toggle="dropdown" aria-expanded="false"> Go To
                         <i class="fa fa-angle-down"></i>
                     </button>
                     <ul class="dropdown-menu" role="menu">
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/ta-chart?instrumentCode=RAHIMTEXT"> TA Chart </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/advance-ta-chart?instrumentCode=RAHIMTEXT"> Advance TA Chart </a>
                         </li>
                                                  <li>
                                                      <a target="_blank" href="https://dev.stockbangladesh.com/minute-chart/216"> Minute Chart </a>
                                                  </li>

                                                  <li>
                                                      <a target="_blank" href="https://dev.stockbangladesh.com/news-chart/216"> News Chart </a>
                                                  </li>



                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/company-details/216"> Company Details </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/fundamental-details/216"> Fundamental Details </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/news/search?keyword=&amp;instrument_id=216&amp;from_date=&amp;to_date="> News</a>
                         </li>
                         <li class="divider"> </li>
                         <li>
                             <a href="javascript:;"> Separated link </a>
                         </li>
                     </ul>
                 </div>
                 </td>
                <td> 309.3 </td>
                <td> 311.7 </td>
                <td> 308.3 </td>
                <td> 309.3 </td>
                <td> 311.1 </td>
                <td class="font-red-haze"> -1.8 </td>
                <td class="font-red-haze"> -0.58% </td>
                <td> 759 </td>
                <td> 19.565 </td>
                <td> 63259 </td>
                <td> 17-May, 14:30 </td>
            </tr>
                    <tr>
                                        <td class="highlight"><div class="danger"></div> <a href="javascript:;"><a target="_blank" href="https://dev.stockbangladesh.com/company-details/217">RAKCERAMIC</a></a></td>
                                        <td> <div class="btn-group">
                     <button class="btn green btn-sm dropdown-toggle" type="button" data-toggle="dropdown" aria-expanded="false"> Go To
                         <i class="fa fa-angle-down"></i>
                     </button>
                     <ul class="dropdown-menu" role="menu">
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/ta-chart?instrumentCode=RAKCERAMIC"> TA Chart </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/advance-ta-chart?instrumentCode=RAKCERAMIC"> Advance TA Chart </a>
                         </li>
                                                  <li>
                                                      <a target="_blank" href="https://dev.stockbangladesh.com/minute-chart/217"> Minute Chart </a>
                                                  </li>

                                                  <li>
                                                      <a target="_blank" href="https://dev.stockbangladesh.com/news-chart/217"> News Chart </a>
                                                  </li>



                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/company-details/217"> Company Details </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/fundamental-details/217"> Fundamental Details </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/news/search?keyword=&amp;instrument_id=217&amp;from_date=&amp;to_date="> News</a>
                         </li>
                         <li class="divider"> </li>
                         <li>
                             <a href="javascript:;"> Separated link </a>
                         </li>
                     </ul>
                 </div>
                 </td>
                <td> 43.4 </td>
                <td> 44 </td>
                <td> 42.8 </td>
                <td> 43 </td>
                <td> 43.7 </td>
                <td class="font-red-haze"> -0.7 </td>
                <td class="font-red-haze"> -1.6% </td>
                <td> 381 </td>
                <td> 8.977 </td>
                <td> 207447 </td>
                <td> 17-May, 14:30 </td>
            </tr>
                    <tr>
                                        <td class="highlight"><div class="danger"></div> <a href="javascript:;"><a target="_blank" href="https://dev.stockbangladesh.com/company-details/218">RANFOUNDRY</a></a></td>
                                        <td> <div class="btn-group">
                     <button class="btn green btn-sm dropdown-toggle" type="button" data-toggle="dropdown" aria-expanded="false"> Go To
                         <i class="fa fa-angle-down"></i>
                     </button>
                     <ul class="dropdown-menu" role="menu">
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/ta-chart?instrumentCode=RANFOUNDRY"> TA Chart </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/advance-ta-chart?instrumentCode=RANFOUNDRY"> Advance TA Chart </a>
                         </li>
                                                  <li>
                                                      <a target="_blank" href="https://dev.stockbangladesh.com/minute-chart/218"> Minute Chart </a>
                                                  </li>

                                                  <li>
                                                      <a target="_blank" href="https://dev.stockbangladesh.com/news-chart/218"> News Chart </a>
                                                  </li>



                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/company-details/218"> Company Details </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/fundamental-details/218"> Fundamental Details </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/news/search?keyword=&amp;instrument_id=218&amp;from_date=&amp;to_date="> News</a>
                         </li>
                         <li class="divider"> </li>
                         <li>
                             <a href="javascript:;"> Separated link </a>
                         </li>
                     </ul>
                 </div>
                 </td>
                <td> 132.6 </td>
                <td> 133 </td>
                <td> 132 </td>
                <td> 132.4 </td>
                <td> 132.8 </td>
                <td class="font-red-haze"> -0.4 </td>
                <td class="font-red-haze"> -0.3% </td>
                <td> 111 </td>
                <td> 2.043 </td>
                <td> 15435 </td>
                <td> 17-May, 14:30 </td>
            </tr>
                    <tr>
            
                <td class="highlight"><div class="success"></div> <a href="javascript:;"><a target="_blank" href="https://dev.stockbangladesh.com/company-details/140">RDFOOD</a></a></td>
                                                    <td> <div class="btn-group">
                     <button class="btn green btn-sm dropdown-toggle" type="button" data-toggle="dropdown" aria-expanded="false"> Go To
                         <i class="fa fa-angle-down"></i>
                     </button>
                     <ul class="dropdown-menu" role="menu">
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/ta-chart?instrumentCode=RDFOOD"> TA Chart </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/advance-ta-chart?instrumentCode=RDFOOD"> Advance TA Chart </a>
                         </li>
                                                  <li>
                                                      <a target="_blank" href="https://dev.stockbangladesh.com/minute-chart/140"> Minute Chart </a>
                                                  </li>

                                                  <li>
                                                      <a target="_blank" href="https://dev.stockbangladesh.com/news-chart/140"> News Chart </a>
                                                  </li>



                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/company-details/140"> Company Details </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/fundamental-details/140"> Fundamental Details </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/news/search?keyword=&amp;instrument_id=140&amp;from_date=&amp;to_date="> News</a>
                         </li>
                         <li class="divider"> </li>
                         <li>
                             <a href="javascript:;"> Separated link </a>
                         </li>
                     </ul>
                 </div>
                 </td>
                <td> 18.4 </td>
                <td> 18.5 </td>
                <td> 17.9 </td>
                <td> 18.1 </td>
                <td> 18.1 </td>
                <td class="font-green-jungle"> 0 </td>
                <td class="font-green-jungle"> 0% </td>
                <td> 591 </td>
                <td> 25.119 </td>
                <td> 1385110 </td>
                <td> 17-May, 14:30 </td>
            </tr>
                    <tr>
                                        <td class="highlight"><div class="danger"></div> <a href="javascript:;"><a target="_blank" href="https://dev.stockbangladesh.com/company-details/219">RECKITTBEN</a></a></td>
                                        <td> <div class="btn-group">
                     <button class="btn green btn-sm dropdown-toggle" type="button" data-toggle="dropdown" aria-expanded="false"> Go To
                         <i class="fa fa-angle-down"></i>
                     </button>
                     <ul class="dropdown-menu" role="menu">
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/ta-chart?instrumentCode=RECKITTBEN"> TA Chart </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/advance-ta-chart?instrumentCode=RECKITTBEN"> Advance TA Chart </a>
                         </li>
                                                  <li>
                                                      <a target="_blank" href="https://dev.stockbangladesh.com/minute-chart/219"> Minute Chart </a>
                                                  </li>

                                                  <li>
                                                      <a target="_blank" href="https://dev.stockbangladesh.com/news-chart/219"> News Chart </a>
                                                  </li>



                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/company-details/219"> Company Details </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/fundamental-details/219"> Fundamental Details </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/news/search?keyword=&amp;instrument_id=219&amp;from_date=&amp;to_date="> News</a>
                         </li>
                         <li class="divider"> </li>
                         <li>
                             <a href="javascript:;"> Separated link </a>
                         </li>
                     </ul>
                 </div>
                 </td>
                <td> 1770.7 </td>
                <td> 1790 </td>
                <td> 1770.3 </td>
                <td> 1773.3 </td>
                <td> 1787.6 </td>
                <td class="font-red-haze"> -14.3 </td>
                <td class="font-red-haze"> -0.8% </td>
                <td> 86 </td>
                <td> 1.182 </td>
                <td> 666 </td>
                <td> 17-May, 14:30 </td>
            </tr>
                    <tr>
                                        <td class="highlight"><div class="danger"></div> <a href="javascript:;"><a target="_blank" href="https://dev.stockbangladesh.com/company-details/30017">REGENTTEX</a></a></td>
                                        <td> <div class="btn-group">
                     <button class="btn green btn-sm dropdown-toggle" type="button" data-toggle="dropdown" aria-expanded="false"> Go To
                         <i class="fa fa-angle-down"></i>
                     </button>
                     <ul class="dropdown-menu" role="menu">
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/ta-chart?instrumentCode=REGENTTEX"> TA Chart </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/advance-ta-chart?instrumentCode=REGENTTEX"> Advance TA Chart </a>
                         </li>
                                                  <li>
                                                      <a target="_blank" href="https://dev.stockbangladesh.com/minute-chart/30017"> Minute Chart </a>
                                                  </li>

                                                  <li>
                                                      <a target="_blank" href="https://dev.stockbangladesh.com/news-chart/30017"> News Chart </a>
                                                  </li>



                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/company-details/30017"> Company Details </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/fundamental-details/30017"> Fundamental Details </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/news/search?keyword=&amp;instrument_id=30017&amp;from_date=&amp;to_date="> News</a>
                         </li>
                         <li class="divider"> </li>
                         <li>
                             <a href="javascript:;"> Separated link </a>
                         </li>
                     </ul>
                 </div>
                 </td>
                <td> 17.5 </td>
                <td> 17.8 </td>
                <td> 17.2 </td>
                <td> 17.3 </td>
                <td> 17.8 </td>
                <td class="font-red-haze"> -0.5 </td>
                <td class="font-red-haze"> -2.81% </td>
                <td> 272 </td>
                <td> 6.194 </td>
                <td> 354200 </td>
                <td> 17-May, 14:30 </td>
            </tr>
                    <tr>
            
                <td class="highlight"><div class="success"></div> <a href="javascript:;"><a target="_blank" href="https://dev.stockbangladesh.com/company-details/473">RELIANCE1</a></a></td>
                                                    <td> <div class="btn-group">
                     <button class="btn green btn-sm dropdown-toggle" type="button" data-toggle="dropdown" aria-expanded="false"> Go To
                         <i class="fa fa-angle-down"></i>
                     </button>
                     <ul class="dropdown-menu" role="menu">
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/ta-chart?instrumentCode=RELIANCE1"> TA Chart </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/advance-ta-chart?instrumentCode=RELIANCE1"> Advance TA Chart </a>
                         </li>
                                                  <li>
                                                      <a target="_blank" href="https://dev.stockbangladesh.com/minute-chart/473"> Minute Chart </a>
                                                  </li>

                                                  <li>
                                                      <a target="_blank" href="https://dev.stockbangladesh.com/news-chart/473"> News Chart </a>
                                                  </li>



                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/company-details/473"> Company Details </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/fundamental-details/473"> Fundamental Details </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/news/search?keyword=&amp;instrument_id=473&amp;from_date=&amp;to_date="> News</a>
                         </li>
                         <li class="divider"> </li>
                         <li>
                             <a href="javascript:;"> Separated link </a>
                         </li>
                     </ul>
                 </div>
                 </td>
                <td> 10.4 </td>
                <td> 10.4 </td>
                <td> 10.3 </td>
                <td> 10.4 </td>
                <td> 10.3 </td>
                <td class="font-green-jungle"> 0.1 </td>
                <td class="font-green-jungle"> 0.97% </td>
                <td> 4 </td>
                <td> 0.363 </td>
                <td> 34885 </td>
                <td> 17-May, 14:30 </td>
            </tr>
                    <tr>
                                        <td class="highlight"><div class="danger"></div> <a href="javascript:;"><a target="_blank" href="https://dev.stockbangladesh.com/company-details/220">RELIANCINS</a></a></td>
                                        <td> <div class="btn-group">
                     <button class="btn green btn-sm dropdown-toggle" type="button" data-toggle="dropdown" aria-expanded="false"> Go To
                         <i class="fa fa-angle-down"></i>
                     </button>
                     <ul class="dropdown-menu" role="menu">
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/ta-chart?instrumentCode=RELIANCINS"> TA Chart </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/advance-ta-chart?instrumentCode=RELIANCINS"> Advance TA Chart </a>
                         </li>
                                                  <li>
                                                      <a target="_blank" href="https://dev.stockbangladesh.com/minute-chart/220"> Minute Chart </a>
                                                  </li>

                                                  <li>
                                                      <a target="_blank" href="https://dev.stockbangladesh.com/news-chart/220"> News Chart </a>
                                                  </li>



                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/company-details/220"> Company Details </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/fundamental-details/220"> Fundamental Details </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/news/search?keyword=&amp;instrument_id=220&amp;from_date=&amp;to_date="> News</a>
                         </li>
                         <li class="divider"> </li>
                         <li>
                             <a href="javascript:;"> Separated link </a>
                         </li>
                     </ul>
                 </div>
                 </td>
                <td> 48.7 </td>
                <td> 50.1 </td>
                <td> 48.7 </td>
                <td> 49.1 </td>
                <td> 49.1 </td>
                <td class="font-green-jungle"> 0 </td>
                <td class="font-green-jungle"> 0% </td>
                <td> 93 </td>
                <td> 1.803 </td>
                <td> 36678 </td>
                <td> 17-May, 14:30 </td>
            </tr>
                    <tr>
            
                <td class="highlight"><div class="success"></div> <a href="javascript:;"><a target="_blank" href="https://dev.stockbangladesh.com/company-details/221">RENATA</a></a></td>
                                                    <td> <div class="btn-group">
                     <button class="btn green btn-sm dropdown-toggle" type="button" data-toggle="dropdown" aria-expanded="false"> Go To
                         <i class="fa fa-angle-down"></i>
                     </button>
                     <ul class="dropdown-menu" role="menu">
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/ta-chart?instrumentCode=RENATA"> TA Chart </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/advance-ta-chart?instrumentCode=RENATA"> Advance TA Chart </a>
                         </li>
                                                  <li>
                                                      <a target="_blank" href="https://dev.stockbangladesh.com/minute-chart/221"> Minute Chart </a>
                                                  </li>

                                                  <li>
                                                      <a target="_blank" href="https://dev.stockbangladesh.com/news-chart/221"> News Chart </a>
                                                  </li>



                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/company-details/221"> Company Details </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/fundamental-details/221"> Fundamental Details </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/news/search?keyword=&amp;instrument_id=221&amp;from_date=&amp;to_date="> News</a>
                         </li>
                         <li class="divider"> </li>
                         <li>
                             <a href="javascript:;"> Separated link </a>
                         </li>
                     </ul>
                 </div>
                 </td>
                <td> 1249 </td>
                <td> 1250 </td>
                <td> 1238 </td>
                <td> 1246.1 </td>
                <td> 1237.6 </td>
                <td class="font-green-jungle"> 8.5 </td>
                <td class="font-green-jungle"> 0.69% </td>
                <td> 120 </td>
                <td> 2.94 </td>
                <td> 2362 </td>
                <td> 17-May, 14:30 </td>
            </tr>
                    <tr>
                                        <td class="highlight"><div class="danger"></div> <a href="javascript:;"><a target="_blank" href="https://dev.stockbangladesh.com/company-details/222">RENWICKJA</a></a></td>
                                        <td> <div class="btn-group">
                     <button class="btn green btn-sm dropdown-toggle" type="button" data-toggle="dropdown" aria-expanded="false"> Go To
                         <i class="fa fa-angle-down"></i>
                     </button>
                     <ul class="dropdown-menu" role="menu">
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/ta-chart?instrumentCode=RENWICKJA"> TA Chart </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/advance-ta-chart?instrumentCode=RENWICKJA"> Advance TA Chart </a>
                         </li>
                                                  <li>
                                                      <a target="_blank" href="https://dev.stockbangladesh.com/minute-chart/222"> Minute Chart </a>
                                                  </li>

                                                  <li>
                                                      <a target="_blank" href="https://dev.stockbangladesh.com/news-chart/222"> News Chart </a>
                                                  </li>



                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/company-details/222"> Company Details </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/fundamental-details/222"> Fundamental Details </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/news/search?keyword=&amp;instrument_id=222&amp;from_date=&amp;to_date="> News</a>
                         </li>
                         <li class="divider"> </li>
                         <li>
                             <a href="javascript:;"> Separated link </a>
                         </li>
                     </ul>
                 </div>
                 </td>
                <td> 610 </td>
                <td> 632.2 </td>
                <td> 598 </td>
                <td> 603.9 </td>
                <td> 623.8 </td>
                <td class="font-red-haze"> -19.9 </td>
                <td class="font-red-haze"> -3.19% </td>
                <td> 337 </td>
                <td> 2.733 </td>
                <td> 4503 </td>
                <td> 17-May, 14:30 </td>
            </tr>
                    <tr>
            
                <td class="highlight"><div class="success"></div> <a href="javascript:;"><a target="_blank" href="https://dev.stockbangladesh.com/company-details/223">REPUBLIC</a></a></td>
                                                    <td> <div class="btn-group">
                     <button class="btn green btn-sm dropdown-toggle" type="button" data-toggle="dropdown" aria-expanded="false"> Go To
                         <i class="fa fa-angle-down"></i>
                     </button>
                     <ul class="dropdown-menu" role="menu">
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/ta-chart?instrumentCode=REPUBLIC"> TA Chart </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/advance-ta-chart?instrumentCode=REPUBLIC"> Advance TA Chart </a>
                         </li>
                                                  <li>
                                                      <a target="_blank" href="https://dev.stockbangladesh.com/minute-chart/223"> Minute Chart </a>
                                                  </li>

                                                  <li>
                                                      <a target="_blank" href="https://dev.stockbangladesh.com/news-chart/223"> News Chart </a>
                                                  </li>



                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/company-details/223"> Company Details </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/fundamental-details/223"> Fundamental Details </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/news/search?keyword=&amp;instrument_id=223&amp;from_date=&amp;to_date="> News</a>
                         </li>
                         <li class="divider"> </li>
                         <li>
                             <a href="javascript:;"> Separated link </a>
                         </li>
                     </ul>
                 </div>
                 </td>
                <td> 25.8 </td>
                <td> 25.8 </td>
                <td> 22.7 </td>
                <td> 24.5 </td>
                <td> 24.1 </td>
                <td class="font-green-jungle"> 0.4 </td>
                <td class="font-green-jungle"> 1.66% </td>
                <td> 15 </td>
                <td> 0.176 </td>
                <td> 7183 </td>
                <td> 17-May, 14:30 </td>
            </tr>
                    <tr>
                                        <td class="highlight"><div class="danger"></div> <a href="javascript:;"><a target="_blank" href="https://dev.stockbangladesh.com/company-details/224">RNSPIN</a></a></td>
                                        <td> <div class="btn-group">
                     <button class="btn green btn-sm dropdown-toggle" type="button" data-toggle="dropdown" aria-expanded="false"> Go To
                         <i class="fa fa-angle-down"></i>
                     </button>
                     <ul class="dropdown-menu" role="menu">
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/ta-chart?instrumentCode=RNSPIN"> TA Chart </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/advance-ta-chart?instrumentCode=RNSPIN"> Advance TA Chart </a>
                         </li>
                                                  <li>
                                                      <a target="_blank" href="https://dev.stockbangladesh.com/minute-chart/224"> Minute Chart </a>
                                                  </li>

                                                  <li>
                                                      <a target="_blank" href="https://dev.stockbangladesh.com/news-chart/224"> News Chart </a>
                                                  </li>



                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/company-details/224"> Company Details </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/fundamental-details/224"> Fundamental Details </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/news/search?keyword=&amp;instrument_id=224&amp;from_date=&amp;to_date="> News</a>
                         </li>
                         <li class="divider"> </li>
                         <li>
                             <a href="javascript:;"> Separated link </a>
                         </li>
                     </ul>
                 </div>
                 </td>
                <td> 12.4 </td>
                <td> 12.6 </td>
                <td> 12.2 </td>
                <td> 12.3 </td>
                <td> 12.6 </td>
                <td class="font-red-haze"> -0.3 </td>
                <td class="font-red-haze"> -2.38% </td>
                <td> 277 </td>
                <td> 5.322 </td>
                <td> 429668 </td>
                <td> 17-May, 14:30 </td>
            </tr>
                    <tr>
            
                <td class="highlight"><div class="success"></div> <a href="javascript:;"><a target="_blank" href="https://dev.stockbangladesh.com/company-details/543">RSRMSTEEL</a></a></td>
                                                    <td> <div class="btn-group">
                     <button class="btn green btn-sm dropdown-toggle" type="button" data-toggle="dropdown" aria-expanded="false"> Go To
                         <i class="fa fa-angle-down"></i>
                     </button>
                     <ul class="dropdown-menu" role="menu">
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/ta-chart?instrumentCode=RSRMSTEEL"> TA Chart </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/advance-ta-chart?instrumentCode=RSRMSTEEL"> Advance TA Chart </a>
                         </li>
                                                  <li>
                                                      <a target="_blank" href="https://dev.stockbangladesh.com/minute-chart/543"> Minute Chart </a>
                                                  </li>

                                                  <li>
                                                      <a target="_blank" href="https://dev.stockbangladesh.com/news-chart/543"> News Chart </a>
                                                  </li>



                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/company-details/543"> Company Details </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/fundamental-details/543"> Fundamental Details </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/news/search?keyword=&amp;instrument_id=543&amp;from_date=&amp;to_date="> News</a>
                         </li>
                         <li class="divider"> </li>
                         <li>
                             <a href="javascript:;"> Separated link </a>
                         </li>
                     </ul>
                 </div>
                 </td>
                <td> 53.7 </td>
                <td> 54.2 </td>
                <td> 52.6 </td>
                <td> 53 </td>
                <td> 52.7 </td>
                <td class="font-green-jungle"> 0.3 </td>
                <td class="font-green-jungle"> 0.57% </td>
                <td> 535 </td>
                <td> 17.442 </td>
                <td> 326129 </td>
                <td> 17-May, 14:30 </td>
            </tr>
                    <tr>
                                        <td class="highlight"><div class="danger"></div> <a href="javascript:;"><a target="_blank" href="https://dev.stockbangladesh.com/company-details/225">RUPALIBANK</a></a></td>
                                        <td> <div class="btn-group">
                     <button class="btn green btn-sm dropdown-toggle" type="button" data-toggle="dropdown" aria-expanded="false"> Go To
                         <i class="fa fa-angle-down"></i>
                     </button>
                     <ul class="dropdown-menu" role="menu">
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/ta-chart?instrumentCode=RUPALIBANK"> TA Chart </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/advance-ta-chart?instrumentCode=RUPALIBANK"> Advance TA Chart </a>
                         </li>
                                                  <li>
                                                      <a target="_blank" href="https://dev.stockbangladesh.com/minute-chart/225"> Minute Chart </a>
                                                  </li>

                                                  <li>
                                                      <a target="_blank" href="https://dev.stockbangladesh.com/news-chart/225"> News Chart </a>
                                                  </li>



                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/company-details/225"> Company Details </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/fundamental-details/225"> Fundamental Details </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/news/search?keyword=&amp;instrument_id=225&amp;from_date=&amp;to_date="> News</a>
                         </li>
                         <li class="divider"> </li>
                         <li>
                             <a href="javascript:;"> Separated link </a>
                         </li>
                     </ul>
                 </div>
                 </td>
                <td> 47.4 </td>
                <td> 48.9 </td>
                <td> 46.5 </td>
                <td> 47 </td>
                <td> 48.3 </td>
                <td class="font-red-haze"> -1.3 </td>
                <td class="font-red-haze"> -2.69% </td>
                <td> 345 </td>
                <td> 7.123 </td>
                <td> 149822 </td>
                <td> 17-May, 14:30 </td>
            </tr>
                    <tr>
            
                <td class="highlight"><div class="success"></div> <a href="javascript:;"><a target="_blank" href="https://dev.stockbangladesh.com/company-details/226">RUPALIINS</a></a></td>
                                                    <td> <div class="btn-group">
                     <button class="btn green btn-sm dropdown-toggle" type="button" data-toggle="dropdown" aria-expanded="false"> Go To
                         <i class="fa fa-angle-down"></i>
                     </button>
                     <ul class="dropdown-menu" role="menu">
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/ta-chart?instrumentCode=RUPALIINS"> TA Chart </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/advance-ta-chart?instrumentCode=RUPALIINS"> Advance TA Chart </a>
                         </li>
                                                  <li>
                                                      <a target="_blank" href="https://dev.stockbangladesh.com/minute-chart/226"> Minute Chart </a>
                                                  </li>

                                                  <li>
                                                      <a target="_blank" href="https://dev.stockbangladesh.com/news-chart/226"> News Chart </a>
                                                  </li>



                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/company-details/226"> Company Details </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/fundamental-details/226"> Fundamental Details </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/news/search?keyword=&amp;instrument_id=226&amp;from_date=&amp;to_date="> News</a>
                         </li>
                         <li class="divider"> </li>
                         <li>
                             <a href="javascript:;"> Separated link </a>
                         </li>
                     </ul>
                 </div>
                 </td>
                <td> 17.3 </td>
                <td> 17.4 </td>
                <td> 16.9 </td>
                <td> 17.3 </td>
                <td> 17.2 </td>
                <td class="font-green-jungle"> 0.1 </td>
                <td class="font-green-jungle"> 0.58% </td>
                <td> 47 </td>
                <td> 0.459 </td>
                <td> 26500 </td>
                <td> 17-May, 14:30 </td>
            </tr>
                    <tr>
                                        <td class="highlight"><div class="danger"></div> <a href="javascript:;"><a target="_blank" href="https://dev.stockbangladesh.com/company-details/227">RUPALILIFE</a></a></td>
                                        <td> <div class="btn-group">
                     <button class="btn green btn-sm dropdown-toggle" type="button" data-toggle="dropdown" aria-expanded="false"> Go To
                         <i class="fa fa-angle-down"></i>
                     </button>
                     <ul class="dropdown-menu" role="menu">
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/ta-chart?instrumentCode=RUPALILIFE"> TA Chart </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/advance-ta-chart?instrumentCode=RUPALILIFE"> Advance TA Chart </a>
                         </li>
                                                  <li>
                                                      <a target="_blank" href="https://dev.stockbangladesh.com/minute-chart/227"> Minute Chart </a>
                                                  </li>

                                                  <li>
                                                      <a target="_blank" href="https://dev.stockbangladesh.com/news-chart/227"> News Chart </a>
                                                  </li>



                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/company-details/227"> Company Details </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/fundamental-details/227"> Fundamental Details </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/news/search?keyword=&amp;instrument_id=227&amp;from_date=&amp;to_date="> News</a>
                         </li>
                         <li class="divider"> </li>
                         <li>
                             <a href="javascript:;"> Separated link </a>
                         </li>
                     </ul>
                 </div>
                 </td>
                <td> 62 </td>
                <td> 63.8 </td>
                <td> 61.5 </td>
                <td> 62.2 </td>
                <td> 62.3 </td>
                <td class="font-red-haze"> -0.1 </td>
                <td class="font-red-haze"> -0.16% </td>
                <td> 529 </td>
                <td> 27.65 </td>
                <td> 441412 </td>
                <td> 17-May, 14:30 </td>
            </tr>
                    <tr>
            
                <td class="highlight"><div class="success"></div> <a href="javascript:;"><a target="_blank" href="https://dev.stockbangladesh.com/company-details/242">SAFKOSPINN</a></a></td>
                                                    <td> <div class="btn-group">
                     <button class="btn green btn-sm dropdown-toggle" type="button" data-toggle="dropdown" aria-expanded="false"> Go To
                         <i class="fa fa-angle-down"></i>
                     </button>
                     <ul class="dropdown-menu" role="menu">
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/ta-chart?instrumentCode=SAFKOSPINN"> TA Chart </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/advance-ta-chart?instrumentCode=SAFKOSPINN"> Advance TA Chart </a>
                         </li>
                                                  <li>
                                                      <a target="_blank" href="https://dev.stockbangladesh.com/minute-chart/242"> Minute Chart </a>
                                                  </li>

                                                  <li>
                                                      <a target="_blank" href="https://dev.stockbangladesh.com/news-chart/242"> News Chart </a>
                                                  </li>



                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/company-details/242"> Company Details </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/fundamental-details/242"> Fundamental Details </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/news/search?keyword=&amp;instrument_id=242&amp;from_date=&amp;to_date="> News</a>
                         </li>
                         <li class="divider"> </li>
                         <li>
                             <a href="javascript:;"> Separated link </a>
                         </li>
                     </ul>
                 </div>
                 </td>
                <td> 16.9 </td>
                <td> 16.9 </td>
                <td> 16.4 </td>
                <td> 16.4 </td>
                <td> 16.6 </td>
                <td class="font-red-haze"> -0.2 </td>
                <td class="font-red-haze"> -1.2% </td>
                <td> 190 </td>
                <td> 4.339 </td>
                <td> 263929 </td>
                <td> 17-May, 14:30 </td>
            </tr>
                    <tr>
                                        <td class="highlight"><div class="danger"></div> <a href="javascript:;"><a target="_blank" href="https://dev.stockbangladesh.com/company-details/544">SAIFPOWER</a></a></td>
                                        <td> <div class="btn-group">
                     <button class="btn green btn-sm dropdown-toggle" type="button" data-toggle="dropdown" aria-expanded="false"> Go To
                         <i class="fa fa-angle-down"></i>
                     </button>
                     <ul class="dropdown-menu" role="menu">
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/ta-chart?instrumentCode=SAIFPOWER"> TA Chart </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/advance-ta-chart?instrumentCode=SAIFPOWER"> Advance TA Chart </a>
                         </li>
                                                  <li>
                                                      <a target="_blank" href="https://dev.stockbangladesh.com/minute-chart/544"> Minute Chart </a>
                                                  </li>

                                                  <li>
                                                      <a target="_blank" href="https://dev.stockbangladesh.com/news-chart/544"> News Chart </a>
                                                  </li>



                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/company-details/544"> Company Details </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/fundamental-details/544"> Fundamental Details </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/news/search?keyword=&amp;instrument_id=544&amp;from_date=&amp;to_date="> News</a>
                         </li>
                         <li class="divider"> </li>
                         <li>
                             <a href="javascript:;"> Separated link </a>
                         </li>
                     </ul>
                 </div>
                 </td>
                <td> 25.7 </td>
                <td> 26.3 </td>
                <td> 25 </td>
                <td> 25.3 </td>
                <td> 26.1 </td>
                <td class="font-red-haze"> -0.8 </td>
                <td class="font-red-haze"> -3.07% </td>
                <td> 612 </td>
                <td> 19.345 </td>
                <td> 756580 </td>
                <td> 17-May, 14:30 </td>
            </tr>
                    <tr>
                                        <td class="highlight"><div class="danger"></div> <a href="javascript:;"><a target="_blank" href="https://dev.stockbangladesh.com/company-details/511">SAIHAMCOT</a></a></td>
                                        <td> <div class="btn-group">
                     <button class="btn green btn-sm dropdown-toggle" type="button" data-toggle="dropdown" aria-expanded="false"> Go To
                         <i class="fa fa-angle-down"></i>
                     </button>
                     <ul class="dropdown-menu" role="menu">
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/ta-chart?instrumentCode=SAIHAMCOT"> TA Chart </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/advance-ta-chart?instrumentCode=SAIHAMCOT"> Advance TA Chart </a>
                         </li>
                                                  <li>
                                                      <a target="_blank" href="https://dev.stockbangladesh.com/minute-chart/511"> Minute Chart </a>
                                                  </li>

                                                  <li>
                                                      <a target="_blank" href="https://dev.stockbangladesh.com/news-chart/511"> News Chart </a>
                                                  </li>



                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/company-details/511"> Company Details </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/fundamental-details/511"> Fundamental Details </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/news/search?keyword=&amp;instrument_id=511&amp;from_date=&amp;to_date="> News</a>
                         </li>
                         <li class="divider"> </li>
                         <li>
                             <a href="javascript:;"> Separated link </a>
                         </li>
                     </ul>
                 </div>
                 </td>
                <td> 13.5 </td>
                <td> 14.1 </td>
                <td> 13.5 </td>
                <td> 13.6 </td>
                <td> 14.1 </td>
                <td class="font-red-haze"> -0.5 </td>
                <td class="font-red-haze"> -3.55% </td>
                <td> 219 </td>
                <td> 5.607 </td>
                <td> 405304 </td>
                <td> 17-May, 14:30 </td>
            </tr>
                    <tr>
                                                    <td class="highlight"><div class="info"></div> <a href="javascript:;"><a target="_blank" href="https://dev.stockbangladesh.com/company-details/244">SAIHAMTEX</a></a></td>
                            <td> <div class="btn-group">
                     <button class="btn green btn-sm dropdown-toggle" type="button" data-toggle="dropdown" aria-expanded="false"> Go To
                         <i class="fa fa-angle-down"></i>
                     </button>
                     <ul class="dropdown-menu" role="menu">
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/ta-chart?instrumentCode=SAIHAMTEX"> TA Chart </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/advance-ta-chart?instrumentCode=SAIHAMTEX"> Advance TA Chart </a>
                         </li>
                                                  <li>
                                                      <a target="_blank" href="https://dev.stockbangladesh.com/minute-chart/244"> Minute Chart </a>
                                                  </li>

                                                  <li>
                                                      <a target="_blank" href="https://dev.stockbangladesh.com/news-chart/244"> News Chart </a>
                                                  </li>



                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/company-details/244"> Company Details </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/fundamental-details/244"> Fundamental Details </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/news/search?keyword=&amp;instrument_id=244&amp;from_date=&amp;to_date="> News</a>
                         </li>
                         <li class="divider"> </li>
                         <li>
                             <a href="javascript:;"> Separated link </a>
                         </li>
                     </ul>
                 </div>
                 </td>
                <td> 18.9 </td>
                <td> 19 </td>
                <td> 18.6 </td>
                <td> 18.8 </td>
                <td> 18.9 </td>
                <td class="font-red-haze"> -0.1 </td>
                <td class="font-red-haze"> -0.53% </td>
                <td> 112 </td>
                <td> 2.496 </td>
                <td> 133132 </td>
                <td> 17-May, 14:30 </td>
            </tr>
                    <tr>
                                        <td class="highlight"><div class="danger"></div> <a href="javascript:;"><a target="_blank" href="https://dev.stockbangladesh.com/company-details/247">SALAMCRST</a></a></td>
                                        <td> <div class="btn-group">
                     <button class="btn green btn-sm dropdown-toggle" type="button" data-toggle="dropdown" aria-expanded="false"> Go To
                         <i class="fa fa-angle-down"></i>
                     </button>
                     <ul class="dropdown-menu" role="menu">
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/ta-chart?instrumentCode=SALAMCRST"> TA Chart </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/advance-ta-chart?instrumentCode=SALAMCRST"> Advance TA Chart </a>
                         </li>
                                                  <li>
                                                      <a target="_blank" href="https://dev.stockbangladesh.com/minute-chart/247"> Minute Chart </a>
                                                  </li>

                                                  <li>
                                                      <a target="_blank" href="https://dev.stockbangladesh.com/news-chart/247"> News Chart </a>
                                                  </li>



                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/company-details/247"> Company Details </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/fundamental-details/247"> Fundamental Details </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/news/search?keyword=&amp;instrument_id=247&amp;from_date=&amp;to_date="> News</a>
                         </li>
                         <li class="divider"> </li>
                         <li>
                             <a href="javascript:;"> Separated link </a>
                         </li>
                     </ul>
                 </div>
                 </td>
                <td> 33 </td>
                <td> 34.3 </td>
                <td> 33 </td>
                <td> 33.1 </td>
                <td> 33.5 </td>
                <td class="font-red-haze"> -0.4 </td>
                <td class="font-red-haze"> -1.19% </td>
                <td> 313 </td>
                <td> 8.285 </td>
                <td> 245957 </td>
                <td> 17-May, 14:30 </td>
            </tr>
                    <tr>
                                        <td class="highlight"><div class="danger"></div> <a href="javascript:;"><a target="_blank" href="https://dev.stockbangladesh.com/company-details/250">SALVOCHEM</a></a></td>
                                        <td> <div class="btn-group">
                     <button class="btn green btn-sm dropdown-toggle" type="button" data-toggle="dropdown" aria-expanded="false"> Go To
                         <i class="fa fa-angle-down"></i>
                     </button>
                     <ul class="dropdown-menu" role="menu">
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/ta-chart?instrumentCode=SALVOCHEM"> TA Chart </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/advance-ta-chart?instrumentCode=SALVOCHEM"> Advance TA Chart </a>
                         </li>
                                                  <li>
                                                      <a target="_blank" href="https://dev.stockbangladesh.com/minute-chart/250"> Minute Chart </a>
                                                  </li>

                                                  <li>
                                                      <a target="_blank" href="https://dev.stockbangladesh.com/news-chart/250"> News Chart </a>
                                                  </li>



                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/company-details/250"> Company Details </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/fundamental-details/250"> Fundamental Details </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/news/search?keyword=&amp;instrument_id=250&amp;from_date=&amp;to_date="> News</a>
                         </li>
                         <li class="divider"> </li>
                         <li>
                             <a href="javascript:;"> Separated link </a>
                         </li>
                     </ul>
                 </div>
                 </td>
                <td> 27.8 </td>
                <td> 28 </td>
                <td> 27.3 </td>
                <td> 27.7 </td>
                <td> 28 </td>
                <td class="font-red-haze"> -0.3 </td>
                <td class="font-red-haze"> -1.07% </td>
                <td> 358 </td>
                <td> 28.851 </td>
                <td> 1046185 </td>
                <td> 17-May, 14:30 </td>
            </tr>
                    <tr>
                                        <td class="highlight"><div class="danger"></div> <a href="javascript:;"><a target="_blank" href="https://dev.stockbangladesh.com/company-details/251">SAMATALETH</a></a></td>
                                        <td> <div class="btn-group">
                     <button class="btn green btn-sm dropdown-toggle" type="button" data-toggle="dropdown" aria-expanded="false"> Go To
                         <i class="fa fa-angle-down"></i>
                     </button>
                     <ul class="dropdown-menu" role="menu">
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/ta-chart?instrumentCode=SAMATALETH"> TA Chart </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/advance-ta-chart?instrumentCode=SAMATALETH"> Advance TA Chart </a>
                         </li>
                                                  <li>
                                                      <a target="_blank" href="https://dev.stockbangladesh.com/minute-chart/251"> Minute Chart </a>
                                                  </li>

                                                  <li>
                                                      <a target="_blank" href="https://dev.stockbangladesh.com/news-chart/251"> News Chart </a>
                                                  </li>



                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/company-details/251"> Company Details </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/fundamental-details/251"> Fundamental Details </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/news/search?keyword=&amp;instrument_id=251&amp;from_date=&amp;to_date="> News</a>
                         </li>
                         <li class="divider"> </li>
                         <li>
                             <a href="javascript:;"> Separated link </a>
                         </li>
                     </ul>
                 </div>
                 </td>
                <td> 57.9 </td>
                <td> 58.8 </td>
                <td> 56.7 </td>
                <td> 57.8 </td>
                <td> 58 </td>
                <td class="font-red-haze"> -0.2 </td>
                <td class="font-red-haze"> -0.34% </td>
                <td> 57 </td>
                <td> 0.477 </td>
                <td> 8266 </td>
                <td> 17-May, 14:30 </td>
            </tr>
                    <tr>
                                        <td class="highlight"><div class="danger"></div> <a href="javascript:;"><a target="_blank" href="https://dev.stockbangladesh.com/company-details/255">SAMORITA</a></a></td>
                                        <td> <div class="btn-group">
                     <button class="btn green btn-sm dropdown-toggle" type="button" data-toggle="dropdown" aria-expanded="false"> Go To
                         <i class="fa fa-angle-down"></i>
                     </button>
                     <ul class="dropdown-menu" role="menu">
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/ta-chart?instrumentCode=SAMORITA"> TA Chart </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/advance-ta-chart?instrumentCode=SAMORITA"> Advance TA Chart </a>
                         </li>
                                                  <li>
                                                      <a target="_blank" href="https://dev.stockbangladesh.com/minute-chart/255"> Minute Chart </a>
                                                  </li>

                                                  <li>
                                                      <a target="_blank" href="https://dev.stockbangladesh.com/news-chart/255"> News Chart </a>
                                                  </li>



                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/company-details/255"> Company Details </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/fundamental-details/255"> Fundamental Details </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/news/search?keyword=&amp;instrument_id=255&amp;from_date=&amp;to_date="> News</a>
                         </li>
                         <li class="divider"> </li>
                         <li>
                             <a href="javascript:;"> Separated link </a>
                         </li>
                     </ul>
                 </div>
                 </td>
                <td> 70 </td>
                <td> 70.5 </td>
                <td> 69.7 </td>
                <td> 70 </td>
                <td> 70.5 </td>
                <td class="font-red-haze"> -0.5 </td>
                <td class="font-red-haze"> -0.71% </td>
                <td> 86 </td>
                <td> 1.504 </td>
                <td> 21482 </td>
                <td> 17-May, 14:30 </td>
            </tr>
                    <tr>
                                        <td class="highlight"><div class="danger"></div> <a href="javascript:;"><a target="_blank" href="https://dev.stockbangladesh.com/company-details/256">SANDHANINS</a></a></td>
                                        <td> <div class="btn-group">
                     <button class="btn green btn-sm dropdown-toggle" type="button" data-toggle="dropdown" aria-expanded="false"> Go To
                         <i class="fa fa-angle-down"></i>
                     </button>
                     <ul class="dropdown-menu" role="menu">
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/ta-chart?instrumentCode=SANDHANINS"> TA Chart </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/advance-ta-chart?instrumentCode=SANDHANINS"> Advance TA Chart </a>
                         </li>
                                                  <li>
                                                      <a target="_blank" href="https://dev.stockbangladesh.com/minute-chart/256"> Minute Chart </a>
                                                  </li>

                                                  <li>
                                                      <a target="_blank" href="https://dev.stockbangladesh.com/news-chart/256"> News Chart </a>
                                                  </li>



                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/company-details/256"> Company Details </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/fundamental-details/256"> Fundamental Details </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/news/search?keyword=&amp;instrument_id=256&amp;from_date=&amp;to_date="> News</a>
                         </li>
                         <li class="divider"> </li>
                         <li>
                             <a href="javascript:;"> Separated link </a>
                         </li>
                     </ul>
                 </div>
                 </td>
                <td> 26.8 </td>
                <td> 27.3 </td>
                <td> 26.8 </td>
                <td> 26.9 </td>
                <td> 27.1 </td>
                <td class="font-red-haze"> -0.2 </td>
                <td class="font-red-haze"> -0.74% </td>
                <td> 67 </td>
                <td> 1.288 </td>
                <td> 47691 </td>
                <td> 17-May, 14:30 </td>
            </tr>
                    <tr>
                                        <td class="highlight"><div class="danger"></div> <a href="javascript:;"><a target="_blank" href="https://dev.stockbangladesh.com/company-details/257">SAPORTL</a></a></td>
                                        <td> <div class="btn-group">
                     <button class="btn green btn-sm dropdown-toggle" type="button" data-toggle="dropdown" aria-expanded="false"> Go To
                         <i class="fa fa-angle-down"></i>
                     </button>
                     <ul class="dropdown-menu" role="menu">
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/ta-chart?instrumentCode=SAPORTL"> TA Chart </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/advance-ta-chart?instrumentCode=SAPORTL"> Advance TA Chart </a>
                         </li>
                                                  <li>
                                                      <a target="_blank" href="https://dev.stockbangladesh.com/minute-chart/257"> Minute Chart </a>
                                                  </li>

                                                  <li>
                                                      <a target="_blank" href="https://dev.stockbangladesh.com/news-chart/257"> News Chart </a>
                                                  </li>



                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/company-details/257"> Company Details </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/fundamental-details/257"> Fundamental Details </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/news/search?keyword=&amp;instrument_id=257&amp;from_date=&amp;to_date="> News</a>
                         </li>
                         <li class="divider"> </li>
                         <li>
                             <a href="javascript:;"> Separated link </a>
                         </li>
                     </ul>
                 </div>
                 </td>
                <td> 28.5 </td>
                <td> 29.8 </td>
                <td> 28.2 </td>
                <td> 28.6 </td>
                <td> 29.6 </td>
                <td class="font-red-haze"> -1 </td>
                <td class="font-red-haze"> -3.38% </td>
                <td> 283 </td>
                <td> 4.865 </td>
                <td> 168724 </td>
                <td> 17-May, 14:30 </td>
            </tr>
                    <tr>
            
                <td class="highlight"><div class="success"></div> <a href="javascript:;"><a target="_blank" href="https://dev.stockbangladesh.com/company-details/258">SAVAREFR</a></a></td>
                                                    <td> <div class="btn-group">
                     <button class="btn green btn-sm dropdown-toggle" type="button" data-toggle="dropdown" aria-expanded="false"> Go To
                         <i class="fa fa-angle-down"></i>
                     </button>
                     <ul class="dropdown-menu" role="menu">
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/ta-chart?instrumentCode=SAVAREFR"> TA Chart </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/advance-ta-chart?instrumentCode=SAVAREFR"> Advance TA Chart </a>
                         </li>
                                                  <li>
                                                      <a target="_blank" href="https://dev.stockbangladesh.com/minute-chart/258"> Minute Chart </a>
                                                  </li>

                                                  <li>
                                                      <a target="_blank" href="https://dev.stockbangladesh.com/news-chart/258"> News Chart </a>
                                                  </li>



                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/company-details/258"> Company Details </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/fundamental-details/258"> Fundamental Details </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/news/search?keyword=&amp;instrument_id=258&amp;from_date=&amp;to_date="> News</a>
                         </li>
                         <li class="divider"> </li>
                         <li>
                             <a href="javascript:;"> Separated link </a>
                         </li>
                     </ul>
                 </div>
                 </td>
                <td> 150 </td>
                <td> 150 </td>
                <td> 144.2 </td>
                <td> 147.5 </td>
                <td> 149.2 </td>
                <td class="font-red-haze"> -1.7 </td>
                <td class="font-red-haze"> -1.14% </td>
                <td> 10 </td>
                <td> 0.105 </td>
                <td> 713 </td>
                <td> 17-May, 14:30 </td>
            </tr>
                    <tr>
                                        <td class="highlight"><div class="danger"></div> <a href="javascript:;"><a target="_blank" href="https://dev.stockbangladesh.com/company-details/259">SEBL1STMF</a></a></td>
                                        <td> <div class="btn-group">
                     <button class="btn green btn-sm dropdown-toggle" type="button" data-toggle="dropdown" aria-expanded="false"> Go To
                         <i class="fa fa-angle-down"></i>
                     </button>
                     <ul class="dropdown-menu" role="menu">
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/ta-chart?instrumentCode=SEBL1STMF"> TA Chart </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/advance-ta-chart?instrumentCode=SEBL1STMF"> Advance TA Chart </a>
                         </li>
                                                  <li>
                                                      <a target="_blank" href="https://dev.stockbangladesh.com/minute-chart/259"> Minute Chart </a>
                                                  </li>

                                                  <li>
                                                      <a target="_blank" href="https://dev.stockbangladesh.com/news-chart/259"> News Chart </a>
                                                  </li>



                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/company-details/259"> Company Details </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/fundamental-details/259"> Fundamental Details </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/news/search?keyword=&amp;instrument_id=259&amp;from_date=&amp;to_date="> News</a>
                         </li>
                         <li class="divider"> </li>
                         <li>
                             <a href="javascript:;"> Separated link </a>
                         </li>
                     </ul>
                 </div>
                 </td>
                <td> 14 </td>
                <td> 14 </td>
                <td> 14 </td>
                <td> 14 </td>
                <td> 14.1 </td>
                <td class="font-red-haze"> -0.1 </td>
                <td class="font-red-haze"> -0.71% </td>
                <td> 1 </td>
                <td> 0.014 </td>
                <td> 1000 </td>
                <td> 17-May, 14:30 </td>
            </tr>
                    <tr>
            
                <td class="highlight"><div class="success"></div> <a href="javascript:;"><a target="_blank" href="https://dev.stockbangladesh.com/company-details/30031">SEMLIBBLSF</a></a></td>
                                                    <td> <div class="btn-group">
                     <button class="btn green btn-sm dropdown-toggle" type="button" data-toggle="dropdown" aria-expanded="false"> Go To
                         <i class="fa fa-angle-down"></i>
                     </button>
                     <ul class="dropdown-menu" role="menu">
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/ta-chart?instrumentCode=SEMLIBBLSF"> TA Chart </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/advance-ta-chart?instrumentCode=SEMLIBBLSF"> Advance TA Chart </a>
                         </li>
                                                  <li>
                                                      <a target="_blank" href="https://dev.stockbangladesh.com/minute-chart/30031"> Minute Chart </a>
                                                  </li>

                                                  <li>
                                                      <a target="_blank" href="https://dev.stockbangladesh.com/news-chart/30031"> News Chart </a>
                                                  </li>



                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/company-details/30031"> Company Details </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/fundamental-details/30031"> Fundamental Details </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/news/search?keyword=&amp;instrument_id=30031&amp;from_date=&amp;to_date="> News</a>
                         </li>
                         <li class="divider"> </li>
                         <li>
                             <a href="javascript:;"> Separated link </a>
                         </li>
                     </ul>
                 </div>
                 </td>
                <td> 8.4 </td>
                <td> 8.4 </td>
                <td> 8 </td>
                <td> 8.3 </td>
                <td> 8 </td>
                <td class="font-green-jungle"> 0.3 </td>
                <td class="font-green-jungle"> 3.75% </td>
                <td> 135 </td>
                <td> 4.591 </td>
                <td> 561596 </td>
                <td> 17-May, 14:30 </td>
            </tr>
                    <tr>
            
                <td class="highlight"><div class="success"></div> <a href="javascript:;"><a target="_blank" href="https://dev.stockbangladesh.com/company-details/30019">SEMLLECMF</a></a></td>
                                                    <td> <div class="btn-group">
                     <button class="btn green btn-sm dropdown-toggle" type="button" data-toggle="dropdown" aria-expanded="false"> Go To
                         <i class="fa fa-angle-down"></i>
                     </button>
                     <ul class="dropdown-menu" role="menu">
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/ta-chart?instrumentCode=SEMLLECMF"> TA Chart </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/advance-ta-chart?instrumentCode=SEMLLECMF"> Advance TA Chart </a>
                         </li>
                                                  <li>
                                                      <a target="_blank" href="https://dev.stockbangladesh.com/minute-chart/30019"> Minute Chart </a>
                                                  </li>

                                                  <li>
                                                      <a target="_blank" href="https://dev.stockbangladesh.com/news-chart/30019"> News Chart </a>
                                                  </li>



                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/company-details/30019"> Company Details </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/fundamental-details/30019"> Fundamental Details </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/news/search?keyword=&amp;instrument_id=30019&amp;from_date=&amp;to_date="> News</a>
                         </li>
                         <li class="divider"> </li>
                         <li>
                             <a href="javascript:;"> Separated link </a>
                         </li>
                     </ul>
                 </div>
                 </td>
                <td> 9 </td>
                <td> 9.3 </td>
                <td> 8.7 </td>
                <td> 9 </td>
                <td> 8.6 </td>
                <td class="font-green-jungle"> 0.4 </td>
                <td class="font-green-jungle"> 4.65% </td>
                <td> 468 </td>
                <td> 39.567 </td>
                <td> 4385329 </td>
                <td> 17-May, 14:30 </td>
            </tr>
                    <tr>
            
                <td class="highlight"><div class="success"></div> <a href="javascript:;"><a target="_blank" href="https://dev.stockbangladesh.com/company-details/260">SHAHJABANK</a></a></td>
                                                    <td> <div class="btn-group">
                     <button class="btn green btn-sm dropdown-toggle" type="button" data-toggle="dropdown" aria-expanded="false"> Go To
                         <i class="fa fa-angle-down"></i>
                     </button>
                     <ul class="dropdown-menu" role="menu">
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/ta-chart?instrumentCode=SHAHJABANK"> TA Chart </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/advance-ta-chart?instrumentCode=SHAHJABANK"> Advance TA Chart </a>
                         </li>
                                                  <li>
                                                      <a target="_blank" href="https://dev.stockbangladesh.com/minute-chart/260"> Minute Chart </a>
                                                  </li>

                                                  <li>
                                                      <a target="_blank" href="https://dev.stockbangladesh.com/news-chart/260"> News Chart </a>
                                                  </li>



                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/company-details/260"> Company Details </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/fundamental-details/260"> Fundamental Details </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/news/search?keyword=&amp;instrument_id=260&amp;from_date=&amp;to_date="> News</a>
                         </li>
                         <li class="divider"> </li>
                         <li>
                             <a href="javascript:;"> Separated link </a>
                         </li>
                     </ul>
                 </div>
                 </td>
                <td> 25 </td>
                <td> 25 </td>
                <td> 24.6 </td>
                <td> 24.9 </td>
                <td> 24.9 </td>
                <td class="font-green-jungle"> 0 </td>
                <td class="font-green-jungle"> 0% </td>
                <td> 122 </td>
                <td> 2.061 </td>
                <td> 83151 </td>
                <td> 17-May, 14:30 </td>
            </tr>
                    <tr>
                                        <td class="highlight"><div class="danger"></div> <a href="javascript:;"><a target="_blank" href="https://dev.stockbangladesh.com/company-details/30007">SHASHADNIM</a></a></td>
                                        <td> <div class="btn-group">
                     <button class="btn green btn-sm dropdown-toggle" type="button" data-toggle="dropdown" aria-expanded="false"> Go To
                         <i class="fa fa-angle-down"></i>
                     </button>
                     <ul class="dropdown-menu" role="menu">
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/ta-chart?instrumentCode=SHASHADNIM"> TA Chart </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/advance-ta-chart?instrumentCode=SHASHADNIM"> Advance TA Chart </a>
                         </li>
                                                  <li>
                                                      <a target="_blank" href="https://dev.stockbangladesh.com/minute-chart/30007"> Minute Chart </a>
                                                  </li>

                                                  <li>
                                                      <a target="_blank" href="https://dev.stockbangladesh.com/news-chart/30007"> News Chart </a>
                                                  </li>



                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/company-details/30007"> Company Details </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/fundamental-details/30007"> Fundamental Details </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/news/search?keyword=&amp;instrument_id=30007&amp;from_date=&amp;to_date="> News</a>
                         </li>
                         <li class="divider"> </li>
                         <li>
                             <a href="javascript:;"> Separated link </a>
                         </li>
                     </ul>
                 </div>
                 </td>
                <td> 55.2 </td>
                <td> 56 </td>
                <td> 55.1 </td>
                <td> 55.2 </td>
                <td> 55.8 </td>
                <td class="font-red-haze"> -0.6 </td>
                <td class="font-red-haze"> -1.08% </td>
                <td> 263 </td>
                <td> 6.167 </td>
                <td> 111124 </td>
                <td> 17-May, 14:30 </td>
            </tr>
                    <tr>
                                        <td class="highlight"><div class="danger"></div> <a href="javascript:;"><a target="_blank" href="https://dev.stockbangladesh.com/company-details/30032">SHEPHERD</a></a></td>
                                        <td> <div class="btn-group">
                     <button class="btn green btn-sm dropdown-toggle" type="button" data-toggle="dropdown" aria-expanded="false"> Go To
                         <i class="fa fa-angle-down"></i>
                     </button>
                     <ul class="dropdown-menu" role="menu">
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/ta-chart?instrumentCode=SHEPHERD"> TA Chart </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/advance-ta-chart?instrumentCode=SHEPHERD"> Advance TA Chart </a>
                         </li>
                                                  <li>
                                                      <a target="_blank" href="https://dev.stockbangladesh.com/minute-chart/30032"> Minute Chart </a>
                                                  </li>

                                                  <li>
                                                      <a target="_blank" href="https://dev.stockbangladesh.com/news-chart/30032"> News Chart </a>
                                                  </li>



                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/company-details/30032"> Company Details </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/fundamental-details/30032"> Fundamental Details </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/news/search?keyword=&amp;instrument_id=30032&amp;from_date=&amp;to_date="> News</a>
                         </li>
                         <li class="divider"> </li>
                         <li>
                             <a href="javascript:;"> Separated link </a>
                         </li>
                     </ul>
                 </div>
                 </td>
                <td> 28.7 </td>
                <td> 29.3 </td>
                <td> 28 </td>
                <td> 28.3 </td>
                <td> 28.9 </td>
                <td class="font-red-haze"> -0.6 </td>
                <td class="font-red-haze"> -2.08% </td>
                <td> 873 </td>
                <td> 32.04 </td>
                <td> 1117409 </td>
                <td> 17-May, 14:30 </td>
            </tr>
                    <tr>
                                        <td class="highlight"><div class="danger"></div> <a href="javascript:;"><a target="_blank" href="https://dev.stockbangladesh.com/company-details/542">SHURWID</a></a></td>
                                        <td> <div class="btn-group">
                     <button class="btn green btn-sm dropdown-toggle" type="button" data-toggle="dropdown" aria-expanded="false"> Go To
                         <i class="fa fa-angle-down"></i>
                     </button>
                     <ul class="dropdown-menu" role="menu">
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/ta-chart?instrumentCode=SHURWID"> TA Chart </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/advance-ta-chart?instrumentCode=SHURWID"> Advance TA Chart </a>
                         </li>
                                                  <li>
                                                      <a target="_blank" href="https://dev.stockbangladesh.com/minute-chart/542"> Minute Chart </a>
                                                  </li>

                                                  <li>
                                                      <a target="_blank" href="https://dev.stockbangladesh.com/news-chart/542"> News Chart </a>
                                                  </li>



                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/company-details/542"> Company Details </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/fundamental-details/542"> Fundamental Details </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/news/search?keyword=&amp;instrument_id=542&amp;from_date=&amp;to_date="> News</a>
                         </li>
                         <li class="divider"> </li>
                         <li>
                             <a href="javascript:;"> Separated link </a>
                         </li>
                     </ul>
                 </div>
                 </td>
                <td> 18.5 </td>
                <td> 18.9 </td>
                <td> 18.5 </td>
                <td> 18.5 </td>
                <td> 18.8 </td>
                <td class="font-red-haze"> -0.3 </td>
                <td class="font-red-haze"> -1.6% </td>
                <td> 164 </td>
                <td> 5.1 </td>
                <td> 273767 </td>
                <td> 17-May, 14:30 </td>
            </tr>
                    <tr>
            
                <td class="highlight"><div class="success"></div> <a href="javascript:;"><a target="_blank" href="https://dev.stockbangladesh.com/company-details/261">SHYAMPSUG</a></a></td>
                                                    <td> <div class="btn-group">
                     <button class="btn green btn-sm dropdown-toggle" type="button" data-toggle="dropdown" aria-expanded="false"> Go To
                         <i class="fa fa-angle-down"></i>
                     </button>
                     <ul class="dropdown-menu" role="menu">
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/ta-chart?instrumentCode=SHYAMPSUG"> TA Chart </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/advance-ta-chart?instrumentCode=SHYAMPSUG"> Advance TA Chart </a>
                         </li>
                                                  <li>
                                                      <a target="_blank" href="https://dev.stockbangladesh.com/minute-chart/261"> Minute Chart </a>
                                                  </li>

                                                  <li>
                                                      <a target="_blank" href="https://dev.stockbangladesh.com/news-chart/261"> News Chart </a>
                                                  </li>



                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/company-details/261"> Company Details </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/fundamental-details/261"> Fundamental Details </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/news/search?keyword=&amp;instrument_id=261&amp;from_date=&amp;to_date="> News</a>
                         </li>
                         <li class="divider"> </li>
                         <li>
                             <a href="javascript:;"> Separated link </a>
                         </li>
                     </ul>
                 </div>
                 </td>
                <td> 45.9 </td>
                <td> 46.8 </td>
                <td> 42.7 </td>
                <td> 45.6 </td>
                <td> 42.7 </td>
                <td class="font-green-jungle"> 2.9 </td>
                <td class="font-green-jungle"> 6.79% </td>
                <td> 108 </td>
                <td> 1.095 </td>
                <td> 23776 </td>
                <td> 17-May, 14:30 </td>
            </tr>
                    <tr>
                                        <td class="highlight"><div class="danger"></div> <a href="javascript:;"><a target="_blank" href="https://dev.stockbangladesh.com/company-details/262">SIBL</a></a></td>
                                        <td> <div class="btn-group">
                     <button class="btn green btn-sm dropdown-toggle" type="button" data-toggle="dropdown" aria-expanded="false"> Go To
                         <i class="fa fa-angle-down"></i>
                     </button>
                     <ul class="dropdown-menu" role="menu">
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/ta-chart?instrumentCode=SIBL"> TA Chart </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/advance-ta-chart?instrumentCode=SIBL"> Advance TA Chart </a>
                         </li>
                                                  <li>
                                                      <a target="_blank" href="https://dev.stockbangladesh.com/minute-chart/262"> Minute Chart </a>
                                                  </li>

                                                  <li>
                                                      <a target="_blank" href="https://dev.stockbangladesh.com/news-chart/262"> News Chart </a>
                                                  </li>



                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/company-details/262"> Company Details </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/fundamental-details/262"> Fundamental Details </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/news/search?keyword=&amp;instrument_id=262&amp;from_date=&amp;to_date="> News</a>
                         </li>
                         <li class="divider"> </li>
                         <li>
                             <a href="javascript:;"> Separated link </a>
                         </li>
                     </ul>
                 </div>
                 </td>
                <td> 18.6 </td>
                <td> 18.6 </td>
                <td> 18.1 </td>
                <td> 18.5 </td>
                <td> 18.8 </td>
                <td class="font-red-haze"> -0.3 </td>
                <td class="font-red-haze"> -1.6% </td>
                <td> 190 </td>
                <td> 8.354 </td>
                <td> 452847 </td>
                <td> 17-May, 14:30 </td>
            </tr>
                    <tr>
                                        <td class="highlight"><div class="danger"></div> <a href="javascript:;"><a target="_blank" href="https://dev.stockbangladesh.com/company-details/30016">SIMTEX</a></a></td>
                                        <td> <div class="btn-group">
                     <button class="btn green btn-sm dropdown-toggle" type="button" data-toggle="dropdown" aria-expanded="false"> Go To
                         <i class="fa fa-angle-down"></i>
                     </button>
                     <ul class="dropdown-menu" role="menu">
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/ta-chart?instrumentCode=SIMTEX"> TA Chart </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/advance-ta-chart?instrumentCode=SIMTEX"> Advance TA Chart </a>
                         </li>
                                                  <li>
                                                      <a target="_blank" href="https://dev.stockbangladesh.com/minute-chart/30016"> Minute Chart </a>
                                                  </li>

                                                  <li>
                                                      <a target="_blank" href="https://dev.stockbangladesh.com/news-chart/30016"> News Chart </a>
                                                  </li>



                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/company-details/30016"> Company Details </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/fundamental-details/30016"> Fundamental Details </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/news/search?keyword=&amp;instrument_id=30016&amp;from_date=&amp;to_date="> News</a>
                         </li>
                         <li class="divider"> </li>
                         <li>
                             <a href="javascript:;"> Separated link </a>
                         </li>
                     </ul>
                 </div>
                 </td>
                <td> 28 </td>
                <td> 28.1 </td>
                <td> 27.8 </td>
                <td> 27.9 </td>
                <td> 28.1 </td>
                <td class="font-red-haze"> -0.2 </td>
                <td class="font-red-haze"> -0.71% </td>
                <td> 103 </td>
                <td> 3.725 </td>
                <td> 133484 </td>
                <td> 17-May, 14:30 </td>
            </tr>
                    <tr>
                                        <td class="highlight"><div class="danger"></div> <a href="javascript:;"><a target="_blank" href="https://dev.stockbangladesh.com/company-details/264">SINGERBD</a></a></td>
                                        <td> <div class="btn-group">
                     <button class="btn green btn-sm dropdown-toggle" type="button" data-toggle="dropdown" aria-expanded="false"> Go To
                         <i class="fa fa-angle-down"></i>
                     </button>
                     <ul class="dropdown-menu" role="menu">
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/ta-chart?instrumentCode=SINGERBD"> TA Chart </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/advance-ta-chart?instrumentCode=SINGERBD"> Advance TA Chart </a>
                         </li>
                                                  <li>
                                                      <a target="_blank" href="https://dev.stockbangladesh.com/minute-chart/264"> Minute Chart </a>
                                                  </li>

                                                  <li>
                                                      <a target="_blank" href="https://dev.stockbangladesh.com/news-chart/264"> News Chart </a>
                                                  </li>



                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/company-details/264"> Company Details </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/fundamental-details/264"> Fundamental Details </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/news/search?keyword=&amp;instrument_id=264&amp;from_date=&amp;to_date="> News</a>
                         </li>
                         <li class="divider"> </li>
                         <li>
                             <a href="javascript:;"> Separated link </a>
                         </li>
                     </ul>
                 </div>
                 </td>
                <td> 172.3 </td>
                <td> 174.3 </td>
                <td> 172.2 </td>
                <td> 172.3 </td>
                <td> 173.7 </td>
                <td class="font-red-haze"> -1.4 </td>
                <td class="font-red-haze"> -0.81% </td>
                <td> 220 </td>
                <td> 8.935 </td>
                <td> 51611 </td>
                <td> 17-May, 14:30 </td>
            </tr>
                    <tr>
                                        <td class="highlight"><div class="danger"></div> <a href="javascript:;"><a target="_blank" href="https://dev.stockbangladesh.com/company-details/267">SINOBANGLA</a></a></td>
                                        <td> <div class="btn-group">
                     <button class="btn green btn-sm dropdown-toggle" type="button" data-toggle="dropdown" aria-expanded="false"> Go To
                         <i class="fa fa-angle-down"></i>
                     </button>
                     <ul class="dropdown-menu" role="menu">
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/ta-chart?instrumentCode=SINOBANGLA"> TA Chart </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/advance-ta-chart?instrumentCode=SINOBANGLA"> Advance TA Chart </a>
                         </li>
                                                  <li>
                                                      <a target="_blank" href="https://dev.stockbangladesh.com/minute-chart/267"> Minute Chart </a>
                                                  </li>

                                                  <li>
                                                      <a target="_blank" href="https://dev.stockbangladesh.com/news-chart/267"> News Chart </a>
                                                  </li>



                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/company-details/267"> Company Details </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/fundamental-details/267"> Fundamental Details </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/news/search?keyword=&amp;instrument_id=267&amp;from_date=&amp;to_date="> News</a>
                         </li>
                         <li class="divider"> </li>
                         <li>
                             <a href="javascript:;"> Separated link </a>
                         </li>
                     </ul>
                 </div>
                 </td>
                <td> 51.4 </td>
                <td> 53.4 </td>
                <td> 50 </td>
                <td> 50.6 </td>
                <td> 52.9 </td>
                <td class="font-red-haze"> -2.3 </td>
                <td class="font-red-haze"> -4.35% </td>
                <td> 1240 </td>
                <td> 42.57 </td>
                <td> 825291 </td>
                <td> 17-May, 14:30 </td>
            </tr>
                    <tr>
                                        <td class="highlight"><div class="danger"></div> <a href="javascript:;"><a target="_blank" href="https://dev.stockbangladesh.com/company-details/269">SONALIANSH</a></a></td>
                                        <td> <div class="btn-group">
                     <button class="btn green btn-sm dropdown-toggle" type="button" data-toggle="dropdown" aria-expanded="false"> Go To
                         <i class="fa fa-angle-down"></i>
                     </button>
                     <ul class="dropdown-menu" role="menu">
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/ta-chart?instrumentCode=SONALIANSH"> TA Chart </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/advance-ta-chart?instrumentCode=SONALIANSH"> Advance TA Chart </a>
                         </li>
                                                  <li>
                                                      <a target="_blank" href="https://dev.stockbangladesh.com/minute-chart/269"> Minute Chart </a>
                                                  </li>

                                                  <li>
                                                      <a target="_blank" href="https://dev.stockbangladesh.com/news-chart/269"> News Chart </a>
                                                  </li>



                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/company-details/269"> Company Details </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/fundamental-details/269"> Fundamental Details </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/news/search?keyword=&amp;instrument_id=269&amp;from_date=&amp;to_date="> News</a>
                         </li>
                         <li class="divider"> </li>
                         <li>
                             <a href="javascript:;"> Separated link </a>
                         </li>
                     </ul>
                 </div>
                 </td>
                <td> 290 </td>
                <td> 299.5 </td>
                <td> 284 </td>
                <td> 286.9 </td>
                <td> 296 </td>
                <td class="font-red-haze"> -9.1 </td>
                <td class="font-red-haze"> -3.07% </td>
                <td> 498 </td>
                <td> 9.102 </td>
                <td> 31303 </td>
                <td> 17-May, 14:30 </td>
            </tr>
                    <tr>
                                        <td class="highlight"><div class="danger"></div> <a href="javascript:;"><a target="_blank" href="https://dev.stockbangladesh.com/company-details/268">SONARBAINS</a></a></td>
                                        <td> <div class="btn-group">
                     <button class="btn green btn-sm dropdown-toggle" type="button" data-toggle="dropdown" aria-expanded="false"> Go To
                         <i class="fa fa-angle-down"></i>
                     </button>
                     <ul class="dropdown-menu" role="menu">
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/ta-chart?instrumentCode=SONARBAINS"> TA Chart </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/advance-ta-chart?instrumentCode=SONARBAINS"> Advance TA Chart </a>
                         </li>
                                                  <li>
                                                      <a target="_blank" href="https://dev.stockbangladesh.com/minute-chart/268"> Minute Chart </a>
                                                  </li>

                                                  <li>
                                                      <a target="_blank" href="https://dev.stockbangladesh.com/news-chart/268"> News Chart </a>
                                                  </li>



                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/company-details/268"> Company Details </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/fundamental-details/268"> Fundamental Details </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/news/search?keyword=&amp;instrument_id=268&amp;from_date=&amp;to_date="> News</a>
                         </li>
                         <li class="divider"> </li>
                         <li>
                             <a href="javascript:;"> Separated link </a>
                         </li>
                     </ul>
                 </div>
                 </td>
                <td> 15 </td>
                <td> 15.4 </td>
                <td> 15 </td>
                <td> 15.1 </td>
                <td> 15.2 </td>
                <td class="font-red-haze"> -0.1 </td>
                <td class="font-red-haze"> -0.66% </td>
                <td> 13 </td>
                <td> 0.276 </td>
                <td> 18310 </td>
                <td> 17-May, 14:30 </td>
            </tr>
                    <tr>
            
                <td class="highlight"><div class="success"></div> <a href="javascript:;"><a target="_blank" href="https://dev.stockbangladesh.com/company-details/266">SONARGAON</a></a></td>
                                                    <td> <div class="btn-group">
                     <button class="btn green btn-sm dropdown-toggle" type="button" data-toggle="dropdown" aria-expanded="false"> Go To
                         <i class="fa fa-angle-down"></i>
                     </button>
                     <ul class="dropdown-menu" role="menu">
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/ta-chart?instrumentCode=SONARGAON"> TA Chart </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/advance-ta-chart?instrumentCode=SONARGAON"> Advance TA Chart </a>
                         </li>
                                                  <li>
                                                      <a target="_blank" href="https://dev.stockbangladesh.com/minute-chart/266"> Minute Chart </a>
                                                  </li>

                                                  <li>
                                                      <a target="_blank" href="https://dev.stockbangladesh.com/news-chart/266"> News Chart </a>
                                                  </li>



                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/company-details/266"> Company Details </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/fundamental-details/266"> Fundamental Details </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/news/search?keyword=&amp;instrument_id=266&amp;from_date=&amp;to_date="> News</a>
                         </li>
                         <li class="divider"> </li>
                         <li>
                             <a href="javascript:;"> Separated link </a>
                         </li>
                     </ul>
                 </div>
                 </td>
                <td> 19.8 </td>
                <td> 20 </td>
                <td> 18.2 </td>
                <td> 18.8 </td>
                <td> 19.5 </td>
                <td class="font-red-haze"> -0.7 </td>
                <td class="font-red-haze"> -3.59% </td>
                <td> 55 </td>
                <td> 0.4 </td>
                <td> 20693 </td>
                <td> 17-May, 14:30 </td>
            </tr>
                    <tr>
                                        <td class="highlight"><div class="danger"></div> <a href="javascript:;"><a target="_blank" href="https://dev.stockbangladesh.com/company-details/265">SOUTHEASTB</a></a></td>
                                        <td> <div class="btn-group">
                     <button class="btn green btn-sm dropdown-toggle" type="button" data-toggle="dropdown" aria-expanded="false"> Go To
                         <i class="fa fa-angle-down"></i>
                     </button>
                     <ul class="dropdown-menu" role="menu">
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/ta-chart?instrumentCode=SOUTHEASTB"> TA Chart </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/advance-ta-chart?instrumentCode=SOUTHEASTB"> Advance TA Chart </a>
                         </li>
                                                  <li>
                                                      <a target="_blank" href="https://dev.stockbangladesh.com/minute-chart/265"> Minute Chart </a>
                                                  </li>

                                                  <li>
                                                      <a target="_blank" href="https://dev.stockbangladesh.com/news-chart/265"> News Chart </a>
                                                  </li>



                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/company-details/265"> Company Details </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/fundamental-details/265"> Fundamental Details </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/news/search?keyword=&amp;instrument_id=265&amp;from_date=&amp;to_date="> News</a>
                         </li>
                         <li class="divider"> </li>
                         <li>
                             <a href="javascript:;"> Separated link </a>
                         </li>
                     </ul>
                 </div>
                 </td>
                <td> 16.9 </td>
                <td> 17.3 </td>
                <td> 16.7 </td>
                <td> 16.8 </td>
                <td> 17.2 </td>
                <td class="font-red-haze"> -0.4 </td>
                <td class="font-red-haze"> -2.33% </td>
                <td> 252 </td>
                <td> 13.179 </td>
                <td> 780848 </td>
                <td> 17-May, 14:30 </td>
            </tr>
                    <tr>
                                        <td class="highlight"><div class="danger"></div> <a href="javascript:;"><a target="_blank" href="https://dev.stockbangladesh.com/company-details/263">SPCERAMICS</a></a></td>
                                        <td> <div class="btn-group">
                     <button class="btn green btn-sm dropdown-toggle" type="button" data-toggle="dropdown" aria-expanded="false"> Go To
                         <i class="fa fa-angle-down"></i>
                     </button>
                     <ul class="dropdown-menu" role="menu">
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/ta-chart?instrumentCode=SPCERAMICS"> TA Chart </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/advance-ta-chart?instrumentCode=SPCERAMICS"> Advance TA Chart </a>
                         </li>
                                                  <li>
                                                      <a target="_blank" href="https://dev.stockbangladesh.com/minute-chart/263"> Minute Chart </a>
                                                  </li>

                                                  <li>
                                                      <a target="_blank" href="https://dev.stockbangladesh.com/news-chart/263"> News Chart </a>
                                                  </li>



                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/company-details/263"> Company Details </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/fundamental-details/263"> Fundamental Details </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/news/search?keyword=&amp;instrument_id=263&amp;from_date=&amp;to_date="> News</a>
                         </li>
                         <li class="divider"> </li>
                         <li>
                             <a href="javascript:;"> Separated link </a>
                         </li>
                     </ul>
                 </div>
                 </td>
                <td> 17 </td>
                <td> 18 </td>
                <td> 17 </td>
                <td> 17 </td>
                <td> 17.3 </td>
                <td class="font-red-haze"> -0.3 </td>
                <td class="font-red-haze"> -1.73% </td>
                <td> 72 </td>
                <td> 0.375 </td>
                <td> 21992 </td>
                <td> 17-May, 14:30 </td>
            </tr>
                    <tr>
                                        <td class="highlight"><div class="danger"></div> <a href="javascript:;"><a target="_blank" href="https://dev.stockbangladesh.com/company-details/538">SPCL</a></a></td>
                                        <td> <div class="btn-group">
                     <button class="btn green btn-sm dropdown-toggle" type="button" data-toggle="dropdown" aria-expanded="false"> Go To
                         <i class="fa fa-angle-down"></i>
                     </button>
                     <ul class="dropdown-menu" role="menu">
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/ta-chart?instrumentCode=SPCL"> TA Chart </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/advance-ta-chart?instrumentCode=SPCL"> Advance TA Chart </a>
                         </li>
                                                  <li>
                                                      <a target="_blank" href="https://dev.stockbangladesh.com/minute-chart/538"> Minute Chart </a>
                                                  </li>

                                                  <li>
                                                      <a target="_blank" href="https://dev.stockbangladesh.com/news-chart/538"> News Chart </a>
                                                  </li>



                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/company-details/538"> Company Details </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/fundamental-details/538"> Fundamental Details </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/news/search?keyword=&amp;instrument_id=538&amp;from_date=&amp;to_date="> News</a>
                         </li>
                         <li class="divider"> </li>
                         <li>
                             <a href="javascript:;"> Separated link </a>
                         </li>
                     </ul>
                 </div>
                 </td>
                <td> 90.6 </td>
                <td> 93 </td>
                <td> 90.5 </td>
                <td> 90.7 </td>
                <td> 91.2 </td>
                <td class="font-red-haze"> -0.5 </td>
                <td class="font-red-haze"> -0.55% </td>
                <td> 447 </td>
                <td> 13.742 </td>
                <td> 150462 </td>
                <td> 17-May, 14:30 </td>
            </tr>
                    <tr>
                                        <td class="highlight"><div class="danger"></div> <a href="javascript:;"><a target="_blank" href="https://dev.stockbangladesh.com/company-details/253">SQUARETEXT</a></a></td>
                                        <td> <div class="btn-group">
                     <button class="btn green btn-sm dropdown-toggle" type="button" data-toggle="dropdown" aria-expanded="false"> Go To
                         <i class="fa fa-angle-down"></i>
                     </button>
                     <ul class="dropdown-menu" role="menu">
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/ta-chart?instrumentCode=SQUARETEXT"> TA Chart </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/advance-ta-chart?instrumentCode=SQUARETEXT"> Advance TA Chart </a>
                         </li>
                                                  <li>
                                                      <a target="_blank" href="https://dev.stockbangladesh.com/minute-chart/253"> Minute Chart </a>
                                                  </li>

                                                  <li>
                                                      <a target="_blank" href="https://dev.stockbangladesh.com/news-chart/253"> News Chart </a>
                                                  </li>



                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/company-details/253"> Company Details </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/fundamental-details/253"> Fundamental Details </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/news/search?keyword=&amp;instrument_id=253&amp;from_date=&amp;to_date="> News</a>
                         </li>
                         <li class="divider"> </li>
                         <li>
                             <a href="javascript:;"> Separated link </a>
                         </li>
                     </ul>
                 </div>
                 </td>
                <td> 52.2 </td>
                <td> 53.8 </td>
                <td> 52.2 </td>
                <td> 52.3 </td>
                <td> 52.9 </td>
                <td class="font-red-haze"> -0.6 </td>
                <td class="font-red-haze"> -1.13% </td>
                <td> 152 </td>
                <td> 1.326 </td>
                <td> 25277 </td>
                <td> 17-May, 14:30 </td>
            </tr>
                    <tr>
                                        <td class="highlight"><div class="danger"></div> <a href="javascript:;"><a target="_blank" href="https://dev.stockbangladesh.com/company-details/252">SQURPHARMA</a></a></td>
                                        <td> <div class="btn-group">
                     <button class="btn green btn-sm dropdown-toggle" type="button" data-toggle="dropdown" aria-expanded="false"> Go To
                         <i class="fa fa-angle-down"></i>
                     </button>
                     <ul class="dropdown-menu" role="menu">
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/ta-chart?instrumentCode=SQURPHARMA"> TA Chart </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/advance-ta-chart?instrumentCode=SQURPHARMA"> Advance TA Chart </a>
                         </li>
                                                  <li>
                                                      <a target="_blank" href="https://dev.stockbangladesh.com/minute-chart/252"> Minute Chart </a>
                                                  </li>

                                                  <li>
                                                      <a target="_blank" href="https://dev.stockbangladesh.com/news-chart/252"> News Chart </a>
                                                  </li>



                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/company-details/252"> Company Details </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/fundamental-details/252"> Fundamental Details </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/news/search?keyword=&amp;instrument_id=252&amp;from_date=&amp;to_date="> News</a>
                         </li>
                         <li class="divider"> </li>
                         <li>
                             <a href="javascript:;"> Separated link </a>
                         </li>
                     </ul>
                 </div>
                 </td>
                <td> 296.9 </td>
                <td> 303.7 </td>
                <td> 295.5 </td>
                <td> 296.5 </td>
                <td> 300.1 </td>
                <td class="font-red-haze"> -3.6 </td>
                <td class="font-red-haze"> -1.2% </td>
                <td> 1659 </td>
                <td> 91.303 </td>
                <td> 306039 </td>
                <td> 17-May, 14:30 </td>
            </tr>
                    <tr>
            
                <td class="highlight"><div class="success"></div> <a href="javascript:;"><a target="_blank" href="https://dev.stockbangladesh.com/company-details/249">STANCERAM</a></a></td>
                                                    <td> <div class="btn-group">
                     <button class="btn green btn-sm dropdown-toggle" type="button" data-toggle="dropdown" aria-expanded="false"> Go To
                         <i class="fa fa-angle-down"></i>
                     </button>
                     <ul class="dropdown-menu" role="menu">
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/ta-chart?instrumentCode=STANCERAM"> TA Chart </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/advance-ta-chart?instrumentCode=STANCERAM"> Advance TA Chart </a>
                         </li>
                                                  <li>
                                                      <a target="_blank" href="https://dev.stockbangladesh.com/minute-chart/249"> Minute Chart </a>
                                                  </li>

                                                  <li>
                                                      <a target="_blank" href="https://dev.stockbangladesh.com/news-chart/249"> News Chart </a>
                                                  </li>



                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/company-details/249"> Company Details </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/fundamental-details/249"> Fundamental Details </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/news/search?keyword=&amp;instrument_id=249&amp;from_date=&amp;to_date="> News</a>
                         </li>
                         <li class="divider"> </li>
                         <li>
                             <a href="javascript:;"> Separated link </a>
                         </li>
                     </ul>
                 </div>
                 </td>
                <td> 115.8 </td>
                <td> 117.9 </td>
                <td> 114 </td>
                <td> 114.5 </td>
                <td> 114.7 </td>
                <td class="font-red-haze"> -0.2 </td>
                <td class="font-red-haze"> -0.17% </td>
                <td> 35 </td>
                <td> 0.418 </td>
                <td> 3615 </td>
                <td> 17-May, 14:30 </td>
            </tr>
                    <tr>
                                        <td class="highlight"><div class="danger"></div> <a href="javascript:;"><a target="_blank" href="https://dev.stockbangladesh.com/company-details/248">STANDARINS</a></a></td>
                                        <td> <div class="btn-group">
                     <button class="btn green btn-sm dropdown-toggle" type="button" data-toggle="dropdown" aria-expanded="false"> Go To
                         <i class="fa fa-angle-down"></i>
                     </button>
                     <ul class="dropdown-menu" role="menu">
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/ta-chart?instrumentCode=STANDARINS"> TA Chart </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/advance-ta-chart?instrumentCode=STANDARINS"> Advance TA Chart </a>
                         </li>
                                                  <li>
                                                      <a target="_blank" href="https://dev.stockbangladesh.com/minute-chart/248"> Minute Chart </a>
                                                  </li>

                                                  <li>
                                                      <a target="_blank" href="https://dev.stockbangladesh.com/news-chart/248"> News Chart </a>
                                                  </li>



                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/company-details/248"> Company Details </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/fundamental-details/248"> Fundamental Details </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/news/search?keyword=&amp;instrument_id=248&amp;from_date=&amp;to_date="> News</a>
                         </li>
                         <li class="divider"> </li>
                         <li>
                             <a href="javascript:;"> Separated link </a>
                         </li>
                     </ul>
                 </div>
                 </td>
                <td> 32.8 </td>
                <td> 33.6 </td>
                <td> 31.5 </td>
                <td> 32.9 </td>
                <td> 33.1 </td>
                <td class="font-red-haze"> -0.2 </td>
                <td class="font-red-haze"> -0.6% </td>
                <td> 386 </td>
                <td> 34.638 </td>
                <td> 1050563 </td>
                <td> 17-May, 14:30 </td>
            </tr>
                    <tr>
                                        <td class="highlight"><div class="danger"></div> <a href="javascript:;"><a target="_blank" href="https://dev.stockbangladesh.com/company-details/246">STANDBANKL</a></a></td>
                                        <td> <div class="btn-group">
                     <button class="btn green btn-sm dropdown-toggle" type="button" data-toggle="dropdown" aria-expanded="false"> Go To
                         <i class="fa fa-angle-down"></i>
                     </button>
                     <ul class="dropdown-menu" role="menu">
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/ta-chart?instrumentCode=STANDBANKL"> TA Chart </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/advance-ta-chart?instrumentCode=STANDBANKL"> Advance TA Chart </a>
                         </li>
                                                  <li>
                                                      <a target="_blank" href="https://dev.stockbangladesh.com/minute-chart/246"> Minute Chart </a>
                                                  </li>

                                                  <li>
                                                      <a target="_blank" href="https://dev.stockbangladesh.com/news-chart/246"> News Chart </a>
                                                  </li>



                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/company-details/246"> Company Details </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/fundamental-details/246"> Fundamental Details </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/news/search?keyword=&amp;instrument_id=246&amp;from_date=&amp;to_date="> News</a>
                         </li>
                         <li class="divider"> </li>
                         <li>
                             <a href="javascript:;"> Separated link </a>
                         </li>
                     </ul>
                 </div>
                 </td>
                <td> 11.3 </td>
                <td> 11.5 </td>
                <td> 10.7 </td>
                <td> 11.1 </td>
                <td> 11.5 </td>
                <td class="font-red-haze"> -0.4 </td>
                <td class="font-red-haze"> -3.48% </td>
                <td> 97 </td>
                <td> 3.043 </td>
                <td> 271220 </td>
                <td> 17-May, 14:30 </td>
            </tr>
                    <tr>
            
                <td class="highlight"><div class="success"></div> <a href="javascript:;"><a target="_blank" href="https://dev.stockbangladesh.com/company-details/245">STYLECRAFT</a></a></td>
                                                    <td> <div class="btn-group">
                     <button class="btn green btn-sm dropdown-toggle" type="button" data-toggle="dropdown" aria-expanded="false"> Go To
                         <i class="fa fa-angle-down"></i>
                     </button>
                     <ul class="dropdown-menu" role="menu">
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/ta-chart?instrumentCode=STYLECRAFT"> TA Chart </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/advance-ta-chart?instrumentCode=STYLECRAFT"> Advance TA Chart </a>
                         </li>
                                                  <li>
                                                      <a target="_blank" href="https://dev.stockbangladesh.com/minute-chart/245"> Minute Chart </a>
                                                  </li>

                                                  <li>
                                                      <a target="_blank" href="https://dev.stockbangladesh.com/news-chart/245"> News Chart </a>
                                                  </li>



                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/company-details/245"> Company Details </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/fundamental-details/245"> Fundamental Details </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/news/search?keyword=&amp;instrument_id=245&amp;from_date=&amp;to_date="> News</a>
                         </li>
                         <li class="divider"> </li>
                         <li>
                             <a href="javascript:;"> Separated link </a>
                         </li>
                     </ul>
                 </div>
                 </td>
                <td> 1944 </td>
                <td> 1979.1 </td>
                <td> 1901 </td>
                <td> 1943.6 </td>
                <td> 1929 </td>
                <td class="font-green-jungle"> 14.6 </td>
                <td class="font-green-jungle"> 0.76% </td>
                <td> 1005 </td>
                <td> 21.512 </td>
                <td> 11102 </td>
                <td> 17-May, 14:30 </td>
            </tr>
                    <tr>
                                        <td class="highlight"><div class="danger"></div> <a href="javascript:;"><a target="_blank" href="https://dev.stockbangladesh.com/company-details/243">SUMITPOWER</a></a></td>
                                        <td> <div class="btn-group">
                     <button class="btn green btn-sm dropdown-toggle" type="button" data-toggle="dropdown" aria-expanded="false"> Go To
                         <i class="fa fa-angle-down"></i>
                     </button>
                     <ul class="dropdown-menu" role="menu">
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/ta-chart?instrumentCode=SUMITPOWER"> TA Chart </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/advance-ta-chart?instrumentCode=SUMITPOWER"> Advance TA Chart </a>
                         </li>
                                                  <li>
                                                      <a target="_blank" href="https://dev.stockbangladesh.com/minute-chart/243"> Minute Chart </a>
                                                  </li>

                                                  <li>
                                                      <a target="_blank" href="https://dev.stockbangladesh.com/news-chart/243"> News Chart </a>
                                                  </li>



                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/company-details/243"> Company Details </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/fundamental-details/243"> Fundamental Details </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/news/search?keyword=&amp;instrument_id=243&amp;from_date=&amp;to_date="> News</a>
                         </li>
                         <li class="divider"> </li>
                         <li>
                             <a href="javascript:;"> Separated link </a>
                         </li>
                     </ul>
                 </div>
                 </td>
                <td> 36.5 </td>
                <td> 37 </td>
                <td> 36.4 </td>
                <td> 36.5 </td>
                <td> 36.7 </td>
                <td class="font-red-haze"> -0.2 </td>
                <td class="font-red-haze"> -0.54% </td>
                <td> 363 </td>
                <td> 13.998 </td>
                <td> 383118 </td>
                <td> 17-May, 14:30 </td>
            </tr>
                    <tr>
                                        <td class="highlight"><div class="danger"></div> <a href="javascript:;"><a target="_blank" href="https://dev.stockbangladesh.com/company-details/194">SUNLIFEINS</a></a></td>
                                        <td> <div class="btn-group">
                     <button class="btn green btn-sm dropdown-toggle" type="button" data-toggle="dropdown" aria-expanded="false"> Go To
                         <i class="fa fa-angle-down"></i>
                     </button>
                     <ul class="dropdown-menu" role="menu">
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/ta-chart?instrumentCode=SUNLIFEINS"> TA Chart </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/advance-ta-chart?instrumentCode=SUNLIFEINS"> Advance TA Chart </a>
                         </li>
                                                  <li>
                                                      <a target="_blank" href="https://dev.stockbangladesh.com/minute-chart/194"> Minute Chart </a>
                                                  </li>

                                                  <li>
                                                      <a target="_blank" href="https://dev.stockbangladesh.com/news-chart/194"> News Chart </a>
                                                  </li>



                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/company-details/194"> Company Details </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/fundamental-details/194"> Fundamental Details </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/news/search?keyword=&amp;instrument_id=194&amp;from_date=&amp;to_date="> News</a>
                         </li>
                         <li class="divider"> </li>
                         <li>
                             <a href="javascript:;"> Separated link </a>
                         </li>
                     </ul>
                 </div>
                 </td>
                <td> 22.3 </td>
                <td> 22.6 </td>
                <td> 22.3 </td>
                <td> 22.4 </td>
                <td> 22.5 </td>
                <td class="font-red-haze"> -0.1 </td>
                <td class="font-red-haze"> -0.44% </td>
                <td> 32 </td>
                <td> 0.239 </td>
                <td> 10650 </td>
                <td> 17-May, 14:30 </td>
            </tr>
                    <tr>
                                        <td class="highlight"><div class="danger"></div> <a href="javascript:;"><a target="_blank" href="https://dev.stockbangladesh.com/company-details/241">TAKAFULINS</a></a></td>
                                        <td> <div class="btn-group">
                     <button class="btn green btn-sm dropdown-toggle" type="button" data-toggle="dropdown" aria-expanded="false"> Go To
                         <i class="fa fa-angle-down"></i>
                     </button>
                     <ul class="dropdown-menu" role="menu">
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/ta-chart?instrumentCode=TAKAFULINS"> TA Chart </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/advance-ta-chart?instrumentCode=TAKAFULINS"> Advance TA Chart </a>
                         </li>
                                                  <li>
                                                      <a target="_blank" href="https://dev.stockbangladesh.com/minute-chart/241"> Minute Chart </a>
                                                  </li>

                                                  <li>
                                                      <a target="_blank" href="https://dev.stockbangladesh.com/news-chart/241"> News Chart </a>
                                                  </li>



                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/company-details/241"> Company Details </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/fundamental-details/241"> Fundamental Details </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/news/search?keyword=&amp;instrument_id=241&amp;from_date=&amp;to_date="> News</a>
                         </li>
                         <li class="divider"> </li>
                         <li>
                             <a href="javascript:;"> Separated link </a>
                         </li>
                     </ul>
                 </div>
                 </td>
                <td> 22.7 </td>
                <td> 23.2 </td>
                <td> 22.7 </td>
                <td> 22.9 </td>
                <td> 23.1 </td>
                <td class="font-red-haze"> -0.2 </td>
                <td class="font-red-haze"> -0.87% </td>
                <td> 9 </td>
                <td> 0.081 </td>
                <td> 3557 </td>
                <td> 17-May, 14:30 </td>
            </tr>
                    <tr>
            
                <td class="highlight"><div class="success"></div> <a href="javascript:;"><a target="_blank" href="https://dev.stockbangladesh.com/company-details/240">TALLUSPIN</a></a></td>
                                                    <td> <div class="btn-group">
                     <button class="btn green btn-sm dropdown-toggle" type="button" data-toggle="dropdown" aria-expanded="false"> Go To
                         <i class="fa fa-angle-down"></i>
                     </button>
                     <ul class="dropdown-menu" role="menu">
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/ta-chart?instrumentCode=TALLUSPIN"> TA Chart </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/advance-ta-chart?instrumentCode=TALLUSPIN"> Advance TA Chart </a>
                         </li>
                                                  <li>
                                                      <a target="_blank" href="https://dev.stockbangladesh.com/minute-chart/240"> Minute Chart </a>
                                                  </li>

                                                  <li>
                                                      <a target="_blank" href="https://dev.stockbangladesh.com/news-chart/240"> News Chart </a>
                                                  </li>



                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/company-details/240"> Company Details </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/fundamental-details/240"> Fundamental Details </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/news/search?keyword=&amp;instrument_id=240&amp;from_date=&amp;to_date="> News</a>
                         </li>
                         <li class="divider"> </li>
                         <li>
                             <a href="javascript:;"> Separated link </a>
                         </li>
                     </ul>
                 </div>
                 </td>
                <td> 7.6 </td>
                <td> 7.6 </td>
                <td> 7.4 </td>
                <td> 7.5 </td>
                <td> 7.5 </td>
                <td class="font-green-jungle"> 0 </td>
                <td class="font-green-jungle"> 0% </td>
                <td> 54 </td>
                <td> 0.543 </td>
                <td> 72757 </td>
                <td> 17-May, 14:30 </td>
            </tr>
                    <tr>
                                        <td class="highlight"><div class="danger"></div> <a href="javascript:;"><a target="_blank" href="https://dev.stockbangladesh.com/company-details/239">TITASGAS</a></a></td>
                                        <td> <div class="btn-group">
                     <button class="btn green btn-sm dropdown-toggle" type="button" data-toggle="dropdown" aria-expanded="false"> Go To
                         <i class="fa fa-angle-down"></i>
                     </button>
                     <ul class="dropdown-menu" role="menu">
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/ta-chart?instrumentCode=TITASGAS"> TA Chart </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/advance-ta-chart?instrumentCode=TITASGAS"> Advance TA Chart </a>
                         </li>
                                                  <li>
                                                      <a target="_blank" href="https://dev.stockbangladesh.com/minute-chart/239"> Minute Chart </a>
                                                  </li>

                                                  <li>
                                                      <a target="_blank" href="https://dev.stockbangladesh.com/news-chart/239"> News Chart </a>
                                                  </li>



                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/company-details/239"> Company Details </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/fundamental-details/239"> Fundamental Details </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/news/search?keyword=&amp;instrument_id=239&amp;from_date=&amp;to_date="> News</a>
                         </li>
                         <li class="divider"> </li>
                         <li>
                             <a href="javascript:;"> Separated link </a>
                         </li>
                     </ul>
                 </div>
                 </td>
                <td> 38.7 </td>
                <td> 39 </td>
                <td> 38.6 </td>
                <td> 38.7 </td>
                <td> 39 </td>
                <td class="font-red-haze"> -0.3 </td>
                <td class="font-red-haze"> -0.77% </td>
                <td> 79 </td>
                <td> 2.047 </td>
                <td> 52742 </td>
                <td> 17-May, 14:30 </td>
            </tr>
                    <tr>
                                        <td class="highlight"><div class="danger"></div> <a href="javascript:;"><a target="_blank" href="https://dev.stockbangladesh.com/company-details/30012">TOSRIFA</a></a></td>
                                        <td> <div class="btn-group">
                     <button class="btn green btn-sm dropdown-toggle" type="button" data-toggle="dropdown" aria-expanded="false"> Go To
                         <i class="fa fa-angle-down"></i>
                     </button>
                     <ul class="dropdown-menu" role="menu">
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/ta-chart?instrumentCode=TOSRIFA"> TA Chart </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/advance-ta-chart?instrumentCode=TOSRIFA"> Advance TA Chart </a>
                         </li>
                                                  <li>
                                                      <a target="_blank" href="https://dev.stockbangladesh.com/minute-chart/30012"> Minute Chart </a>
                                                  </li>

                                                  <li>
                                                      <a target="_blank" href="https://dev.stockbangladesh.com/news-chart/30012"> News Chart </a>
                                                  </li>



                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/company-details/30012"> Company Details </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/fundamental-details/30012"> Fundamental Details </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/news/search?keyword=&amp;instrument_id=30012&amp;from_date=&amp;to_date="> News</a>
                         </li>
                         <li class="divider"> </li>
                         <li>
                             <a href="javascript:;"> Separated link </a>
                         </li>
                     </ul>
                 </div>
                 </td>
                <td> 17.6 </td>
                <td> 18.5 </td>
                <td> 17.6 </td>
                <td> 18 </td>
                <td> 18.4 </td>
                <td class="font-red-haze"> -0.4 </td>
                <td class="font-red-haze"> -2.17% </td>
                <td> 93 </td>
                <td> 1.479 </td>
                <td> 81579 </td>
                <td> 17-May, 14:30 </td>
            </tr>
                    <tr>
                                        <td class="highlight"><div class="danger"></div> <a href="javascript:;"><a target="_blank" href="https://dev.stockbangladesh.com/company-details/238">TRUSTB1MF</a></a></td>
                                        <td> <div class="btn-group">
                     <button class="btn green btn-sm dropdown-toggle" type="button" data-toggle="dropdown" aria-expanded="false"> Go To
                         <i class="fa fa-angle-down"></i>
                     </button>
                     <ul class="dropdown-menu" role="menu">
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/ta-chart?instrumentCode=TRUSTB1MF"> TA Chart </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/advance-ta-chart?instrumentCode=TRUSTB1MF"> Advance TA Chart </a>
                         </li>
                                                  <li>
                                                      <a target="_blank" href="https://dev.stockbangladesh.com/minute-chart/238"> Minute Chart </a>
                                                  </li>

                                                  <li>
                                                      <a target="_blank" href="https://dev.stockbangladesh.com/news-chart/238"> News Chart </a>
                                                  </li>



                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/company-details/238"> Company Details </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/fundamental-details/238"> Fundamental Details </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/news/search?keyword=&amp;instrument_id=238&amp;from_date=&amp;to_date="> News</a>
                         </li>
                         <li class="divider"> </li>
                         <li>
                             <a href="javascript:;"> Separated link </a>
                         </li>
                     </ul>
                 </div>
                 </td>
                <td> 6.6 </td>
                <td> 6.7 </td>
                <td> 6.5 </td>
                <td> 6.6 </td>
                <td> 6.7 </td>
                <td class="font-red-haze"> -0.1 </td>
                <td class="font-red-haze"> -1.49% </td>
                <td> 33 </td>
                <td> 3.849 </td>
                <td> 583153 </td>
                <td> 17-May, 14:30 </td>
            </tr>
                    <tr>
                                        <td class="highlight"><div class="danger"></div> <a href="javascript:;"><a target="_blank" href="https://dev.stockbangladesh.com/company-details/237">TRUSTBANK</a></a></td>
                                        <td> <div class="btn-group">
                     <button class="btn green btn-sm dropdown-toggle" type="button" data-toggle="dropdown" aria-expanded="false"> Go To
                         <i class="fa fa-angle-down"></i>
                     </button>
                     <ul class="dropdown-menu" role="menu">
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/ta-chart?instrumentCode=TRUSTBANK"> TA Chart </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/advance-ta-chart?instrumentCode=TRUSTBANK"> Advance TA Chart </a>
                         </li>
                                                  <li>
                                                      <a target="_blank" href="https://dev.stockbangladesh.com/minute-chart/237"> Minute Chart </a>
                                                  </li>

                                                  <li>
                                                      <a target="_blank" href="https://dev.stockbangladesh.com/news-chart/237"> News Chart </a>
                                                  </li>



                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/company-details/237"> Company Details </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/fundamental-details/237"> Fundamental Details </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/news/search?keyword=&amp;instrument_id=237&amp;from_date=&amp;to_date="> News</a>
                         </li>
                         <li class="divider"> </li>
                         <li>
                             <a href="javascript:;"> Separated link </a>
                         </li>
                     </ul>
                 </div>
                 </td>
                <td> 33.2 </td>
                <td> 33.8 </td>
                <td> 33 </td>
                <td> 33.2 </td>
                <td> 33.4 </td>
                <td class="font-red-haze"> -0.2 </td>
                <td class="font-red-haze"> -0.6% </td>
                <td> 152 </td>
                <td> 13.614 </td>
                <td> 409359 </td>
                <td> 17-May, 14:30 </td>
            </tr>
                    <tr>
                                        <td class="highlight"><div class="danger"></div> <a href="javascript:;"><a target="_blank" href="https://dev.stockbangladesh.com/company-details/541">TUNGHAI</a></a></td>
                                        <td> <div class="btn-group">
                     <button class="btn green btn-sm dropdown-toggle" type="button" data-toggle="dropdown" aria-expanded="false"> Go To
                         <i class="fa fa-angle-down"></i>
                     </button>
                     <ul class="dropdown-menu" role="menu">
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/ta-chart?instrumentCode=TUNGHAI"> TA Chart </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/advance-ta-chart?instrumentCode=TUNGHAI"> Advance TA Chart </a>
                         </li>
                                                  <li>
                                                      <a target="_blank" href="https://dev.stockbangladesh.com/minute-chart/541"> Minute Chart </a>
                                                  </li>

                                                  <li>
                                                      <a target="_blank" href="https://dev.stockbangladesh.com/news-chart/541"> News Chart </a>
                                                  </li>



                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/company-details/541"> Company Details </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/fundamental-details/541"> Fundamental Details </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/news/search?keyword=&amp;instrument_id=541&amp;from_date=&amp;to_date="> News</a>
                         </li>
                         <li class="divider"> </li>
                         <li>
                             <a href="javascript:;"> Separated link </a>
                         </li>
                     </ul>
                 </div>
                 </td>
                <td> 7.2 </td>
                <td> 7.5 </td>
                <td> 7.1 </td>
                <td> 7.2 </td>
                <td> 7.6 </td>
                <td class="font-red-haze"> -0.4 </td>
                <td class="font-red-haze"> -5.26% </td>
                <td> 191 </td>
                <td> 2.179 </td>
                <td> 298727 </td>
                <td> 17-May, 14:30 </td>
            </tr>
                    <tr>
                                        <td class="highlight"><div class="danger"></div> <a href="javascript:;"><a target="_blank" href="https://dev.stockbangladesh.com/company-details/236">UCB</a></a></td>
                                        <td> <div class="btn-group">
                     <button class="btn green btn-sm dropdown-toggle" type="button" data-toggle="dropdown" aria-expanded="false"> Go To
                         <i class="fa fa-angle-down"></i>
                     </button>
                     <ul class="dropdown-menu" role="menu">
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/ta-chart?instrumentCode=UCB"> TA Chart </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/advance-ta-chart?instrumentCode=UCB"> Advance TA Chart </a>
                         </li>
                                                  <li>
                                                      <a target="_blank" href="https://dev.stockbangladesh.com/minute-chart/236"> Minute Chart </a>
                                                  </li>

                                                  <li>
                                                      <a target="_blank" href="https://dev.stockbangladesh.com/news-chart/236"> News Chart </a>
                                                  </li>



                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/company-details/236"> Company Details </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/fundamental-details/236"> Fundamental Details </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/news/search?keyword=&amp;instrument_id=236&amp;from_date=&amp;to_date="> News</a>
                         </li>
                         <li class="divider"> </li>
                         <li>
                             <a href="javascript:;"> Separated link </a>
                         </li>
                     </ul>
                 </div>
                 </td>
                <td> 18.3 </td>
                <td> 18.4 </td>
                <td> 18.1 </td>
                <td> 18.2 </td>
                <td> 18.4 </td>
                <td class="font-red-haze"> -0.2 </td>
                <td class="font-red-haze"> -1.09% </td>
                <td> 100 </td>
                <td> 3.248 </td>
                <td> 177899 </td>
                <td> 17-May, 14:30 </td>
            </tr>
                    <tr>
                                        <td class="highlight"><div class="danger"></div> <a href="javascript:;"><a target="_blank" href="https://dev.stockbangladesh.com/company-details/234">UNIONCAP</a></a></td>
                                        <td> <div class="btn-group">
                     <button class="btn green btn-sm dropdown-toggle" type="button" data-toggle="dropdown" aria-expanded="false"> Go To
                         <i class="fa fa-angle-down"></i>
                     </button>
                     <ul class="dropdown-menu" role="menu">
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/ta-chart?instrumentCode=UNIONCAP"> TA Chart </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/advance-ta-chart?instrumentCode=UNIONCAP"> Advance TA Chart </a>
                         </li>
                                                  <li>
                                                      <a target="_blank" href="https://dev.stockbangladesh.com/minute-chart/234"> Minute Chart </a>
                                                  </li>

                                                  <li>
                                                      <a target="_blank" href="https://dev.stockbangladesh.com/news-chart/234"> News Chart </a>
                                                  </li>



                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/company-details/234"> Company Details </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/fundamental-details/234"> Fundamental Details </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/news/search?keyword=&amp;instrument_id=234&amp;from_date=&amp;to_date="> News</a>
                         </li>
                         <li class="divider"> </li>
                         <li>
                             <a href="javascript:;"> Separated link </a>
                         </li>
                     </ul>
                 </div>
                 </td>
                <td> 13.2 </td>
                <td> 13.4 </td>
                <td> 13 </td>
                <td> 13.1 </td>
                <td> 13.3 </td>
                <td class="font-red-haze"> -0.2 </td>
                <td class="font-red-haze"> -1.5% </td>
                <td> 78 </td>
                <td> 1.922 </td>
                <td> 146191 </td>
                <td> 17-May, 14:30 </td>
            </tr>
                    <tr>
                                        <td class="highlight"><div class="danger"></div> <a href="javascript:;"><a target="_blank" href="https://dev.stockbangladesh.com/company-details/512">UNIQUEHRL</a></a></td>
                                        <td> <div class="btn-group">
                     <button class="btn green btn-sm dropdown-toggle" type="button" data-toggle="dropdown" aria-expanded="false"> Go To
                         <i class="fa fa-angle-down"></i>
                     </button>
                     <ul class="dropdown-menu" role="menu">
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/ta-chart?instrumentCode=UNIQUEHRL"> TA Chart </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/advance-ta-chart?instrumentCode=UNIQUEHRL"> Advance TA Chart </a>
                         </li>
                                                  <li>
                                                      <a target="_blank" href="https://dev.stockbangladesh.com/minute-chart/512"> Minute Chart </a>
                                                  </li>

                                                  <li>
                                                      <a target="_blank" href="https://dev.stockbangladesh.com/news-chart/512"> News Chart </a>
                                                  </li>



                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/company-details/512"> Company Details </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/fundamental-details/512"> Fundamental Details </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/news/search?keyword=&amp;instrument_id=512&amp;from_date=&amp;to_date="> News</a>
                         </li>
                         <li class="divider"> </li>
                         <li>
                             <a href="javascript:;"> Separated link </a>
                         </li>
                     </ul>
                 </div>
                 </td>
                <td> 52.1 </td>
                <td> 53 </td>
                <td> 51.6 </td>
                <td> 51.9 </td>
                <td> 52.7 </td>
                <td class="font-red-haze"> -0.8 </td>
                <td class="font-red-haze"> -1.52% </td>
                <td> 402 </td>
                <td> 13.591 </td>
                <td> 261111 </td>
                <td> 17-May, 14:30 </td>
            </tr>
                    <tr>
                                        <td class="highlight"><div class="danger"></div> <a href="javascript:;"><a target="_blank" href="https://dev.stockbangladesh.com/company-details/233">UNITEDAIR</a></a></td>
                                        <td> <div class="btn-group">
                     <button class="btn green btn-sm dropdown-toggle" type="button" data-toggle="dropdown" aria-expanded="false"> Go To
                         <i class="fa fa-angle-down"></i>
                     </button>
                     <ul class="dropdown-menu" role="menu">
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/ta-chart?instrumentCode=UNITEDAIR"> TA Chart </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/advance-ta-chart?instrumentCode=UNITEDAIR"> Advance TA Chart </a>
                         </li>
                                                  <li>
                                                      <a target="_blank" href="https://dev.stockbangladesh.com/minute-chart/233"> Minute Chart </a>
                                                  </li>

                                                  <li>
                                                      <a target="_blank" href="https://dev.stockbangladesh.com/news-chart/233"> News Chart </a>
                                                  </li>



                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/company-details/233"> Company Details </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/fundamental-details/233"> Fundamental Details </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/news/search?keyword=&amp;instrument_id=233&amp;from_date=&amp;to_date="> News</a>
                         </li>
                         <li class="divider"> </li>
                         <li>
                             <a href="javascript:;"> Separated link </a>
                         </li>
                     </ul>
                 </div>
                 </td>
                <td> 4.2 </td>
                <td> 4.3 </td>
                <td> 4.1 </td>
                <td> 4.2 </td>
                <td> 4.3 </td>
                <td class="font-red-haze"> -0.1 </td>
                <td class="font-red-haze"> -2.33% </td>
                <td> 276 </td>
                <td> 3.026 </td>
                <td> 723167 </td>
                <td> 17-May, 14:30 </td>
            </tr>
                    <tr>
                                        <td class="highlight"><div class="danger"></div> <a href="javascript:;"><a target="_blank" href="https://dev.stockbangladesh.com/company-details/235">UNITEDFIN</a></a></td>
                                        <td> <div class="btn-group">
                     <button class="btn green btn-sm dropdown-toggle" type="button" data-toggle="dropdown" aria-expanded="false"> Go To
                         <i class="fa fa-angle-down"></i>
                     </button>
                     <ul class="dropdown-menu" role="menu">
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/ta-chart?instrumentCode=UNITEDFIN"> TA Chart </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/advance-ta-chart?instrumentCode=UNITEDFIN"> Advance TA Chart </a>
                         </li>
                                                  <li>
                                                      <a target="_blank" href="https://dev.stockbangladesh.com/minute-chart/235"> Minute Chart </a>
                                                  </li>

                                                  <li>
                                                      <a target="_blank" href="https://dev.stockbangladesh.com/news-chart/235"> News Chart </a>
                                                  </li>



                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/company-details/235"> Company Details </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/fundamental-details/235"> Fundamental Details </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/news/search?keyword=&amp;instrument_id=235&amp;from_date=&amp;to_date="> News</a>
                         </li>
                         <li class="divider"> </li>
                         <li>
                             <a href="javascript:;"> Separated link </a>
                         </li>
                     </ul>
                 </div>
                 </td>
                <td> 17 </td>
                <td> 17.1 </td>
                <td> 16.9 </td>
                <td> 17 </td>
                <td> 17.1 </td>
                <td class="font-red-haze"> -0.1 </td>
                <td class="font-red-haze"> -0.58% </td>
                <td> 45 </td>
                <td> 3.942 </td>
                <td> 232068 </td>
                <td> 17-May, 14:30 </td>
            </tr>
                    <tr>
                                        <td class="highlight"><div class="danger"></div> <a href="javascript:;"><a target="_blank" href="https://dev.stockbangladesh.com/company-details/232">UNITEDINS</a></a></td>
                                        <td> <div class="btn-group">
                     <button class="btn green btn-sm dropdown-toggle" type="button" data-toggle="dropdown" aria-expanded="false"> Go To
                         <i class="fa fa-angle-down"></i>
                     </button>
                     <ul class="dropdown-menu" role="menu">
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/ta-chart?instrumentCode=UNITEDINS"> TA Chart </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/advance-ta-chart?instrumentCode=UNITEDINS"> Advance TA Chart </a>
                         </li>
                                                  <li>
                                                      <a target="_blank" href="https://dev.stockbangladesh.com/minute-chart/232"> Minute Chart </a>
                                                  </li>

                                                  <li>
                                                      <a target="_blank" href="https://dev.stockbangladesh.com/news-chart/232"> News Chart </a>
                                                  </li>



                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/company-details/232"> Company Details </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/fundamental-details/232"> Fundamental Details </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/news/search?keyword=&amp;instrument_id=232&amp;from_date=&amp;to_date="> News</a>
                         </li>
                         <li class="divider"> </li>
                         <li>
                             <a href="javascript:;"> Separated link </a>
                         </li>
                     </ul>
                 </div>
                 </td>
                <td> 21.5 </td>
                <td> 22.2 </td>
                <td> 21.5 </td>
                <td> 21.7 </td>
                <td> 22.1 </td>
                <td class="font-red-haze"> -0.4 </td>
                <td class="font-red-haze"> -1.81% </td>
                <td> 12 </td>
                <td> 0.071 </td>
                <td> 3272 </td>
                <td> 17-May, 14:30 </td>
            </tr>
                    <tr>
                                        <td class="highlight"><div class="danger"></div> <a href="javascript:;"><a target="_blank" href="https://dev.stockbangladesh.com/company-details/30010">UPGDCL</a></a></td>
                                        <td> <div class="btn-group">
                     <button class="btn green btn-sm dropdown-toggle" type="button" data-toggle="dropdown" aria-expanded="false"> Go To
                         <i class="fa fa-angle-down"></i>
                     </button>
                     <ul class="dropdown-menu" role="menu">
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/ta-chart?instrumentCode=UPGDCL"> TA Chart </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/advance-ta-chart?instrumentCode=UPGDCL"> Advance TA Chart </a>
                         </li>
                                                  <li>
                                                      <a target="_blank" href="https://dev.stockbangladesh.com/minute-chart/30010"> Minute Chart </a>
                                                  </li>

                                                  <li>
                                                      <a target="_blank" href="https://dev.stockbangladesh.com/news-chart/30010"> News Chart </a>
                                                  </li>



                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/company-details/30010"> Company Details </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/fundamental-details/30010"> Fundamental Details </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/news/search?keyword=&amp;instrument_id=30010&amp;from_date=&amp;to_date="> News</a>
                         </li>
                         <li class="divider"> </li>
                         <li>
                             <a href="javascript:;"> Separated link </a>
                         </li>
                     </ul>
                 </div>
                 </td>
                <td> 220.4 </td>
                <td> 229.1 </td>
                <td> 220.1 </td>
                <td> 223.2 </td>
                <td> 225.2 </td>
                <td class="font-red-haze"> -2 </td>
                <td class="font-red-haze"> -0.89% </td>
                <td> 1537 </td>
                <td> 157.718 </td>
                <td> 696743 </td>
                <td> 17-May, 14:30 </td>
            </tr>
                    <tr>
                                        <td class="highlight"><div class="danger"></div> <a href="javascript:;"><a target="_blank" href="https://dev.stockbangladesh.com/company-details/231">USMANIAGL</a></a></td>
                                        <td> <div class="btn-group">
                     <button class="btn green btn-sm dropdown-toggle" type="button" data-toggle="dropdown" aria-expanded="false"> Go To
                         <i class="fa fa-angle-down"></i>
                     </button>
                     <ul class="dropdown-menu" role="menu">
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/ta-chart?instrumentCode=USMANIAGL"> TA Chart </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/advance-ta-chart?instrumentCode=USMANIAGL"> Advance TA Chart </a>
                         </li>
                                                  <li>
                                                      <a target="_blank" href="https://dev.stockbangladesh.com/minute-chart/231"> Minute Chart </a>
                                                  </li>

                                                  <li>
                                                      <a target="_blank" href="https://dev.stockbangladesh.com/news-chart/231"> News Chart </a>
                                                  </li>



                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/company-details/231"> Company Details </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/fundamental-details/231"> Fundamental Details </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/news/search?keyword=&amp;instrument_id=231&amp;from_date=&amp;to_date="> News</a>
                         </li>
                         <li class="divider"> </li>
                         <li>
                             <a href="javascript:;"> Separated link </a>
                         </li>
                     </ul>
                 </div>
                 </td>
                <td> 131.7 </td>
                <td> 136.9 </td>
                <td> 131.3 </td>
                <td> 131.8 </td>
                <td> 135.6 </td>
                <td class="font-red-haze"> -3.8 </td>
                <td class="font-red-haze"> -2.8% </td>
                <td> 1399 </td>
                <td> 37.985 </td>
                <td> 284240 </td>
                <td> 17-May, 14:30 </td>
            </tr>
                    <tr>
                                                    <td class="highlight"><div class="info"></div> <a href="javascript:;"><a target="_blank" href="https://dev.stockbangladesh.com/company-details/230">UTTARABANK</a></a></td>
                            <td> <div class="btn-group">
                     <button class="btn green btn-sm dropdown-toggle" type="button" data-toggle="dropdown" aria-expanded="false"> Go To
                         <i class="fa fa-angle-down"></i>
                     </button>
                     <ul class="dropdown-menu" role="menu">
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/ta-chart?instrumentCode=UTTARABANK"> TA Chart </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/advance-ta-chart?instrumentCode=UTTARABANK"> Advance TA Chart </a>
                         </li>
                                                  <li>
                                                      <a target="_blank" href="https://dev.stockbangladesh.com/minute-chart/230"> Minute Chart </a>
                                                  </li>

                                                  <li>
                                                      <a target="_blank" href="https://dev.stockbangladesh.com/news-chart/230"> News Chart </a>
                                                  </li>



                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/company-details/230"> Company Details </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/fundamental-details/230"> Fundamental Details </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/news/search?keyword=&amp;instrument_id=230&amp;from_date=&amp;to_date="> News</a>
                         </li>
                         <li class="divider"> </li>
                         <li>
                             <a href="javascript:;"> Separated link </a>
                         </li>
                     </ul>
                 </div>
                 </td>
                <td> 23.4 </td>
                <td> 23.5 </td>
                <td> 23.2 </td>
                <td> 23.4 </td>
                <td> 23.4 </td>
                <td class="font-green-jungle"> 0 </td>
                <td class="font-green-jungle"> 0% </td>
                <td> 207 </td>
                <td> 8.092 </td>
                <td> 347487 </td>
                <td> 17-May, 14:30 </td>
            </tr>
                    <tr>
                                        <td class="highlight"><div class="danger"></div> <a href="javascript:;"><a target="_blank" href="https://dev.stockbangladesh.com/company-details/229">UTTARAFIN</a></a></td>
                                        <td> <div class="btn-group">
                     <button class="btn green btn-sm dropdown-toggle" type="button" data-toggle="dropdown" aria-expanded="false"> Go To
                         <i class="fa fa-angle-down"></i>
                     </button>
                     <ul class="dropdown-menu" role="menu">
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/ta-chart?instrumentCode=UTTARAFIN"> TA Chart </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/advance-ta-chart?instrumentCode=UTTARAFIN"> Advance TA Chart </a>
                         </li>
                                                  <li>
                                                      <a target="_blank" href="https://dev.stockbangladesh.com/minute-chart/229"> Minute Chart </a>
                                                  </li>

                                                  <li>
                                                      <a target="_blank" href="https://dev.stockbangladesh.com/news-chart/229"> News Chart </a>
                                                  </li>



                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/company-details/229"> Company Details </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/fundamental-details/229"> Fundamental Details </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/news/search?keyword=&amp;instrument_id=229&amp;from_date=&amp;to_date="> News</a>
                         </li>
                         <li class="divider"> </li>
                         <li>
                             <a href="javascript:;"> Separated link </a>
                         </li>
                     </ul>
                 </div>
                 </td>
                <td> 56.6 </td>
                <td> 58.9 </td>
                <td> 56 </td>
                <td> 57 </td>
                <td> 58.7 </td>
                <td class="font-red-haze"> -1.7 </td>
                <td class="font-red-haze"> -2.9% </td>
                <td> 78 </td>
                <td> 1.205 </td>
                <td> 20960 </td>
                <td> 17-May, 14:30 </td>
            </tr>
                    <tr>
                                        <td class="highlight"><div class="danger"></div> <a href="javascript:;"><a target="_blank" href="https://dev.stockbangladesh.com/company-details/30020">VAMLBDMF1</a></a></td>
                                        <td> <div class="btn-group">
                     <button class="btn green btn-sm dropdown-toggle" type="button" data-toggle="dropdown" aria-expanded="false"> Go To
                         <i class="fa fa-angle-down"></i>
                     </button>
                     <ul class="dropdown-menu" role="menu">
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/ta-chart?instrumentCode=VAMLBDMF1"> TA Chart </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/advance-ta-chart?instrumentCode=VAMLBDMF1"> Advance TA Chart </a>
                         </li>
                                                  <li>
                                                      <a target="_blank" href="https://dev.stockbangladesh.com/minute-chart/30020"> Minute Chart </a>
                                                  </li>

                                                  <li>
                                                      <a target="_blank" href="https://dev.stockbangladesh.com/news-chart/30020"> News Chart </a>
                                                  </li>



                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/company-details/30020"> Company Details </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/fundamental-details/30020"> Fundamental Details </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/news/search?keyword=&amp;instrument_id=30020&amp;from_date=&amp;to_date="> News</a>
                         </li>
                         <li class="divider"> </li>
                         <li>
                             <a href="javascript:;"> Separated link </a>
                         </li>
                     </ul>
                 </div>
                 </td>
                <td> 9.3 </td>
                <td> 9.3 </td>
                <td> 9.2 </td>
                <td> 9.3 </td>
                <td> 9.4 </td>
                <td class="font-red-haze"> -0.1 </td>
                <td class="font-red-haze"> -1.06% </td>
                <td> 5 </td>
                <td> 0.042 </td>
                <td> 4575 </td>
                <td> 13-May, 14:26 </td>
            </tr>
                    <tr>
                                        <td class="highlight"><div class="danger"></div> <a href="javascript:;"><a target="_blank" href="https://dev.stockbangladesh.com/company-details/30028">VAMLRBBF</a></a></td>
                                        <td> <div class="btn-group">
                     <button class="btn green btn-sm dropdown-toggle" type="button" data-toggle="dropdown" aria-expanded="false"> Go To
                         <i class="fa fa-angle-down"></i>
                     </button>
                     <ul class="dropdown-menu" role="menu">
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/ta-chart?instrumentCode=VAMLRBBF"> TA Chart </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/advance-ta-chart?instrumentCode=VAMLRBBF"> Advance TA Chart </a>
                         </li>
                                                  <li>
                                                      <a target="_blank" href="https://dev.stockbangladesh.com/minute-chart/30028"> Minute Chart </a>
                                                  </li>

                                                  <li>
                                                      <a target="_blank" href="https://dev.stockbangladesh.com/news-chart/30028"> News Chart </a>
                                                  </li>



                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/company-details/30028"> Company Details </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/fundamental-details/30028"> Fundamental Details </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/news/search?keyword=&amp;instrument_id=30028&amp;from_date=&amp;to_date="> News</a>
                         </li>
                         <li class="divider"> </li>
                         <li>
                             <a href="javascript:;"> Separated link </a>
                         </li>
                     </ul>
                 </div>
                 </td>
                <td> 8.8 </td>
                <td> 9 </td>
                <td> 8.8 </td>
                <td> 8.9 </td>
                <td> 8.9 </td>
                <td class="font-green-jungle"> 0 </td>
                <td class="font-green-jungle"> 0% </td>
                <td> 18 </td>
                <td> 0.406 </td>
                <td> 45610 </td>
                <td> 17-May, 14:30 </td>
            </tr>
                    <tr>
                                        <td class="highlight"><div class="danger"></div> <a href="javascript:;"><a target="_blank" href="https://dev.stockbangladesh.com/company-details/535">WATACHEM</a></a></td>
                                        <td> <div class="btn-group">
                     <button class="btn green btn-sm dropdown-toggle" type="button" data-toggle="dropdown" aria-expanded="false"> Go To
                         <i class="fa fa-angle-down"></i>
                     </button>
                     <ul class="dropdown-menu" role="menu">
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/ta-chart?instrumentCode=WATACHEM"> TA Chart </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/advance-ta-chart?instrumentCode=WATACHEM"> Advance TA Chart </a>
                         </li>
                                                  <li>
                                                      <a target="_blank" href="https://dev.stockbangladesh.com/minute-chart/535"> Minute Chart </a>
                                                  </li>

                                                  <li>
                                                      <a target="_blank" href="https://dev.stockbangladesh.com/news-chart/535"> News Chart </a>
                                                  </li>



                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/company-details/535"> Company Details </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/fundamental-details/535"> Fundamental Details </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/news/search?keyword=&amp;instrument_id=535&amp;from_date=&amp;to_date="> News</a>
                         </li>
                         <li class="divider"> </li>
                         <li>
                             <a href="javascript:;"> Separated link </a>
                         </li>
                     </ul>
                 </div>
                 </td>
                <td> 302.3 </td>
                <td> 312 </td>
                <td> 301.7 </td>
                <td> 302.2 </td>
                <td> 311.1 </td>
                <td class="font-red-haze"> -8.9 </td>
                <td class="font-red-haze"> -2.86% </td>
                <td> 464 </td>
                <td> 7.785 </td>
                <td> 25483 </td>
                <td> 17-May, 14:30 </td>
            </tr>
                    <tr>
                                        <td class="highlight"><div class="danger"></div> <a href="javascript:;"><a target="_blank" href="https://dev.stockbangladesh.com/company-details/545">WMSHIPYARD</a></a></td>
                                        <td> <div class="btn-group">
                     <button class="btn green btn-sm dropdown-toggle" type="button" data-toggle="dropdown" aria-expanded="false"> Go To
                         <i class="fa fa-angle-down"></i>
                     </button>
                     <ul class="dropdown-menu" role="menu">
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/ta-chart?instrumentCode=WMSHIPYARD"> TA Chart </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/advance-ta-chart?instrumentCode=WMSHIPYARD"> Advance TA Chart </a>
                         </li>
                                                  <li>
                                                      <a target="_blank" href="https://dev.stockbangladesh.com/minute-chart/545"> Minute Chart </a>
                                                  </li>

                                                  <li>
                                                      <a target="_blank" href="https://dev.stockbangladesh.com/news-chart/545"> News Chart </a>
                                                  </li>



                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/company-details/545"> Company Details </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/fundamental-details/545"> Fundamental Details </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/news/search?keyword=&amp;instrument_id=545&amp;from_date=&amp;to_date="> News</a>
                         </li>
                         <li class="divider"> </li>
                         <li>
                             <a href="javascript:;"> Separated link </a>
                         </li>
                     </ul>
                 </div>
                 </td>
                <td> 32.2 </td>
                <td> 33.3 </td>
                <td> 32 </td>
                <td> 32.2 </td>
                <td> 33.3 </td>
                <td class="font-red-haze"> -1.1 </td>
                <td class="font-red-haze"> -3.3% </td>
                <td> 2110 </td>
                <td> 167.63 </td>
                <td> 5154615 </td>
                <td> 17-May, 14:30 </td>
            </tr>
                    <tr>
                                        <td class="highlight"><div class="danger"></div> <a href="javascript:;"><a target="_blank" href="https://dev.stockbangladesh.com/company-details/30026">YPL</a></a></td>
                                        <td> <div class="btn-group">
                     <button class="btn green btn-sm dropdown-toggle" type="button" data-toggle="dropdown" aria-expanded="false"> Go To
                         <i class="fa fa-angle-down"></i>
                     </button>
                     <ul class="dropdown-menu" role="menu">
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/ta-chart?instrumentCode=YPL"> TA Chart </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/advance-ta-chart?instrumentCode=YPL"> Advance TA Chart </a>
                         </li>
                                                  <li>
                                                      <a target="_blank" href="https://dev.stockbangladesh.com/minute-chart/30026"> Minute Chart </a>
                                                  </li>

                                                  <li>
                                                      <a target="_blank" href="https://dev.stockbangladesh.com/news-chart/30026"> News Chart </a>
                                                  </li>



                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/company-details/30026"> Company Details </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/fundamental-details/30026"> Fundamental Details </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/news/search?keyword=&amp;instrument_id=30026&amp;from_date=&amp;to_date="> News</a>
                         </li>
                         <li class="divider"> </li>
                         <li>
                             <a href="javascript:;"> Separated link </a>
                         </li>
                     </ul>
                 </div>
                 </td>
                <td> 17.9 </td>
                <td> 18.1 </td>
                <td> 17.7 </td>
                <td> 17.7 </td>
                <td> 18.2 </td>
                <td class="font-red-haze"> -0.5 </td>
                <td class="font-red-haze"> -2.75% </td>
                <td> 173 </td>
                <td> 3.144 </td>
                <td> 175761 </td>
                <td> 17-May, 14:30 </td>
            </tr>
                    <tr>
                                        <td class="highlight"><div class="danger"></div> <a href="javascript:;"><a target="_blank" href="https://dev.stockbangladesh.com/company-details/30008">ZAHEENSPIN</a></a></td>
                                        <td> <div class="btn-group">
                     <button class="btn green btn-sm dropdown-toggle" type="button" data-toggle="dropdown" aria-expanded="false"> Go To
                         <i class="fa fa-angle-down"></i>
                     </button>
                     <ul class="dropdown-menu" role="menu">
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/ta-chart?instrumentCode=ZAHEENSPIN"> TA Chart </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/advance-ta-chart?instrumentCode=ZAHEENSPIN"> Advance TA Chart </a>
                         </li>
                                                  <li>
                                                      <a target="_blank" href="https://dev.stockbangladesh.com/minute-chart/30008"> Minute Chart </a>
                                                  </li>

                                                  <li>
                                                      <a target="_blank" href="https://dev.stockbangladesh.com/news-chart/30008"> News Chart </a>
                                                  </li>



                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/company-details/30008"> Company Details </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/fundamental-details/30008"> Fundamental Details </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/news/search?keyword=&amp;instrument_id=30008&amp;from_date=&amp;to_date="> News</a>
                         </li>
                         <li class="divider"> </li>
                         <li>
                             <a href="javascript:;"> Separated link </a>
                         </li>
                     </ul>
                 </div>
                 </td>
                <td> 11.5 </td>
                <td> 11.9 </td>
                <td> 11.5 </td>
                <td> 11.6 </td>
                <td> 11.8 </td>
                <td class="font-red-haze"> -0.2 </td>
                <td class="font-red-haze"> -1.69% </td>
                <td> 247 </td>
                <td> 3.748 </td>
                <td> 320870 </td>
                <td> 17-May, 14:30 </td>
            </tr>
                    <tr>
                                        <td class="highlight"><div class="danger"></div> <a href="javascript:;"><a target="_blank" href="https://dev.stockbangladesh.com/company-details/501">ZAHINTEX</a></a></td>
                                        <td> <div class="btn-group">
                     <button class="btn green btn-sm dropdown-toggle" type="button" data-toggle="dropdown" aria-expanded="false"> Go To
                         <i class="fa fa-angle-down"></i>
                     </button>
                     <ul class="dropdown-menu" role="menu">
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/ta-chart?instrumentCode=ZAHINTEX"> TA Chart </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/advance-ta-chart?instrumentCode=ZAHINTEX"> Advance TA Chart </a>
                         </li>
                                                  <li>
                                                      <a target="_blank" href="https://dev.stockbangladesh.com/minute-chart/501"> Minute Chart </a>
                                                  </li>

                                                  <li>
                                                      <a target="_blank" href="https://dev.stockbangladesh.com/news-chart/501"> News Chart </a>
                                                  </li>



                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/company-details/501"> Company Details </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/fundamental-details/501"> Fundamental Details </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/news/search?keyword=&amp;instrument_id=501&amp;from_date=&amp;to_date="> News</a>
                         </li>
                         <li class="divider"> </li>
                         <li>
                             <a href="javascript:;"> Separated link </a>
                         </li>
                     </ul>
                 </div>
                 </td>
                <td> 13 </td>
                <td> 13.2 </td>
                <td> 13 </td>
                <td> 13 </td>
                <td> 13.3 </td>
                <td class="font-red-haze"> -0.3 </td>
                <td class="font-red-haze"> -2.26% </td>
                <td> 96 </td>
                <td> 1.778 </td>
                <td> 136302 </td>
                <td> 17-May, 14:30 </td>
            </tr>
                    <tr>
                                        <td class="highlight"><div class="danger"></div> <a href="javascript:;"><a target="_blank" href="https://dev.stockbangladesh.com/company-details/228">ZEALBANGLA</a></a></td>
                                        <td> <div class="btn-group">
                     <button class="btn green btn-sm dropdown-toggle" type="button" data-toggle="dropdown" aria-expanded="false"> Go To
                         <i class="fa fa-angle-down"></i>
                     </button>
                     <ul class="dropdown-menu" role="menu">
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/ta-chart?instrumentCode=ZEALBANGLA"> TA Chart </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/advance-ta-chart?instrumentCode=ZEALBANGLA"> Advance TA Chart </a>
                         </li>
                                                  <li>
                                                      <a target="_blank" href="https://dev.stockbangladesh.com/minute-chart/228"> Minute Chart </a>
                                                  </li>

                                                  <li>
                                                      <a target="_blank" href="https://dev.stockbangladesh.com/news-chart/228"> News Chart </a>
                                                  </li>



                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/company-details/228"> Company Details </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/fundamental-details/228"> Fundamental Details </a>
                         </li>
                         <li>
                             <a target="_blank" href="https://dev.stockbangladesh.com/news/search?keyword=&amp;instrument_id=228&amp;from_date=&amp;to_date="> News</a>
                         </li>
                         <li class="divider"> </li>
                         <li>
                             <a href="javascript:;"> Separated link </a>
                         </li>
                     </ul>
                 </div>
                 </td>
                <td> 55 </td>
                <td> 58.1 </td>
                <td> 55 </td>
                <td> 56.2 </td>
                <td> 55.8 </td>
                <td class="font-green-jungle"> 0.4 </td>
                <td class="font-green-jungle"> 0.72% </td>
                <td> 166 </td>
                <td> 1.448 </td>
                <td> 25291 </td>
                <td> 17-May, 14:30 </td>
            </tr>
        
        </tbody>
    </table>





<script>
    $(function () {
    $('#myTable').DataTable( {
            "paging":   false
        } );


    });



</script>



";