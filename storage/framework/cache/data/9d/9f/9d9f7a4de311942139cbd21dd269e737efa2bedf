1525862691s:20212:"PGRpdiBjbGFzcz0icm93Ij4NICAgICAgICA8ZGl2IGNsYXNzPSJjb2wtbGctMTIgY29sLW1kLTEyIGNvbC1zbS0xMiBjb2wteHMtMTIiPg0gICAgICAgICAgICA8ZGl2IGNsYXNzPSJwb3J0bGV0IGxpZ2h0IGJvcmRlcmVkIj4NICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InBvcnRsZXQtYm9keSI+DSAgICAgICAgICAgICAgICAgICA8c3R5bGU+Ci50YV9jaGFydCB7IHdpZHRoOiAzMjBweDsgaGVpZ2h0OiAxMDBweDsgfQpAbWVkaWEobWluLXdpZHRoOiA1MDBweCkgeyAudGFfY2hhcnQgeyB3aWR0aDogNDY4cHg7IGhlaWdodDogNjBweDsgfSB9CkBtZWRpYShtaW4td2lkdGg6IDgwMHB4KSB7IC50YV9jaGFydCB7IHdpZHRoOiA3MjhweDsgaGVpZ2h0OiA5MHB4OyB9IH0KQG1lZGlhKG1pbi13aWR0aDogMTIwMHB4KSB7IC50YV9jaGFydCB7IHdpZHRoOiAxMTI4cHg7IGhlaWdodDogMTAwcHg7IH0gfQo8L3N0eWxlPgoKPHNjcmlwdCBhc3luYyBzcmM9Ii8vcGFnZWFkMi5nb29nbGVzeW5kaWNhdGlvbi5jb20vcGFnZWFkL2pzL2Fkc2J5Z29vZ2xlLmpzIj48L3NjcmlwdD4KPCEtLSB0YS1jaGFydCAtLT4KPGlucyBjbGFzcz0iYWRzYnlnb29nbGUgdGFfY2hhcnQiCiAgICAgc3R5bGU9ImRpc3BsYXk6YmxvY2siCiAgICAgZGF0YS1hZC1jbGllbnQ9ImNhLXB1Yi01NzkxNTE5NDM0Njk1MzMyIgogICAgIGRhdGEtYWQtc2xvdD0iMjY5MTU0MzIyOSIKICAgICBkYXRhLWFkLWZvcm1hdD0iYXV0byI+PC9pbnM+CjxzY3JpcHQ+CihhZHNieWdvb2dsZSA9IHdpbmRvdy5hZHNieWdvb2dsZSB8fCBbXSkucHVzaCh7fSk7Cjwvc2NyaXB0PiAgICAgICAgICAgICAgICA8L2Rpdj4NICAgICAgICAgICAgPC9kaXY+DSAgICAgICAgPC9kaXY+DSAgICA8L2Rpdj4NDQ08ZGl2IGNsYXNzPSJyb3ciPg0NICAgIDxkaXYgY2xhc3M9ImNvbC1sZy0zIGNvbC1tZC0zIGNvbC1zbS02IGNvbC14cy0xMiI+DQ0gICAgICAgIDxkaXYgY2xhc3M9ImRhc2hib2FyZC1zdGF0MiAiPg0NICAgICAgICAgICAgPGRpdiBjbGFzcz0iZGlzcGxheSI+DQ0gICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ibnVtYmVyIj4NDSAgICAgICAgICAgICAgICAgICAgPGgzIGNsYXNzPSJmb250LWdyZWVuLWp1bmdsZSI+DQ0gICAgICAgICAgICAgICAgICAgICAgICA8c3Bhbj4gU2VjdG9yPC9zcGFuPg0NICAgICAgICAgICAgICAgICAgICAgICAgPHNtYWxsIGNsYXNzPSJmb250LWdyZWVuLWp1bmdsZSI+PC9zbWFsbD4NDSAgICAgICAgICAgICAgICAgICAgPC9oMz4NDSAgICAgICAgICAgICAgICAgICAgPHNtYWxsPkZvb2QgJmFtcDsgQWxsaWVkPC9zbWFsbD4NDSAgICAgICAgICAgICAgICA8L2Rpdj4NDSAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJpY29uIj4NDSAgICAgICAgICAgICAgICAgICAgPGkgY2xhc3M9Imljb24tbGF5ZXJzIj48L2k+DQ0gICAgICAgICAgICAgICAgPC9kaXY+DQ0gICAgICAgICAgICA8L2Rpdj4NDSAgICAgICAgICAgIDxkaXYgY2xhc3M9InByb2dyZXNzLWluZm8iPg0NICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InByb2dyZXNzIj4NDSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBzdHlsZT0id2lkdGg6IDc2JTsiIGNsYXNzPSJwcm9ncmVzcy1iYXIgcHJvZ3Jlc3MtYmFyLXN1Y2Nlc3MgZ3JlZW4tanVuZ2xlIj4NDSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9InNyLW9ubHkiPjc2JSBwcm9ncmVzczwvc3Bhbj4NDSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3NwYW4+DQ0gICAgICAgICAgICAgICAgPC9kaXY+DQ0gICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ic3RhdHVzIj4NDSAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ic3RhdHVzLXRpdGxlIj48L2Rpdj4NDSAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ic3RhdHVzLW51bWJlciI+PHNwYW4+PC9zcGFuPjwvZGl2Pg0NICAgICAgICAgICAgICAgIDwvZGl2Pg0NICAgICAgICAgICAgPC9kaXY+DQ0gICAgICAgIDwvZGl2Pg0NICAgIDwvZGl2Pg0NDQ0gICAgPGRpdiBjbGFzcz0iY29sLWxnLTMgY29sLW1kLTMgY29sLXNtLTYgY29sLXhzLTEyIj4NDSAgICAgICAgPGRpdiBjbGFzcz0iZGFzaGJvYXJkLXN0YXQyICI+DQ0gICAgICAgICAgICA8ZGl2IGNsYXNzPSJkaXNwbGF5Ij4NDSAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJudW1iZXIiPg0NICAgICAgICAgICAgICAgICAgICA8aDMgY2xhc3M9ImZvbnQtcHVycGxlLXNvZnQiPg0NICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gPkE8L3NwYW4+DQ0gICAgICAgICAgICAgICAgICAgICAgICA8c21hbGwgY2xhc3M9ImZvbnQtcHVycGxlLXNvZnQiPjwvc21hbGw+DQ0gICAgICAgICAgICAgICAgICAgIDwvaDM+DQ0gICAgICAgICAgICAgICAgICAgIDxzbWFsbD5DYXRlZ29yeTwvc21hbGw+DQ0gICAgICAgICAgICAgICAgPC9kaXY+DQ0gICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iaWNvbiI+DQ0gICAgICAgICAgICAgICAgICAgIDxpIGNsYXNzPSJpY29uLWZvbGRlci1hbHQiPjwvaT4NDSAgICAgICAgICAgICAgICA8L2Rpdj4NDSAgICAgICAgICAgIDwvZGl2Pg0NICAgICAgICAgICAgPGRpdiBjbGFzcz0icHJvZ3Jlc3MtaW5mbyI+DQ0gICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0icHJvZ3Jlc3MiPg0NICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIHN0eWxlPSJ3aWR0aDogNzYlOyIgY2xhc3M9InByb2dyZXNzLWJhciBwcm9ncmVzcy1iYXItc3VjY2VzcyBwdXJwbGUtc29mdCI+DQ0gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJzci1vbmx5Ij43NiUgcHJvZ3Jlc3M8L3NwYW4+DQ0gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9zcGFuPg0NICAgICAgICAgICAgICAgIDwvZGl2Pg0NICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InN0YXR1cyI+DQ0NDSAgICAgICAgICAgICAgICA8L2Rpdj4NDSAgICAgICAgICAgIDwvZGl2Pg0NICAgICAgICA8L2Rpdj4NDSAgICA8L2Rpdj4NDSAgICA8ZGl2IGNsYXNzPSJjb2wtbGctMyBjb2wtbWQtMyBjb2wtc20tNiBjb2wteHMtMTIiPg0NICAgICAgICA8ZGl2IGNsYXNzPSJkYXNoYm9hcmQtc3RhdDIgIj4NDSAgICAgICAgICAgIDxkaXYgY2xhc3M9ImRpc3BsYXkiPg0NICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9Im51bWJlciI+DQ0gICAgICAgICAgICAgICAgICAgIDxoMyBjbGFzcz0iZm9udC15ZWxsb3ctZ29sZCI+DQ0gICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiA+MzUwLjggTTwvc3Bhbj4NDSAgICAgICAgICAgICAgICAgICAgICAgIDxzbWFsbCBjbGFzcz0iZm9udC15ZWxsb3ctZ29sZCI+PC9zbWFsbD4NDSAgICAgICAgICAgICAgICAgICAgPC9oMz4NDSAgICAgICAgICAgICAgICAgICAgPHNtYWxsPlJlc2VydmUgYW5kIHN1cnA8L3NtYWxsPg0NICAgICAgICAgICAgICAgIDwvZGl2Pg0NICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9Imljb24iPg0NICAgICAgICAgICAgICAgICAgICA8aSBjbGFzcz0iaWNvbi13YWxsZXQiPjwvaT4NDSAgICAgICAgICAgICAgICA8L2Rpdj4NDSAgICAgICAgICAgIDwvZGl2Pg0NICAgICAgICAgICAgPGRpdiBjbGFzcz0icHJvZ3Jlc3MtaW5mbyI+DQ0gICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0icHJvZ3Jlc3MiPg0NICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIHN0eWxlPSJ3aWR0aDogNzYlOyIgY2xhc3M9InByb2dyZXNzLWJhciBwcm9ncmVzcy1iYXItc3VjY2VzcyB5ZWxsb3ctZ29sZCI+DQ0gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJzci1vbmx5Ij43NiUgcHJvZ3Jlc3M8L3NwYW4+DQ0gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9zcGFuPg0NICAgICAgICAgICAgICAgIDwvZGl2Pg0NICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InN0YXR1cyI+DQ0NDSAgICAgICAgICAgICAgICA8L2Rpdj4NDSAgICAgICAgICAgIDwvZGl2Pg0NICAgICAgICA8L2Rpdj4NDSAgICA8L2Rpdj4NDSAgICA8ZGl2IGNsYXNzPSJjb2wtbGctMyBjb2wtbWQtMyBjb2wtc20tNiBjb2wteHMtMTIiPg0NICAgICAgICA8ZGl2IGNsYXNzPSJkYXNoYm9hcmQtc3RhdDIgIj4NDSAgICAgICAgICAgIDxkaXYgY2xhc3M9ImRpc3BsYXkiPg0NICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9Im51bWJlciI+DQ0gICAgICAgICAgICAgICAgICAgIDxoMyBjbGFzcz0iZm9udC1ncmVlbi1zaGFycCI+DQ0gICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiA+MS41Njwvc3Bhbj4NDSAgICAgICAgICAgICAgICAgICAgICAgIDxzbWFsbCBjbGFzcz0iZm9udC1ncmVlbi1zaGFycCI+PC9zbWFsbD4NDSAgICAgICAgICAgICAgICAgICAgPC9oMz4NDSAgICAgICAgICAgICAgICAgICAgPHNtYWxsPkxhc3QgWWVhciBFUFM8L3NtYWxsPg0NICAgICAgICAgICAgICAgIDwvZGl2Pg0NICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9Imljb24iPg0NICAgICAgICAgICAgICAgICAgICA8aSBjbGFzcz0iaWNvbi1pbmZvIj48L2k+DQ0gICAgICAgICAgICAgICAgPC9kaXY+DQ0gICAgICAgICAgICA8L2Rpdj4NDSAgICAgICAgICAgIDxkaXYgY2xhc3M9InByb2dyZXNzLWluZm8iPg0NICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InByb2dyZXNzIj4NDSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBzdHlsZT0id2lkdGg6IDc2JTsiIGNsYXNzPSJwcm9ncmVzcy1iYXIgcHJvZ3Jlc3MtYmFyLXN1Y2Nlc3MgZ3JlZW4tc2hhcnAiPg0NICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0ic3Itb25seSI+NzYlIHByb2dyZXNzPC9zcGFuPg0NICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvc3Bhbj4NDSAgICAgICAgICAgICAgICA8L2Rpdj4NDSAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJzdGF0dXMiPg0NICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJzdGF0dXMtdGl0bGUiPkVQUyBmb3IgdGhlIHllYXI8L2Rpdj4NDSAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ic3RhdHVzLW51bWJlciI+PHNwYW4+MzAtSnVuLTIwMTc8L3NwYW4+PC9kaXY+DQ0gICAgICAgICAgICAgICAgPC9kaXY+DQ0gICAgICAgICAgICA8L2Rpdj4NDSAgICAgICAgPC9kaXY+DQ0gICAgPC9kaXY+DQ0NDTwvZGl2Pg08ZGl2IGNsYXNzPSJyb3ciPg0NICAgIDxkaXYgY2xhc3M9ImNvbC1sZy0zIGNvbC1tZC0zIGNvbC1zbS02IGNvbC14cy0xMiI+DQ0gICAgICAgIDxkaXYgY2xhc3M9ImRhc2hib2FyZC1zdGF0MiAiPg0NICAgICAgICAgICAgPGRpdiBjbGFzcz0iZGlzcGxheSI+DQ0gICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ibnVtYmVyIj4NDSAgICAgICAgICAgICAgICAgICAgPGgzIGNsYXNzPSJmb250LWdyZWVuLWp1bmdsZSI+DQ0gICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBkYXRhLWNvdW50ZXI9ImNvdW50ZXJ1cCIgZGF0YS12YWx1ZT0iMS44NTMzIj4xLjg1MzM8L3NwYW4+DQ0gICAgICAgICAgICAgICAgICAgICAgICA8c21hbGwgY2xhc3M9ImZvbnQtZ3JlZW4tanVuZ2xlIj48L3NtYWxsPg0NICAgICAgICAgICAgICAgICAgICA8L2gzPg0NICAgICAgICAgICAgICAgICAgICA8c21hbGw+QU5OVUFMSVpFRCBFUFM8L3NtYWxsPg0NICAgICAgICAgICAgICAgIDwvZGl2Pg0NICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9Imljb24iPg0NICAgICAgICAgICAgICAgICAgICA8aSBjbGFzcz0iaWNvbi1waWUtY2hhcnQiPjwvaT4NDSAgICAgICAgICAgICAgICA8L2Rpdj4NDSAgICAgICAgICAgIDwvZGl2Pg0NICAgICAgICAgICAgPGRpdiBjbGFzcz0icHJvZ3Jlc3MtaW5mbyI+DQ0gICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0icHJvZ3Jlc3MiPg0NICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIHN0eWxlPSJ3aWR0aDogNzYlOyIgY2xhc3M9InByb2dyZXNzLWJhciBwcm9ncmVzcy1iYXItc3VjY2VzcyBncmVlbi1qdW5nbGUiPg0NICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0ic3Itb25seSI+NzYlIHByb2dyZXNzPC9zcGFuPg0NICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvc3Bhbj4NDSAgICAgICAgICAgICAgICA8L2Rpdj4NDSAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJzdGF0dXMiPg0NICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJzdGF0dXMtdGl0bGUiPmJhc2VkIG9uIDkgbW9udGhzICgxLjM5KTwvZGl2Pg0NICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJzdGF0dXMtbnVtYmVyIj48c3Bhbj4zMS0wMy0yMDE4PC9zcGFuPjwvZGl2Pg0NICAgICAgICAgICAgICAgIDwvZGl2Pg0NICAgICAgICAgICAgPC9kaXY+DQ0gICAgICAgIDwvZGl2Pg0NICAgIDwvZGl2Pg0NDQ0gICAgPGRpdiBjbGFzcz0iY29sLWxnLTMgY29sLW1kLTMgY29sLXNtLTYgY29sLXhzLTEyIj4NDSAgICAgICAgPGRpdiBjbGFzcz0iZGFzaGJvYXJkLXN0YXQyICI+DQ0gICAgICAgICAgICA8ZGl2IGNsYXNzPSJkaXNwbGF5Ij4NDSAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJudW1iZXIiPg0NICAgICAgICAgICAgICAgICAgICA8aDMgY2xhc3M9ImZvbnQtcHVycGxlLXNvZnQiPg0NICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gZGF0YS1jb3VudGVyPSJjb3VudGVydXAiIGRhdGEtdmFsdWU9IjExNS4xMCI+MTE1LjEwPC9zcGFuPg0NICAgICAgICAgICAgICAgICAgICAgICAgPHNtYWxsIGNsYXNzPSJmb250LXB1cnBsZS1zb2Z0Ij48L3NtYWxsPg0NICAgICAgICAgICAgICAgICAgICA8L2gzPg0NICAgICAgICAgICAgICAgICAgICA8c21hbGw+bmV0IGFzc2V0IHZhbDwvc21hbGw+DQ0gICAgICAgICAgICAgICAgPC9kaXY+DQ0gICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iaWNvbiI+DQ0gICAgICAgICAgICAgICAgICAgIDxpIGNsYXNzPSJpY29uLXBpZS1jaGFydCI+PC9pPg0NICAgICAgICAgICAgICAgIDwvZGl2Pg0NICAgICAgICAgICAgPC9kaXY+DQ0gICAgICAgICAgICA8ZGl2IGNsYXNzPSJwcm9ncmVzcy1pbmZvIj4NDSAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJwcm9ncmVzcyI+DQ0gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gc3R5bGU9IndpZHRoOiA3NiU7IiBjbGFzcz0icHJvZ3Jlc3MtYmFyIHByb2dyZXNzLWJhci1zdWNjZXNzIHB1cnBsZS1zb2Z0Ij4NDSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9InNyLW9ubHkiPjc2JSBwcm9ncmVzczwvc3Bhbj4NDSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3NwYW4+DQ0gICAgICAgICAgICAgICAgPC9kaXY+DQ0gICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ic3RhdHVzIj4NDSAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ic3RhdHVzLXRpdGxlIj4gTGFzdCB1cGRhdGVkIDwvZGl2Pg0NICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJzdGF0dXMtbnVtYmVyIj48c3Bhbj4zMC0wNi0yMDE3PC9zcGFuPjwvZGl2Pg0NICAgICAgICAgICAgICAgIDwvZGl2Pg0NICAgICAgICAgICAgPC9kaXY+DQ0gICAgICAgIDwvZGl2Pg0NICAgIDwvZGl2Pg0NICAgIDxkaXYgY2xhc3M9ImNvbC1sZy0zIGNvbC1tZC0zIGNvbC1zbS02IGNvbC14cy0xMiI+DQ0gICAgICAgIDxkaXYgY2xhc3M9ImRhc2hib2FyZC1zdGF0MiAiPg0NICAgICAgICAgICAgPGRpdiBjbGFzcz0iZGlzcGxheSI+DQ0gICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ibnVtYmVyIj4NDSAgICAgICAgICAgICAgICAgICAgPGgzIGNsYXNzPSJmb250LXllbGxvdy1nb2xkIj4NDSAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGRhdGEtY291bnRlcj0iY291bnRlcnVwIiBkYXRhLXZhbHVlPSI1Ny4wMiI+NTcuMDI8L3NwYW4+DQ0gICAgICAgICAgICAgICAgICAgICAgICA8c21hbGwgY2xhc3M9ImZvbnQteWVsbG93LWdvbGQiPjwvc21hbGw+DQ0gICAgICAgICAgICAgICAgICAgIDwvaDM+DQ0gICAgICAgICAgICAgICAgICAgIDxzbWFsbD5QYWlkIHVwIGNhcGl0YWwgKG0pPC9zbWFsbD4NDSAgICAgICAgICAgICAgICA8L2Rpdj4NDSAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJpY29uIj4NDSAgICAgICAgICAgICAgICAgICAgPGkgY2xhc3M9Imljb24tcGllLWNoYXJ0Ij48L2k+DQ0gICAgICAgICAgICAgICAgPC9kaXY+DQ0gICAgICAgICAgICA8L2Rpdj4NDSAgICAgICAgICAgIDxkaXYgY2xhc3M9InByb2dyZXNzLWluZm8iPg0NICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InByb2dyZXNzIj4NDSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBzdHlsZT0id2lkdGg6IDc2JTsiIGNsYXNzPSJwcm9ncmVzcy1iYXIgcHJvZ3Jlc3MtYmFyLXN1Y2Nlc3MgeWVsbG93LWdvbGQiPg0NICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0ic3Itb25seSI+NzYlIHByb2dyZXNzPC9zcGFuPg0NICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvc3Bhbj4NDSAgICAgICAgICAgICAgICA8L2Rpdj4NDSAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJzdGF0dXMiPg0NICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJzdGF0dXMtdGl0bGUiPiBBdXRob3JpemUgQ2FwaXRhbCA8L2Rpdj4NDSAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ic3RhdHVzLW51bWJlciI+PHNwYW4+MTUwLjAwPC9zcGFuPjwvZGl2Pg0NICAgICAgICAgICAgICAgIDwvZGl2Pg0NICAgICAgICAgICAgPC9kaXY+DQ0gICAgICAgIDwvZGl2Pg0NICAgIDwvZGl2Pg0NICAgIDxkaXYgY2xhc3M9ImNvbC1sZy0zIGNvbC1tZC0zIGNvbC1zbS02IGNvbC14cy0xMiI+DQ0gICAgICAgIDxkaXYgY2xhc3M9ImRhc2hib2FyZC1zdGF0MiAiPg0NICAgICAgICAgICAgPGRpdiBjbGFzcz0iZGlzcGxheSI+DQ0gICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ibnVtYmVyIj4NDSAgICAgICAgICAgICAgICAgICAgPGgzIGNsYXNzPSJmb250LWdyZWVuLXNoYXJwIj4NDSAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuID4yMS0xMi0yMDE3PC9zcGFuPg0NICAgICAgICAgICAgICAgICAgICAgICAgPHNtYWxsIGNsYXNzPSJmb250LWdyZWVuLXNoYXJwIj48L3NtYWxsPg0NICAgICAgICAgICAgICAgICAgICA8L2gzPg0NICAgICAgICAgICAgICAgICAgICA8c21hbGw+TGFzdCBhZ20gaGVsZDwvc21hbGw+DQ0gICAgICAgICAgICAgICAgPC9kaXY+DQ0gICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iaWNvbiI+DQ0gICAgICAgICAgICAgICAgICAgIDxpIGNsYXNzPSJpY29uLXBpZS1jaGFydCI+PC9pPg0NICAgICAgICAgICAgICAgIDwvZGl2Pg0NICAgICAgICAgICAgPC9kaXY+DQ0gICAgICAgICAgICA8ZGl2IGNsYXNzPSJwcm9ncmVzcy1pbmZvIj4NDSAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJwcm9ncmVzcyI+DQ0gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gc3R5bGU9IndpZHRoOiA3NiU7IiBjbGFzcz0icHJvZ3Jlc3MtYmFyIHByb2dyZXNzLWJhci1zdWNjZXNzIGdyZWVuLXNoYXJwIj4NDSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9InNyLW9ubHkiPjc2JSBwcm9ncmVzczwvc3Bhbj4NDSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3NwYW4+DQ0gICAgICAgICAgICAgICAgPC9kaXY+DQ0gICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ic3RhdHVzIj4NDSAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ic3RhdHVzLXRpdGxlIj48L2Rpdj4NDSAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ic3RhdHVzLW51bWJlciI+PHNwYW4+NCBtb250aHMgYWdvPC9zcGFuPjwvZGl2Pg0NICAgICAgICAgICAgICAgIDwvZGl2Pg0NICAgICAgICAgICAgPC9kaXY+DQ0gICAgICAgIDwvZGl2Pg0NICAgIDwvZGl2Pg0NDQ08L2Rpdj4NPGRpdiBjbGFzcz0icm93Ij4NDSAgICA8ZGl2IGNsYXNzPSJjb2wtbGctMyBjb2wtbWQtMyBjb2wtc20tNiBjb2wteHMtMTIiPg0NICAgICAgICA8ZGl2IGNsYXNzPSJkYXNoYm9hcmQtc3RhdDIgIj4NDSAgICAgICAgICAgIDxkaXYgY2xhc3M9ImRpc3BsYXkiPg0NICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9Im51bWJlciI+DQ0gICAgICAgICAgICAgICAgICAgIDxoMyBjbGFzcz0iZm9udC1ncmVlbi1qdW5nbGUiPg0NICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gZGF0YS1jb3VudGVyPSJjb3VudGVydXAiIGRhdGEtdmFsdWU9IjE2NC40MiI+MTY0LjQyPC9zcGFuPg0NICAgICAgICAgICAgICAgICAgICAgICAgPHNtYWxsIGNsYXNzPSJmb250LWdyZWVuLWp1bmdsZSI+PC9zbWFsbD4NDSAgICAgICAgICAgICAgICAgICAgPC9oMz4NDSAgICAgICAgICAgICAgICAgICAgPHNtYWxsPkF1ZGl0ZWQgUC9FPC9zbWFsbD4NDSAgICAgICAgICAgICAgICA8L2Rpdj4NDSAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJpY29uIj4NDSAgICAgICAgICAgICAgICAgICAgPGkgY2xhc3M9Imljb24tcGllLWNoYXJ0Ij48L2k+DQ0gICAgICAgICAgICAgICAgPC9kaXY+DQ0gICAgICAgICAgICA8L2Rpdj4NDSAgICAgICAgICAgIDxkaXYgY2xhc3M9InByb2dyZXNzLWluZm8iPg0NICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InByb2dyZXNzIj4NDSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBzdHlsZT0id2lkdGg6IDc2JTsiIGNsYXNzPSJwcm9ncmVzcy1iYXIgcHJvZ3Jlc3MtYmFyLXN1Y2Nlc3MgZ3JlZW4tanVuZ2xlIj4NDSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9InNyLW9ubHkiPjc2JSBwcm9ncmVzczwvc3Bhbj4NDSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3NwYW4+DQ0gICAgICAgICAgICAgICAgPC9kaXY+DQ0gICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ic3RhdHVzIj4NDSAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ic3RhdHVzLXRpdGxlIj5VbiBhdWFkaXRlZCBQL0UgPC9kaXY+DQ0gICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InN0YXR1cy1udW1iZXIiPjxzcGFuPjEzOC40PC9zcGFuPjwvZGl2Pg0NICAgICAgICAgICAgICAgIDwvZGl2Pg0NICAgICAgICAgICAgPC9kaXY+DQ0gICAgICAgIDwvZGl2Pg0NICAgIDwvZGl2Pg0NDQ0gICAgPGRpdiBjbGFzcz0iY29sLWxnLTMgY29sLW1kLTMgY29sLXNtLTYgY29sLXhzLTEyIj4NDSAgICAgICAgPGRpdiBjbGFzcz0iZGFzaGJvYXJkLXN0YXQyICI+DQ0gICAgICAgICAgICA8ZGl2IGNsYXNzPSJkaXNwbGF5Ij4NDSAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJudW1iZXIiPg0NICAgICAgICAgICAgICAgICAgICA8aDMgY2xhc3M9ImZvbnQtcHVycGxlLXNvZnQiPg0NICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gZGF0YS1jb3VudGVyPSJjb3VudGVydXAiIGRhdGEtdmFsdWU9IjU3MDI0MDAiPjU3MDI0MDA8L3NwYW4+DQ0gICAgICAgICAgICAgICAgICAgICAgICA8c21hbGwgY2xhc3M9ImZvbnQtcHVycGxlLXNvZnQiPjwvc21hbGw+DQ0gICAgICAgICAgICAgICAgICAgIDwvaDM+DQ0gICAgICAgICAgICAgICAgICAgIDxzbWFsbD5Ub3RhbCBzZWN1cml0aWVzPC9zbWFsbD4NDSAgICAgICAgICAgICAgICA8L2Rpdj4NDSAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJpY29uIj4NDSAgICAgICAgICAgICAgICAgICAgPGkgY2xhc3M9Imljb24tcGllLWNoYXJ0Ij48L2k+DQ0gICAgICAgICAgICAgICAgPC9kaXY+DQ0gICAgICAgICAgICA8L2Rpdj4NDSAgICAgICAgICAgIDxkaXYgY2xhc3M9InByb2dyZXNzLWluZm8iPg0NICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InByb2dyZXNzIj4NDSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBzdHlsZT0id2lkdGg6IDc2JTsiIGNsYXNzPSJwcm9ncmVzcy1iYXIgcHJvZ3Jlc3MtYmFyLXN1Y2Nlc3MgcHVycGxlLXNvZnQiPg0NICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0ic3Itb25seSI+NzYlIHByb2dyZXNzPC9zcGFuPg0NICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvc3Bhbj4NDSAgICAgICAgICAgICAgICA8L2Rpdj4NDSAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJzdGF0dXMiPg0NICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJzdGF0dXMtdGl0bGUiPiBQdWJsaWMgc2VjdXJpdGllcyAoNTAuNDclKSA8L2Rpdj4NDSAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ic3RhdHVzLW51bWJlciI+PHNwYW4+Mjg3ODAwMTwvc3Bhbj48L2Rpdj4NDSAgICAgICAgICAgICAgICA8L2Rpdj4NDSAgICAgICAgICAgIDwvZGl2Pg0NICAgICAgICA8L2Rpdj4NDSAgICA8L2Rpdj4NDSAgICA8ZGl2IGNsYXNzPSJjb2wtbGctMyBjb2wtbWQtMyBjb2wtc20tNiBjb2wteHMtMTIiPg0NICAgICAgICA8ZGl2IGNsYXNzPSJkYXNoYm9hcmQtc3RhdDIgIj4NDSAgICAgICAgICAgIDxkaXYgY2xhc3M9ImRpc3BsYXkiPg0NICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9Im51bWJlciI+DQ0gICAgICAgICAgICAgICAgICAgIDxoMyBjbGFzcz0iZm9udC15ZWxsb3ctZ29sZCI+DQ0gICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBkYXRhLWNvdW50ZXI9ImNvdW50ZXJ1cCIgZGF0YS12YWx1ZT0iMTQ2Mi42NyI+MTQ2Mi42Nzwvc3Bhbj4NDSAgICAgICAgICAgICAgICAgICAgICAgIDxzbWFsbCBjbGFzcz0iZm9udC15ZWxsb3ctZ29sZCI+PC9zbWFsbD4NDSAgICAgICAgICAgICAgICAgICAgPC9oMz4NDSAgICAgICAgICAgICAgICAgICAgPHNtYWxsPk1hcmtldCBDYXAgKG0pPC9zbWFsbD4NDSAgICAgICAgICAgICAgICA8L2Rpdj4NDSAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJpY29uIj4NDSAgICAgICAgICAgICAgICAgICAgPGkgY2xhc3M9Imljb24tcGllLWNoYXJ0Ij48L2k+DQ0gICAgICAgICAgICAgICAgPC9kaXY+DQ0gICAgICAgICAgICA8L2Rpdj4NDSAgICAgICAgICAgIDxkaXYgY2xhc3M9InByb2dyZXNzLWluZm8iPg0NICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InByb2dyZXNzIj4NDSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBzdHlsZT0id2lkdGg6IDc2JTsiIGNsYXNzPSJwcm9ncmVzcy1iYXIgcHJvZ3Jlc3MtYmFyLXN1Y2Nlc3MgeWVsbG93LWdvbGQiPg0NICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0ic3Itb25seSI+NzYlIHByb2dyZXNzPC9zcGFuPg0NICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvc3Bhbj4NDSAgICAgICAgICAgICAgICA8L2Rpdj4NDSAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJzdGF0dXMiPg0NICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJzdGF0dXMtdGl0bGUiPiBQdWJsaWMgQ2FwIDwvZGl2Pg0NICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJzdGF0dXMtbnVtYmVyIj48c3Bhbj43MzguMjE8L3NwYW4+PC9kaXY+DQ0gICAgICAgICAgICAgICAgPC9kaXY+DQ0gICAgICAgICAgICA8L2Rpdj4NDSAgICAgICAgPC9kaXY+DQ0gICAgPC9kaXY+DQ0gICAgPGRpdiBjbGFzcz0iY29sLWxnLTMgY29sLW1kLTMgY29sLXNtLTYgY29sLXhzLTEyIj4NDSAgICAgICAgPGRpdiBjbGFzcz0iZGFzaGJvYXJkLXN0YXQyICI+DQ0gICAgICAgICAgICA8ZGl2IGNsYXNzPSJkaXNwbGF5Ij4NDSAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJudW1iZXIiPg0NICAgICAgICAgICAgICAgICAgICA8aDMgY2xhc3M9ImZvbnQtZ3JlZW4tc2hhcnAiPg0NICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gPjMwLUp1bjwvc3Bhbj4NDSAgICAgICAgICAgICAgICAgICAgICAgIDxzbWFsbCBjbGFzcz0iZm9udC1ncmVlbi1zaGFycCI+PC9zbWFsbD4NDSAgICAgICAgICAgICAgICAgICAgPC9oMz4NDSAgICAgICAgICAgICAgICAgICAgPHNtYWxsPlllYXIgRW5kPC9zbWFsbD4NDSAgICAgICAgICAgICAgICA8L2Rpdj4NDSAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJpY29uIj4NDSAgICAgICAgICAgICAgICAgICAgPGkgY2xhc3M9Imljb24tcGllLWNoYXJ0Ij48L2k+DQ0gICAgICAgICAgICAgICAgPC9kaXY+DQ0gICAgICAgICAgICA8L2Rpdj4NDSAgICAgICAgICAgIDxkaXYgY2xhc3M9InByb2dyZXNzLWluZm8iPg0NICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InByb2dyZXNzIj4NDSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBzdHlsZT0id2lkdGg6IDc2JTsiIGNsYXNzPSJwcm9ncmVzcy1iYXIgcHJvZ3Jlc3MtYmFyLXN1Y2Nlc3MgZ3JlZW4tc2hhcnAiPg0NICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0ic3Itb25seSI+NzYlIHByb2dyZXNzPC9zcGFuPg0NICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvc3Bhbj4NDSAgICAgICAgICAgICAgICA8L2Rpdj4NDSAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJzdGF0dXMiPg0NICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJzdGF0dXMtdGl0bGUiPjwvZGl2Pg0NICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJzdGF0dXMtbnVtYmVyIj48c3Bhbj4NICAgICAgICAgICAgICAgICAgICAxIG1vbnRoIGZyb20gbm93PC9zcGFuPjwvZGl2Pg0NICAgICAgICAgICAgICAgIDwvZGl2Pg0NICAgICAgICAgICAgPC9kaXY+DQ0gICAgICAgIDwvZGl2Pg0NICAgIDwvZGl2Pg0NDQ08L2Rpdj4NDQ0N";